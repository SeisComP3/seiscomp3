# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Client')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Client')
    _Client = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Client', [dirname(__file__)])
        except ImportError:
            import _Client
            return _Client
        try:
            _mod = imp.load_module('_Client', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Client = swig_import_helper()
    del swig_import_helper
else:
    import _Client
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Client.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Client.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Client.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Client.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Client.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Client.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Client.SwigPyIterator_copy(self)

    def next(self):
        return _Client.SwigPyIterator_next(self)

    def __next__(self):
        return _Client.SwigPyIterator___next__(self)

    def previous(self):
        return _Client.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Client.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Client.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Client.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Client.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Client.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Client.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Client.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Client.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import seiscomp3.Logging
import seiscomp3.Config
import seiscomp3.Communication
import seiscomp3.Core
import seiscomp3.DataModel
import seiscomp3.IO
import seiscomp3.Math
import seiscomp3.Utils
class CommandLine(_object):
    """Proxy of C++ Seiscomp::Client::CommandLine class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandLine, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::Client::CommandLine self) -> CommandLine"""
        this = _Client.new_CommandLine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addGroup(self, arg2):
        """addGroup(CommandLine self, char const * arg2)"""
        return _Client.CommandLine_addGroup(self, arg2)


    def addOption(self, group, option, description):
        """addOption(CommandLine self, char const * group, char const * option, char const * description)"""
        return _Client.CommandLine_addOption(self, group, option, description)


    def parse(self, argc, argv):
        """parse(CommandLine self, int argc, char ** argv) -> bool"""

        argv = [ bytes(a.encode()) for a in argv ]


        return _Client.CommandLine_parse(self, argc, argv)


    def printOptions(self):
        """printOptions(CommandLine self)"""
        return _Client.CommandLine_printOptions(self)


    def hasOption(self, option):
        """hasOption(CommandLine self, std::string const & option) -> bool"""
        return _Client.CommandLine_hasOption(self, option)


    def unrecognizedOptions(self):
        """unrecognizedOptions(CommandLine self) -> vectorStr"""
        return _Client.CommandLine_unrecognizedOptions(self)


    def optionInt(self, option):
        """optionInt(CommandLine self, std::string const & option) -> int"""
        return _Client.CommandLine_optionInt(self, option)


    def optionBool(self, option):
        """optionBool(CommandLine self, std::string const & option) -> bool"""
        return _Client.CommandLine_optionBool(self, option)


    def optionDouble(self, option):
        """optionDouble(CommandLine self, std::string const & option) -> double"""
        return _Client.CommandLine_optionDouble(self, option)


    def optionString(self, option):
        """optionString(CommandLine self, std::string const & option) -> std::string"""
        return _Client.CommandLine_optionString(self, option)


    def addIntOption(self, *args):
        """
        addIntOption(CommandLine self, char const * group, char const * option, char const * description)
        addIntOption(CommandLine self, char const * group, char const * option, char const * description, int defaultValue)
        """
        return _Client.CommandLine_addIntOption(self, *args)


    def addDoubleOption(self, *args):
        """
        addDoubleOption(CommandLine self, char const * group, char const * option, char const * description)
        addDoubleOption(CommandLine self, char const * group, char const * option, char const * description, double defaultValue)
        """
        return _Client.CommandLine_addDoubleOption(self, *args)


    def addBoolOption(self, *args):
        """
        addBoolOption(CommandLine self, char const * group, char const * option, char const * description)
        addBoolOption(CommandLine self, char const * group, char const * option, char const * description, bool defaultValue)
        """
        return _Client.CommandLine_addBoolOption(self, *args)


    def addStringOption(self, *args):
        """
        addStringOption(CommandLine self, char const * group, char const * option, char const * description)
        addStringOption(CommandLine self, char const * group, char const * option, char const * description, std::string const & defaultValue)
        """
        return _Client.CommandLine_addStringOption(self, *args)

    __swig_destroy__ = _Client.delete_CommandLine
    __del__ = lambda self: None
CommandLine_swigregister = _Client.CommandLine_swigregister
CommandLine_swigregister(CommandLine)

class RunningAverage(_object):
    """Proxy of C++ Seiscomp::Client::RunningAverage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunningAverage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunningAverage, name)
    __repr__ = _swig_repr

    def __init__(self, timeSpanInSeconds):
        """__init__(Seiscomp::Client::RunningAverage self, int timeSpanInSeconds) -> RunningAverage"""
        this = _Client.new_RunningAverage(timeSpanInSeconds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def timeSpan(self):
        """timeSpan(RunningAverage self) -> int"""
        return _Client.RunningAverage_timeSpan(self)


    def push(self, time, count=1):
        """
        push(RunningAverage self, Time time, size_t count=1)
        push(RunningAverage self, Time time)
        """
        return _Client.RunningAverage_push(self, time, count)


    def count(self, time):
        """count(RunningAverage self, Time time) -> int"""
        return _Client.RunningAverage_count(self, time)


    def value(self, time):
        """value(RunningAverage self, Time time) -> double"""
        return _Client.RunningAverage_value(self, time)


    def last(self):
        """last(RunningAverage self) -> Time"""
        return _Client.RunningAverage_last(self)


    def dumpBins(self):
        """dumpBins(RunningAverage self)"""
        return _Client.RunningAverage_dumpBins(self)

    __swig_destroy__ = _Client.delete_RunningAverage
    __del__ = lambda self: None
RunningAverage_swigregister = _Client.RunningAverage_swigregister
RunningAverage_swigregister(RunningAverage)

class ObjectMonitor(_object):
    """Proxy of C++ Seiscomp::Client::ObjectMonitor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectMonitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectMonitor, name)
    __repr__ = _swig_repr

    def __init__(self, timeSpanInSeconds):
        """__init__(Seiscomp::Client::ObjectMonitor self, int timeSpanInSeconds) -> ObjectMonitor"""
        this = _Client.new_ObjectMonitor(timeSpanInSeconds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Client.delete_ObjectMonitor
    __del__ = lambda self: None

    def add(self, *args):
        """
        add(ObjectMonitor self, std::string const & name, std::string const & channel) -> RunningAverage
        add(ObjectMonitor self, std::string const & name) -> RunningAverage
        """
        return _Client.ObjectMonitor_add(self, *args)


    def update(self, time):
        """update(ObjectMonitor self, Time time)"""
        return _Client.ObjectMonitor_update(self, time)


    def begin(self):
        """begin(ObjectMonitor self) -> Seiscomp::Client::ObjectMonitor::const_iterator"""
        return _Client.ObjectMonitor_begin(self)


    def end(self):
        """end(ObjectMonitor self) -> Seiscomp::Client::ObjectMonitor::const_iterator"""
        return _Client.ObjectMonitor_end(self)


    def size(self):
        """size(ObjectMonitor self) -> size_t"""
        return _Client.ObjectMonitor_size(self)

ObjectMonitor_swigregister = _Client.ObjectMonitor_swigregister
ObjectMonitor_swigregister(ObjectMonitor)

STARTED = _Client.STARTED
FINISHED = _Client.FINISHED
EApplicationStatusQuantity = _Client.EApplicationStatusQuantity
class EApplicationStatusNames(_object):
    """Proxy of C++ Seiscomp::Client::EApplicationStatusNames class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EApplicationStatusNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EApplicationStatusNames, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::Client::EApplicationStatusNames self) -> EApplicationStatusNames"""
        this = _Client.new_EApplicationStatusNames()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(i):
        """name(int i) -> char const *"""
        return _Client.EApplicationStatusNames_name(i)

    name = staticmethod(name)
    __swig_destroy__ = _Client.delete_EApplicationStatusNames
    __del__ = lambda self: None
EApplicationStatusNames_swigregister = _Client.EApplicationStatusNames_swigregister
EApplicationStatusNames_swigregister(EApplicationStatusNames)

def EApplicationStatusNames_name(i):
    """EApplicationStatusNames_name(int i) -> char const *"""
    return _Client.EApplicationStatusNames_name(i)

class ApplicationStatusMessage(seiscomp3.Core.Message):
    """Proxy of C++ Seiscomp::Client::ApplicationStatusMessage class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.Message]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationStatusMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.Message]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationStatusMessage, name)
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _Client.ApplicationStatusMessage_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _Client.ApplicationStatusMessage_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(ApplicationStatusMessage self) -> char const *"""
        return _Client.ApplicationStatusMessage_className(self)


    def typeInfo(self):
        """typeInfo(ApplicationStatusMessage self) -> RTTI"""
        return _Client.ApplicationStatusMessage_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> ApplicationStatusMessage
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ApplicationStatusMessage
        """
        return _Client.ApplicationStatusMessage_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ApplicationStatusMessage
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ApplicationStatusMessage
        """
        return _Client.ApplicationStatusMessage_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)

    def serialize(self, ar):
        """serialize(ApplicationStatusMessage self, GenericArchive ar)"""
        return _Client.ApplicationStatusMessage_serialize(self, ar)


    def __init__(self, *args):
        """
        __init__(Seiscomp::Client::ApplicationStatusMessage self) -> ApplicationStatusMessage
        __init__(Seiscomp::Client::ApplicationStatusMessage self, std::string const & module, Seiscomp::Client::ApplicationStatus status) -> ApplicationStatusMessage
        __init__(Seiscomp::Client::ApplicationStatusMessage self, std::string const & module, std::string const & username, Seiscomp::Client::ApplicationStatus status) -> ApplicationStatusMessage
        """
        this = _Client.new_ApplicationStatusMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """empty(ApplicationStatusMessage self) -> bool"""
        return _Client.ApplicationStatusMessage_empty(self)


    def module(self):
        """module(ApplicationStatusMessage self) -> std::string const &"""
        return _Client.ApplicationStatusMessage_module(self)


    def username(self):
        """username(ApplicationStatusMessage self) -> std::string const &"""
        return _Client.ApplicationStatusMessage_username(self)


    def status(self):
        """status(ApplicationStatusMessage self) -> Seiscomp::Client::ApplicationStatus"""
        return _Client.ApplicationStatusMessage_status(self)

    __swig_destroy__ = _Client.delete_ApplicationStatusMessage
    __del__ = lambda self: None
ApplicationStatusMessage_swigregister = _Client.ApplicationStatusMessage_swigregister
ApplicationStatusMessage_swigregister(ApplicationStatusMessage)

def ApplicationStatusMessage_ClassName():
    """ApplicationStatusMessage_ClassName() -> char const *"""
    return _Client.ApplicationStatusMessage_ClassName()

def ApplicationStatusMessage_TypeInfo():
    """ApplicationStatusMessage_TypeInfo() -> RTTI"""
    return _Client.ApplicationStatusMessage_TypeInfo()

def ApplicationStatusMessage_Cast(*args):
    """
    Cast(BaseObject o) -> ApplicationStatusMessage
    ApplicationStatusMessage_Cast(Seiscomp::Core::BaseObjectPtr o) -> ApplicationStatusMessage
    """
    return _Client.ApplicationStatusMessage_Cast(*args)

def ApplicationStatusMessage_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> ApplicationStatusMessage
    ApplicationStatusMessage_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ApplicationStatusMessage
    """
    return _Client.ApplicationStatusMessage_ConstCast(*args)

class Notification(_object):
    """Proxy of C++ Seiscomp::Client::Notification class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Notification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Notification, name)
    __repr__ = _swig_repr
    Object = _Client.Notification_Object
    Disconnect = _Client.Notification_Disconnect
    Reconnect = _Client.Notification_Reconnect
    Close = _Client.Notification_Close
    Timeout = _Client.Notification_Timeout
    Sync = _Client.Notification_Sync
    AcquisitionFinished = _Client.Notification_AcquisitionFinished

    def __init__(self, *args):
        """
        __init__(Seiscomp::Client::Notification self) -> Notification
        __init__(Seiscomp::Client::Notification self, BaseObject o) -> Notification
        __init__(Seiscomp::Client::Notification self, int t) -> Notification
        __init__(Seiscomp::Client::Notification self, int t, BaseObject o) -> Notification
        """
        this = _Client.new_Notification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["object"] = _Client.Notification_object_set
    __swig_getmethods__["object"] = _Client.Notification_object_get
    if _newclass:
        object = _swig_property(_Client.Notification_object_get, _Client.Notification_object_set)
    __swig_setmethods__["type"] = _Client.Notification_type_set
    __swig_getmethods__["type"] = _Client.Notification_type_get
    if _newclass:
        type = _swig_property(_Client.Notification_type_get, _Client.Notification_type_set)
    __swig_destroy__ = _Client.delete_Notification
    __del__ = lambda self: None
Notification_swigregister = _Client.Notification_swigregister
Notification_swigregister(Notification)

class Application(seiscomp3.Core.InterruptibleObject):
    """Proxy of C++ Seiscomp::Client::Application class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.InterruptibleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.InterruptibleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    COMMANDLINE = _Client.Application_COMMANDLINE
    CONFIGURATION = _Client.Application_CONFIGURATION
    LOGGING = _Client.Application_LOGGING
    MESSAGING = _Client.Application_MESSAGING
    DATABASE = _Client.Application_DATABASE
    PLUGINS = _Client.Application_PLUGINS
    ST_QUANTITY = _Client.Application_ST_QUANTITY

    def __init__(self, argc, argv):
        """__init__(Seiscomp::Client::Application self, int argc, char ** argv) -> Application"""

        argv = [ bytes(a.encode()) for a in argv ]


        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        this = _Client.new_Application(_self, argc, argv)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Client.delete_Application
    __del__ = lambda self: None

    def __call__(self):
        """__call__(Application self) -> int"""
        return _Client.Application___call__(self)


    def arguments(self):
        """arguments(Application self) -> vectorStr"""
        return _Client.Application_arguments(self)


    def commandline(self, *args):
        """
        commandline(Application self) -> CommandLine
        commandline(Application self) -> CommandLine
        """
        return _Client.Application_commandline(self, *args)


    def configuration(self):
        """configuration(Application self) -> Config"""
        return _Client.Application_configuration(self)


    def path(self):
        """path(Application self) -> char const *"""
        return _Client.Application_path(self)


    def name(self):
        """name(Application self) -> std::string const &"""
        return _Client.Application_name(self)


    def addPluginPackagePath(self, package):
        """addPluginPackagePath(Application self, std::string const & package)"""
        return _Client.Application_addPluginPackagePath(self, package)


    def frameworkVersion(self):
        """frameworkVersion(Application self) -> char const *"""
        return _Client.Application_frameworkVersion(self)


    def agencyID(self):
        """agencyID(Application self) -> std::string const &"""
        return _Client.Application_agencyID(self)


    def author(self):
        """author(Application self) -> std::string const &"""
        return _Client.Application_author(self)


    def isAgencyIDAllowed(self, agencyID):
        """isAgencyIDAllowed(Application self, std::string const & agencyID) -> bool"""
        return _Client.Application_isAgencyIDAllowed(self, agencyID)


    def isAgencyIDBlocked(self, agencyID):
        """isAgencyIDBlocked(Application self, std::string const & agencyID) -> bool"""
        return _Client.Application_isAgencyIDBlocked(self, agencyID)


    def execute(self):
        """execute(Application self) -> int"""
        return _Client.Application_execute(self)


    def exit(self, returnCode):
        """exit(Application self, int returnCode)"""
        return _Client.Application_exit(self, returnCode)


    def quit(self):
        """quit(Application self)"""
        return _Client.Application_quit(self)


    def isExitRequested(self):
        """isExitRequested(Application self) -> bool"""
        return _Client.Application_isExitRequested(self)


    def printUsage(self):
        """printUsage(Application self)"""
        return _Client.Application_printUsage(self)


    def connection(self):
        """connection(Application self) -> Connection"""
        return _Client.Application_connection(self)


    def databaseType(self):
        """databaseType(Application self) -> std::string const &"""
        return _Client.Application_databaseType(self)


    def databaseParameters(self):
        """databaseParameters(Application self) -> std::string const &"""
        return _Client.Application_databaseParameters(self)


    def database(self):
        """database(Application self) -> DatabaseInterface"""
        return _Client.Application_database(self)


    def databaseURI(self):
        """databaseURI(Application self) -> std::string const &"""
        return _Client.Application_databaseURI(self)


    def query(self):
        """query(Application self) -> DatabaseQuery"""
        return _Client.Application_query(self)


    def recordStreamURL(self):
        """recordStreamURL(Application self) -> std::string const &"""
        return _Client.Application_recordStreamURL(self)


    def crashHandler(self):
        """crashHandler(Application self) -> std::string const &"""
        return _Client.Application_crashHandler(self)


    def cities(self):
        """cities(Application self) -> CityListD"""
        return _Client.Application_cities(self)


    def nearestCity(self, lat, lon, maxDist, minPopulation):
        """nearestCity(Application self, double lat, double lon, double maxDist, double minPopulation) -> CityD"""
        return _Client.Application_nearestCity(self, lat, lon, maxDist, minPopulation)


    def configModule(self):
        """configModule(Application self) -> ConfigModule"""
        return _Client.Application_configModule(self)


    def isStationEnabled(self, networkCode, stationCode):
        """isStationEnabled(Application self, std::string const & networkCode, std::string const & stationCode) -> bool"""
        return _Client.Application_isStationEnabled(self, networkCode, stationCode)


    def messagingHost(self):
        """messagingHost(Application self) -> std::string const &"""
        return _Client.Application_messagingHost(self)


    def enableTimer(self, seconds):
        """enableTimer(Application self, unsigned int seconds)"""
        return _Client.Application_enableTimer(self, seconds)


    def disableTimer(self):
        """disableTimer(Application self)"""
        return _Client.Application_disableTimer(self)


    def sendNotification(self, arg2):
        """sendNotification(Application self, Notification arg2)"""
        return _Client.Application_sendNotification(self, arg2)


    def requestSync(self, syncID):
        """requestSync(Application self, char const * syncID) -> bool"""
        return _Client.Application_requestSync(self, syncID)


    def sync(self, syncID=None):
        """
        sync(Application self, char const * syncID=None) -> bool
        sync(Application self) -> bool
        """
        return _Client.Application_sync(self, syncID)


    def waitEvent(self):
        """waitEvent(Application self) -> bool"""
        return _Client.Application_waitEvent(self)


    def setDaemonEnabled(self, enable):
        """setDaemonEnabled(Application self, bool enable)"""
        return _Client.Application_setDaemonEnabled(self, enable)


    def setPrimaryMessagingGroup(self, arg2):
        """setPrimaryMessagingGroup(Application self, std::string const & arg2)"""
        return _Client.Application_setPrimaryMessagingGroup(self, arg2)


    def primaryMessagingGroup(self):
        """primaryMessagingGroup(Application self) -> std::string const &"""
        return _Client.Application_primaryMessagingGroup(self)


    def setMessagingUsername(self, arg2):
        """setMessagingUsername(Application self, std::string const & arg2)"""
        return _Client.Application_setMessagingUsername(self, arg2)


    def addMessagingSubscription(self, arg2):
        """addMessagingSubscription(Application self, std::string const & arg2)"""
        return _Client.Application_addMessagingSubscription(self, arg2)


    def setDatabaseEnabled(self, enable, tryToFetch):
        """setDatabaseEnabled(Application self, bool enable, bool tryToFetch)"""
        return _Client.Application_setDatabaseEnabled(self, enable, tryToFetch)


    def isDatabaseEnabled(self):
        """isDatabaseEnabled(Application self) -> bool"""
        return _Client.Application_isDatabaseEnabled(self)


    def isInventoryDatabaseEnabled(self):
        """isInventoryDatabaseEnabled(Application self) -> bool"""
        return _Client.Application_isInventoryDatabaseEnabled(self)


    def isConfigDatabaseEnabled(self):
        """isConfigDatabaseEnabled(Application self) -> bool"""
        return _Client.Application_isConfigDatabaseEnabled(self)


    def setMessagingEnabled(self, enable):
        """setMessagingEnabled(Application self, bool enable)"""
        return _Client.Application_setMessagingEnabled(self, enable)


    def isMessagingEnabled(self):
        """isMessagingEnabled(Application self) -> bool"""
        return _Client.Application_isMessagingEnabled(self)


    def setStartStopMessagesEnabled(self, enable):
        """setStartStopMessagesEnabled(Application self, bool enable)"""
        return _Client.Application_setStartStopMessagesEnabled(self, enable)


    def areStartStopMessagesEnabled(self):
        """areStartStopMessagesEnabled(Application self) -> bool"""
        return _Client.Application_areStartStopMessagesEnabled(self)


    def setAutoShutdownEnabled(self, enable):
        """setAutoShutdownEnabled(Application self, bool enable)"""
        return _Client.Application_setAutoShutdownEnabled(self, enable)


    def isAutoShutdownEnabled(self):
        """isAutoShutdownEnabled(Application self) -> bool"""
        return _Client.Application_isAutoShutdownEnabled(self)


    def setRecordStreamEnabled(self, enable):
        """setRecordStreamEnabled(Application self, bool enable)"""
        return _Client.Application_setRecordStreamEnabled(self, enable)


    def isRecordStreamEnabled(self):
        """isRecordStreamEnabled(Application self) -> bool"""
        return _Client.Application_isRecordStreamEnabled(self)


    def setLoadStationsEnabled(self, enable):
        """setLoadStationsEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadStationsEnabled(self, enable)


    def isLoadStationsEnabled(self):
        """isLoadStationsEnabled(Application self) -> bool"""
        return _Client.Application_isLoadStationsEnabled(self)


    def setLoadInventoryEnabled(self, enable):
        """setLoadInventoryEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadInventoryEnabled(self, enable)


    def isLoadInventoryEnabled(self):
        """isLoadInventoryEnabled(Application self) -> bool"""
        return _Client.Application_isLoadInventoryEnabled(self)


    def setLoadConfigModuleEnabled(self, enable):
        """setLoadConfigModuleEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadConfigModuleEnabled(self, enable)


    def isLoadConfigModuleEnabled(self):
        """isLoadConfigModuleEnabled(Application self) -> bool"""
        return _Client.Application_isLoadConfigModuleEnabled(self)


    def setLoadCitiesEnabled(self, enable):
        """setLoadCitiesEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadCitiesEnabled(self, enable)


    def isLoadCitiesEnabled(self):
        """isLoadCitiesEnabled(Application self) -> bool"""
        return _Client.Application_isLoadCitiesEnabled(self)


    def setLoadRegionsEnabled(self, enable):
        """setLoadRegionsEnabled(Application self, bool enable)"""
        return _Client.Application_setLoadRegionsEnabled(self, enable)


    def isLoadRegionsEnabled(self):
        """isLoadRegionsEnabled(Application self) -> bool"""
        return _Client.Application_isLoadRegionsEnabled(self)


    def setAutoApplyNotifierEnabled(self, enable):
        """setAutoApplyNotifierEnabled(Application self, bool enable)"""
        return _Client.Application_setAutoApplyNotifierEnabled(self, enable)


    def isAutoApplyNotifierEnabled(self):
        """isAutoApplyNotifierEnabled(Application self) -> bool"""
        return _Client.Application_isAutoApplyNotifierEnabled(self)


    def setInterpretNotifierEnabled(self, enable):
        """setInterpretNotifierEnabled(Application self, bool enable)"""
        return _Client.Application_setInterpretNotifierEnabled(self, enable)


    def isInterpretNotifierEnabled(self):
        """isInterpretNotifierEnabled(Application self) -> bool"""
        return _Client.Application_isInterpretNotifierEnabled(self)


    def hasCustomPublicIDPattern(self):
        """hasCustomPublicIDPattern(Application self) -> bool"""
        return _Client.Application_hasCustomPublicIDPattern(self)


    def setConnectionRetries(self, arg2):
        """setConnectionRetries(Application self, unsigned int arg2)"""
        return _Client.Application_setConnectionRetries(self, arg2)


    def setLoggingContext(self, arg2):
        """setLoggingContext(Application self, bool arg2)"""
        return _Client.Application_setLoggingContext(self, arg2)


    def setLoggingComponent(self, arg2):
        """setLoggingComponent(Application self, bool arg2)"""
        return _Client.Application_setLoggingComponent(self, arg2)


    def setLoggingToStdErr(self, arg2):
        """setLoggingToStdErr(Application self, bool arg2)"""
        return _Client.Application_setLoggingToStdErr(self, arg2)


    def addLoggingComponentSubscription(self, arg2):
        """addLoggingComponentSubscription(Application self, std::string const & arg2)"""
        return _Client.Application_addLoggingComponentSubscription(self, arg2)


    def setConfigModuleName(self, module):
        """setConfigModuleName(Application self, std::string const & module)"""
        return _Client.Application_setConfigModuleName(self, module)


    def configModuleName(self):
        """configModuleName(Application self) -> std::string const &"""
        return _Client.Application_configModuleName(self)


    def setShutdownMasterModule(self, module):
        """setShutdownMasterModule(Application self, std::string const & module)"""
        return _Client.Application_setShutdownMasterModule(self, module)


    def setShutdownMasterUsername(self, username):
        """setShutdownMasterUsername(Application self, std::string const & username)"""
        return _Client.Application_setShutdownMasterUsername(self, username)


    def closeLogging(self):
        """closeLogging(Application self)"""
        return _Client.Application_closeLogging(self)


    def addInputObjectLog(self, *args):
        """
        addInputObjectLog(Application self, std::string const & name, std::string const & channel) -> RunningAverage
        addInputObjectLog(Application self, std::string const & name) -> RunningAverage
        """
        return _Client.Application_addInputObjectLog(self, *args)


    def addOutputObjectLog(self, *args):
        """
        addOutputObjectLog(Application self, std::string const & name, std::string const & channel) -> RunningAverage
        addOutputObjectLog(Application self, std::string const & name) -> RunningAverage
        """
        return _Client.Application_addOutputObjectLog(self, *args)


    def logObject(self, log, timestamp, count=1):
        """
        logObject(Application self, RunningAverage log, Time timestamp, size_t count=1)
        logObject(Application self, RunningAverage log, Time timestamp)
        """
        return _Client.Application_logObject(self, log, timestamp, count)


    def reloadInventory(self):
        """reloadInventory(Application self) -> bool"""
        return _Client.Application_reloadInventory(self)


    def reloadBindings(self):
        """reloadBindings(Application self) -> bool"""
        return _Client.Application_reloadBindings(self)


    def handleNotifier(self, notifier):
        """handleNotifier(Application self, Notifier notifier)"""
        return _Client.Application_handleNotifier(self, notifier)


    def version(self):
        """version(Application self) -> char const *"""
        return _Client.Application_version(self)


    def Instance():
        """Instance() -> Application"""
        return _Client.Application_Instance()

    Instance = staticmethod(Instance)

    def HandleSignals(termination, crash):
        """HandleSignals(bool termination, bool crash)"""
        return _Client.Application_HandleSignals(termination, crash)

    HandleSignals = staticmethod(HandleSignals)

    def createCommandLineDescription(self):
        """createCommandLineDescription(Application self)"""
        return _Client.Application_createCommandLineDescription(self)


    def validateParameters(self):
        """validateParameters(Application self) -> bool"""
        return _Client.Application_validateParameters(self)


    def init(self):
        """init(Application self) -> bool"""
        return _Client.Application_init(self)


    def run(self):
        """run(Application self) -> bool"""
        return _Client.Application_run(self)


    def idle(self):
        """idle(Application self)"""
        return _Client.Application_idle(self)


    def done(self):
        """done(Application self)"""
        return _Client.Application_done(self)


    def forkProcess(self):
        """forkProcess(Application self) -> bool"""
        return _Client.Application_forkProcess(self)


    def initConfiguration(self):
        """initConfiguration(Application self) -> bool"""
        return _Client.Application_initConfiguration(self)


    def initPlugins(self):
        """initPlugins(Application self) -> bool"""
        return _Client.Application_initPlugins(self)


    def initDatabase(self):
        """initDatabase(Application self) -> bool"""
        return _Client.Application_initDatabase(self)


    def initSubscriptions(self):
        """initSubscriptions(Application self) -> bool"""
        return _Client.Application_initSubscriptions(self)


    def printVersion(self):
        """printVersion(Application self)"""
        return _Client.Application_printVersion(self)


    def printConfigVariables(self):
        """printConfigVariables(Application self)"""
        return _Client.Application_printConfigVariables(self)


    def schemaValidationNames(self, modules, plugins):
        """schemaValidationNames(Application self, vectorStr modules, vectorStr plugins)"""
        return _Client.Application_schemaValidationNames(self, modules, plugins)


    def validateSchemaParameters(self):
        """validateSchemaParameters(Application self) -> bool"""
        return _Client.Application_validateSchemaParameters(self)


    def handleInitializationError(self, stage):
        """handleInitializationError(Application self, Seiscomp::Client::Application::Stage stage) -> bool"""
        return _Client.Application_handleInitializationError(self, stage)


    def handleStartSync(self):
        """handleStartSync(Application self)"""
        return _Client.Application_handleStartSync(self)


    def handleEndSync(self):
        """handleEndSync(Application self)"""
        return _Client.Application_handleEndSync(self)


    def handleEndAcquisition(self):
        """handleEndAcquisition(Application self)"""
        return _Client.Application_handleEndAcquisition(self)


    def dispatch(self, arg0):
        """dispatch(Application self, BaseObject arg0) -> bool"""
        return _Client.Application_dispatch(self, arg0)


    def dispatchNotification(self, type, arg0):
        """dispatchNotification(Application self, int type, BaseObject arg0) -> bool"""
        return _Client.Application_dispatchNotification(self, type, arg0)


    def showMessage(self, arg0):
        """showMessage(Application self, char const * arg0)"""
        return _Client.Application_showMessage(self, arg0)


    def showWarning(self, arg0):
        """showWarning(Application self, char const * arg0)"""
        return _Client.Application_showWarning(self, arg0)


    def handleTimeout(self):
        """handleTimeout(Application self)"""
        return _Client.Application_handleTimeout(self)


    def handleClose(self):
        """handleClose(Application self) -> bool"""
        return _Client.Application_handleClose(self)


    def handleAutoShutdown(self):
        """handleAutoShutdown(Application self)"""
        return _Client.Application_handleAutoShutdown(self)


    def handleSync(self, ID):
        """handleSync(Application self, char const * ID)"""
        return _Client.Application_handleSync(self, ID)


    def handleDisconnect(self):
        """handleDisconnect(Application self)"""
        return _Client.Application_handleDisconnect(self)


    def handleReconnect(self):
        """handleReconnect(Application self)"""
        return _Client.Application_handleReconnect(self)


    def handleMessage(self, msg):
        """handleMessage(Application self, Message msg)"""
        return _Client.Application_handleMessage(self, msg)


    def handleNetworkMessage(self, msg):
        """handleNetworkMessage(Application self, NetworkMessage msg)"""
        return _Client.Application_handleNetworkMessage(self, msg)


    def addObject(self, parentID, arg0):
        """addObject(Application self, std::string const & parentID, Object arg0)"""
        return _Client.Application_addObject(self, parentID, arg0)


    def removeObject(self, parentID, arg0):
        """removeObject(Application self, std::string const & parentID, Object arg0)"""
        return _Client.Application_removeObject(self, parentID, arg0)


    def updateObject(self, parentID, arg0):
        """updateObject(Application self, std::string const & parentID, Object arg0)"""
        return _Client.Application_updateObject(self, parentID, arg0)


    def configGetBool(self, query):
        """configGetBool(Application self, std::string const & query) -> bool"""
        return _Client.Application_configGetBool(self, query)


    def configGetInt(self, query):
        """configGetInt(Application self, std::string const & query) -> int"""
        return _Client.Application_configGetInt(self, query)


    def configGetDouble(self, query):
        """configGetDouble(Application self, std::string const & query) -> double"""
        return _Client.Application_configGetDouble(self, query)


    def configGetString(self, query):
        """configGetString(Application self, std::string const & query) -> std::string"""
        return _Client.Application_configGetString(self, query)


    def configGetPath(self, query):
        """configGetPath(Application self, std::string const & query) -> std::string"""
        return _Client.Application_configGetPath(self, query)


    def configGetBools(self, query):
        """configGetBools(Application self, std::string const & query) -> vectorBool"""
        return _Client.Application_configGetBools(self, query)


    def configGetInts(self, query):
        """configGetInts(Application self, std::string const & query) -> vectorInt"""
        return _Client.Application_configGetInts(self, query)


    def configGetDoubles(self, query):
        """configGetDoubles(Application self, std::string const & query) -> vectorDouble"""
        return _Client.Application_configGetDoubles(self, query)


    def configGetStrings(self, query):
        """configGetStrings(Application self, std::string const & query) -> vectorStr"""
        return _Client.Application_configGetStrings(self, query)


    def configSetBool(self, query, v):
        """configSetBool(Application self, std::string const & query, bool v)"""
        return _Client.Application_configSetBool(self, query, v)


    def configSetInt(self, query, v):
        """configSetInt(Application self, std::string const & query, int v)"""
        return _Client.Application_configSetInt(self, query, v)


    def configSetDouble(self, query, v):
        """configSetDouble(Application self, std::string const & query, double v)"""
        return _Client.Application_configSetDouble(self, query, v)


    def configSetString(self, query, v):
        """configSetString(Application self, std::string const & query, std::string const & v)"""
        return _Client.Application_configSetString(self, query, v)


    def configSetBools(self, query, arg3):
        """configSetBools(Application self, std::string const & query, vectorBool arg3)"""
        return _Client.Application_configSetBools(self, query, arg3)


    def configSetInts(self, query, arg3):
        """configSetInts(Application self, std::string const & query, vectorInt arg3)"""
        return _Client.Application_configSetInts(self, query, arg3)


    def configSetDoubles(self, query, arg3):
        """configSetDoubles(Application self, std::string const & query, vectorDouble arg3)"""
        return _Client.Application_configSetDoubles(self, query, arg3)


    def configSetStrings(self, query, arg3):
        """configSetStrings(Application self, std::string const & query, vectorStr arg3)"""
        return _Client.Application_configSetStrings(self, query, arg3)


    def configUnset(self, query):
        """configUnset(Application self, std::string const & query)"""
        return _Client.Application_configUnset(self, query)


    def saveConfiguration(self):
        """saveConfiguration(Application self) -> bool"""
        return _Client.Application_saveConfiguration(self)

    def __disown__(self):
        self.this.disown()
        _Client.disown_Application(self)
        return weakref_proxy(self)

    def handleAlarm(self):
        """handleAlarm(Application self)"""
        return _Client.Application_handleAlarm(self)

Application_swigregister = _Client.Application_swigregister
Application_swigregister(Application)

def Application_Instance():
    """Application_Instance() -> Application"""
    return _Client.Application_Instance()

def Application_HandleSignals(termination, crash):
    """Application_HandleSignals(bool termination, bool crash)"""
    return _Client.Application_HandleSignals(termination, crash)

class StreamApplication(Application):
    """Proxy of C++ Seiscomp::Client::StreamApplication class."""

    __swig_setmethods__ = {}
    for _s in [Application]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamApplication, name)
    __repr__ = _swig_repr

    def __init__(self, argc, argv):
        """__init__(Seiscomp::Client::StreamApplication self, int argc, char ** argv) -> StreamApplication"""

        argv = [ bytes(a.encode()) for a in argv ]


        if self.__class__ == StreamApplication:
            _self = None
        else:
            _self = self
        this = _Client.new_StreamApplication(_self, argc, argv)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Client.delete_StreamApplication
    __del__ = lambda self: None

    def openStream(self):
        """openStream(StreamApplication self) -> bool"""
        return _Client.StreamApplication_openStream(self)


    def closeStream(self):
        """closeStream(StreamApplication self)"""
        return _Client.StreamApplication_closeStream(self)


    def recordStream(self):
        """recordStream(StreamApplication self) -> RecordStream"""
        return _Client.StreamApplication_recordStream(self)


    def addStation(self, networkCode, stationCode):
        """addStation(StreamApplication self, std::string const & networkCode, std::string const & stationCode) -> bool"""
        return _Client.StreamApplication_addStation(self, networkCode, stationCode)


    def addStream(self, networkCode, stationCode, locationCode, channelCode):
        """addStream(StreamApplication self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode) -> bool"""
        return _Client.StreamApplication_addStream(self, networkCode, stationCode, locationCode, channelCode)


    def setStartTime(self, arg2):
        """setStartTime(StreamApplication self, Time arg2)"""
        return _Client.StreamApplication_setStartTime(self, arg2)


    def setEndTime(self, arg2):
        """setEndTime(StreamApplication self, Time arg2)"""
        return _Client.StreamApplication_setEndTime(self, arg2)


    def setTimeWindow(self, arg2):
        """setTimeWindow(StreamApplication self, Seiscomp::Core::TimeWindow const & arg2) -> bool"""
        return _Client.StreamApplication_setTimeWindow(self, arg2)


    def setAutoAcquisitionStart(self, arg2):
        """setAutoAcquisitionStart(StreamApplication self, bool arg2)"""
        return _Client.StreamApplication_setAutoAcquisitionStart(self, arg2)


    def setAutoCloseOnAcquisitionFinished(self, arg2):
        """setAutoCloseOnAcquisitionFinished(StreamApplication self, bool arg2)"""
        return _Client.StreamApplication_setAutoCloseOnAcquisitionFinished(self, arg2)


    def requestSync(self):
        """requestSync(StreamApplication self)"""
        return _Client.StreamApplication_requestSync(self)


    def setRecordInputHint(self, hint):
        """setRecordInputHint(StreamApplication self, Seiscomp::Record::Hint hint)"""
        return _Client.StreamApplication_setRecordInputHint(self, hint)


    def setRecordDatatype(self, datatype):
        """setRecordDatatype(StreamApplication self, Seiscomp::Array::DataType datatype)"""
        return _Client.StreamApplication_setRecordDatatype(self, datatype)


    def recordDataType(self):
        """recordDataType(StreamApplication self) -> Seiscomp::Array::DataType"""
        return _Client.StreamApplication_recordDataType(self)


    def startRecordThread(self):
        """startRecordThread(StreamApplication self)"""
        return _Client.StreamApplication_startRecordThread(self)


    def waitForRecordThread(self):
        """waitForRecordThread(StreamApplication self)"""
        return _Client.StreamApplication_waitForRecordThread(self)


    def isRecordThreadActive(self):
        """isRecordThreadActive(StreamApplication self) -> bool"""
        return _Client.StreamApplication_isRecordThreadActive(self)


    def init(self):
        """init(StreamApplication self) -> bool"""
        return _Client.StreamApplication_init(self)


    def run(self):
        """run(StreamApplication self) -> bool"""
        return _Client.StreamApplication_run(self)


    def done(self):
        """done(StreamApplication self)"""
        return _Client.StreamApplication_done(self)


    def dispatch(self, obj):
        """dispatch(StreamApplication self, BaseObject obj) -> bool"""
        return _Client.StreamApplication_dispatch(self, obj)


    def handleRecord(self, rec):
        """handleRecord(StreamApplication self, Record rec)"""
        return _Client.StreamApplication_handleRecord(self, rec)


    def handleEndSync(self):
        """handleEndSync(StreamApplication self)"""
        return _Client.StreamApplication_handleEndSync(self)

    def __disown__(self):
        self.this.disown()
        _Client.disown_StreamApplication(self)
        return weakref_proxy(self)

    def handleAlarm(self):
        """handleAlarm(StreamApplication self)"""
        return _Client.StreamApplication_handleAlarm(self)


    def createCommandLineDescription(self):
        """createCommandLineDescription(StreamApplication self)"""
        return _Client.StreamApplication_createCommandLineDescription(self)


    def validateParameters(self):
        """validateParameters(StreamApplication self) -> bool"""
        return _Client.StreamApplication_validateParameters(self)


    def idle(self):
        """idle(StreamApplication self)"""
        return _Client.StreamApplication_idle(self)


    def forkProcess(self):
        """forkProcess(StreamApplication self) -> bool"""
        return _Client.StreamApplication_forkProcess(self)


    def initConfiguration(self):
        """initConfiguration(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initConfiguration(self)


    def initPlugins(self):
        """initPlugins(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initPlugins(self)


    def initDatabase(self):
        """initDatabase(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initDatabase(self)


    def initSubscriptions(self):
        """initSubscriptions(StreamApplication self) -> bool"""
        return _Client.StreamApplication_initSubscriptions(self)


    def printVersion(self):
        """printVersion(StreamApplication self)"""
        return _Client.StreamApplication_printVersion(self)


    def printConfigVariables(self):
        """printConfigVariables(StreamApplication self)"""
        return _Client.StreamApplication_printConfigVariables(self)


    def schemaValidationNames(self, modules, plugins):
        """schemaValidationNames(StreamApplication self, vectorStr modules, vectorStr plugins)"""
        return _Client.StreamApplication_schemaValidationNames(self, modules, plugins)


    def validateSchemaParameters(self):
        """validateSchemaParameters(StreamApplication self) -> bool"""
        return _Client.StreamApplication_validateSchemaParameters(self)


    def handleInitializationError(self, stage):
        """handleInitializationError(StreamApplication self, Seiscomp::Client::Application::Stage stage) -> bool"""
        return _Client.StreamApplication_handleInitializationError(self, stage)


    def handleStartSync(self):
        """handleStartSync(StreamApplication self)"""
        return _Client.StreamApplication_handleStartSync(self)


    def handleEndAcquisition(self):
        """handleEndAcquisition(StreamApplication self)"""
        return _Client.StreamApplication_handleEndAcquisition(self)


    def dispatchNotification(self, type, arg0):
        """dispatchNotification(StreamApplication self, int type, BaseObject arg0) -> bool"""
        return _Client.StreamApplication_dispatchNotification(self, type, arg0)


    def showMessage(self, arg0):
        """showMessage(StreamApplication self, char const * arg0)"""
        return _Client.StreamApplication_showMessage(self, arg0)


    def showWarning(self, arg0):
        """showWarning(StreamApplication self, char const * arg0)"""
        return _Client.StreamApplication_showWarning(self, arg0)


    def handleTimeout(self):
        """handleTimeout(StreamApplication self)"""
        return _Client.StreamApplication_handleTimeout(self)


    def handleClose(self):
        """handleClose(StreamApplication self) -> bool"""
        return _Client.StreamApplication_handleClose(self)


    def handleAutoShutdown(self):
        """handleAutoShutdown(StreamApplication self)"""
        return _Client.StreamApplication_handleAutoShutdown(self)


    def handleSync(self, ID):
        """handleSync(StreamApplication self, char const * ID)"""
        return _Client.StreamApplication_handleSync(self, ID)


    def handleDisconnect(self):
        """handleDisconnect(StreamApplication self)"""
        return _Client.StreamApplication_handleDisconnect(self)


    def handleReconnect(self):
        """handleReconnect(StreamApplication self)"""
        return _Client.StreamApplication_handleReconnect(self)


    def handleMessage(self, msg):
        """handleMessage(StreamApplication self, Message msg)"""
        return _Client.StreamApplication_handleMessage(self, msg)


    def handleNetworkMessage(self, msg):
        """handleNetworkMessage(StreamApplication self, NetworkMessage msg)"""
        return _Client.StreamApplication_handleNetworkMessage(self, msg)


    def addObject(self, parentID, arg0):
        """addObject(StreamApplication self, std::string const & parentID, Object arg0)"""
        return _Client.StreamApplication_addObject(self, parentID, arg0)


    def removeObject(self, parentID, arg0):
        """removeObject(StreamApplication self, std::string const & parentID, Object arg0)"""
        return _Client.StreamApplication_removeObject(self, parentID, arg0)


    def updateObject(self, parentID, arg0):
        """updateObject(StreamApplication self, std::string const & parentID, Object arg0)"""
        return _Client.StreamApplication_updateObject(self, parentID, arg0)

StreamApplication_swigregister = _Client.StreamApplication_swigregister
StreamApplication_swigregister(StreamApplication)

class StationLocation(_object):
    """Proxy of C++ Seiscomp::Client::StationLocation class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::Client::StationLocation self) -> StationLocation
        __init__(Seiscomp::Client::StationLocation self, double lat, double lon, double elevation) -> StationLocation
        """
        this = _Client.new_StationLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["latitude"] = _Client.StationLocation_latitude_set
    __swig_getmethods__["latitude"] = _Client.StationLocation_latitude_get
    if _newclass:
        latitude = _swig_property(_Client.StationLocation_latitude_get, _Client.StationLocation_latitude_set)
    __swig_setmethods__["longitude"] = _Client.StationLocation_longitude_set
    __swig_getmethods__["longitude"] = _Client.StationLocation_longitude_get
    if _newclass:
        longitude = _swig_property(_Client.StationLocation_longitude_get, _Client.StationLocation_longitude_set)
    __swig_setmethods__["elevation"] = _Client.StationLocation_elevation_set
    __swig_getmethods__["elevation"] = _Client.StationLocation_elevation_get
    if _newclass:
        elevation = _swig_property(_Client.StationLocation_elevation_get, _Client.StationLocation_elevation_set)
    __swig_destroy__ = _Client.delete_StationLocation
    __del__ = lambda self: None
StationLocation_swigregister = _Client.StationLocation_swigregister
StationLocation_swigregister(StationLocation)

class Inventory(_object):
    """Proxy of C++ Seiscomp::Client::Inventory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inventory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Inventory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Instance():
        """Instance() -> Inventory"""
        return _Client.Inventory_Instance()

    Instance = staticmethod(Instance)

    def load(self, *args):
        """
        load(Inventory self, char const * filename)
        load(Inventory self, DatabaseReader arg2)
        """
        return _Client.Inventory_load(self, *args)


    def setInventory(self, arg2):
        """setInventory(Inventory self, Inventory arg2)"""
        return _Client.Inventory_setInventory(self, arg2)


    def filter(self, networkTypeFW, stationTypeFW):
        """filter(Inventory self, Seiscomp::Util::StringFirewall const * networkTypeFW, Seiscomp::Util::StringFirewall const * stationTypeFW) -> int"""
        return _Client.Inventory_filter(self, networkTypeFW, stationTypeFW)


    def loadStations(self, arg2):
        """loadStations(Inventory self, DatabaseReader arg2)"""
        return _Client.Inventory_loadStations(self, arg2)


    def stationLocation(self, networkCode, stationCode, arg4):
        """stationLocation(Inventory self, std::string const & networkCode, std::string const & stationCode, Time arg4) -> StationLocation"""
        return _Client.Inventory_stationLocation(self, networkCode, stationCode, arg4)


    def getStation(self, *args):
        """
        getStation(Inventory self, std::string const & networkCode, std::string const & stationCode, Time arg4, Seiscomp::DataModel::InventoryError * error=None) -> Station
        getStation(Inventory self, std::string const & networkCode, std::string const & stationCode, Time arg4) -> Station
        getStation(Inventory self, Pick arg2) -> Station
        """
        return _Client.Inventory_getStation(self, *args)


    def getSensorLocation(self, *args):
        """
        getSensorLocation(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, Time arg5, Seiscomp::DataModel::InventoryError * error=None) -> SensorLocation
        getSensorLocation(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, Time arg5) -> SensorLocation
        getSensorLocation(Inventory self, Pick arg2) -> SensorLocation
        """
        return _Client.Inventory_getSensorLocation(self, *args)


    def getStream(self, *args):
        """
        getStream(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6, Seiscomp::DataModel::InventoryError * error=None) -> Stream
        getStream(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6) -> Stream
        getStream(Inventory self, Pick arg2) -> Stream
        """
        return _Client.Inventory_getStream(self, *args)


    def getThreeComponents(self, *args):
        """
        getThreeComponents(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6) -> ThreeComponents
        getThreeComponents(Inventory self, Pick arg2) -> ThreeComponents
        """
        return _Client.Inventory_getThreeComponents(self, *args)


    def getGain(self, networkCode, stationCode, locationCode, channelCode, arg6):
        """getGain(Inventory self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, std::string const & channelCode, Time arg6) -> double"""
        return _Client.Inventory_getGain(self, networkCode, stationCode, locationCode, channelCode, arg6)


    def getAllStations(self, arg2, arg3):
        """getAllStations(Inventory self, Seiscomp::Client::StationList & arg2, Time arg3) -> int"""
        return _Client.Inventory_getAllStations(self, arg2, arg3)


    def inventory(self):
        """inventory(Inventory self) -> Inventory"""
        return _Client.Inventory_inventory(self)

    __swig_destroy__ = _Client.delete_Inventory
    __del__ = lambda self: None
Inventory_swigregister = _Client.Inventory_swigregister
Inventory_swigregister(Inventory)

def Inventory_Instance():
    """Inventory_Instance() -> Inventory"""
    return _Client.Inventory_Instance()

class ConfigDB(_object):
    """Proxy of C++ Seiscomp::Client::ConfigDB class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigDB, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Instance():
        """Instance() -> ConfigDB"""
        return _Client.ConfigDB_Instance()

    Instance = staticmethod(Instance)

    def load(self, *args):
        """
        load(ConfigDB self, DatabaseReader reader, Seiscomp::Core::Optional< std::string >::Impl const & moduleName, Seiscomp::Core::Optional< std::string >::Impl const & networkCode, Seiscomp::Core::Optional< std::string >::Impl const & stationCode, Seiscomp::Core::Optional< std::string >::Impl const & setupName, std::set< std::string,std::less< std::string >,std::allocator< std::string > > const & parameterNames)
        load(ConfigDB self, DatabaseReader reader, Seiscomp::Core::Optional< std::string >::Impl const & moduleName, Seiscomp::Core::Optional< std::string >::Impl const & networkCode, Seiscomp::Core::Optional< std::string >::Impl const & stationCode, Seiscomp::Core::Optional< std::string >::Impl const & setupName)
        load(ConfigDB self, DatabaseReader reader, Seiscomp::Core::Optional< std::string >::Impl const & moduleName, Seiscomp::Core::Optional< std::string >::Impl const & networkCode, Seiscomp::Core::Optional< std::string >::Impl const & stationCode)
        load(ConfigDB self, DatabaseReader reader, Seiscomp::Core::Optional< std::string >::Impl const & moduleName, Seiscomp::Core::Optional< std::string >::Impl const & networkCode)
        load(ConfigDB self, DatabaseReader reader, Seiscomp::Core::Optional< std::string >::Impl const & moduleName)
        load(ConfigDB self, DatabaseReader reader)
        load(ConfigDB self, char const * xml)
        """
        return _Client.ConfigDB_load(self, *args)


    def config(self):
        """config(ConfigDB self) -> Config"""
        return _Client.ConfigDB_config(self)

    __swig_destroy__ = _Client.delete_ConfigDB
    __del__ = lambda self: None
ConfigDB_swigregister = _Client.ConfigDB_swigregister
ConfigDB_swigregister(ConfigDB)

def ConfigDB_Instance():
    """ConfigDB_Instance() -> ConfigDB"""
    return _Client.ConfigDB_Instance()

class PluginRegistry(_object):
    """Proxy of C++ Seiscomp::Client::PluginRegistry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginRegistry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Client.delete_PluginRegistry
    __del__ = lambda self: None

    def Instance():
        """Instance() -> PluginRegistry"""
        return _Client.PluginRegistry_Instance()

    Instance = staticmethod(Instance)

    def addPluginName(self, name):
        """addPluginName(PluginRegistry self, std::string const & name)"""
        return _Client.PluginRegistry_addPluginName(self, name)


    def addPluginPath(self, path):
        """addPluginPath(PluginRegistry self, std::string const & path)"""
        return _Client.PluginRegistry_addPluginPath(self, path)


    def addPackagePath(self, package):
        """addPackagePath(PluginRegistry self, std::string const & package)"""
        return _Client.PluginRegistry_addPackagePath(self, package)


    def loadPlugins(self):
        """loadPlugins(PluginRegistry self) -> int"""
        return _Client.PluginRegistry_loadPlugins(self)


    def loadConfiguredPlugins(self, config):
        """loadConfiguredPlugins(PluginRegistry self, Config config) -> int"""
        return _Client.PluginRegistry_loadConfiguredPlugins(self, config)


    def freePlugins(self):
        """freePlugins(PluginRegistry self)"""
        return _Client.PluginRegistry_freePlugins(self)


    def pluginCount(self):
        """pluginCount(PluginRegistry self) -> int"""
        return _Client.PluginRegistry_pluginCount(self)

PluginRegistry_swigregister = _Client.PluginRegistry_swigregister
PluginRegistry_swigregister(PluginRegistry)

def PluginRegistry_Instance():
    """PluginRegistry_Instance() -> PluginRegistry"""
    return _Client.PluginRegistry_Instance()

# This file is compatible with both classic and new-style classes.


