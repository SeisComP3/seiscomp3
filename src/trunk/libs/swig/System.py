# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_System')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_System')
    _System = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_System', [dirname(__file__)])
        except ImportError:
            import _System
            return _System
        try:
            _mod = imp.load_module('_System', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _System = swig_import_helper()
    del swig_import_helper
else:
    import _System
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _System.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _System.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _System.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _System.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _System.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _System.SwigPyIterator_equal(self, x)

    def copy(self):
        return _System.SwigPyIterator_copy(self)

    def next(self):
        return _System.SwigPyIterator_next(self)

    def __next__(self):
        return _System.SwigPyIterator___next__(self)

    def previous(self):
        return _System.SwigPyIterator_previous(self)

    def advance(self, n):
        return _System.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _System.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _System.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _System.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _System.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _System.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _System.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _System.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import Core
import Config
class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CS_UNDEFINED = _System.Environment_CS_UNDEFINED
    CS_FIRST = _System.Environment_CS_FIRST
    CS_DEFAULT_GLOBAL = _System.Environment_CS_DEFAULT_GLOBAL
    CS_DEFAULT_APP = _System.Environment_CS_DEFAULT_APP
    CS_CONFIG_GLOBAL = _System.Environment_CS_CONFIG_GLOBAL
    CS_CONFIG_APP = _System.Environment_CS_CONFIG_APP
    CS_USER_GLOBAL = _System.Environment_CS_USER_GLOBAL
    CS_USER_APP = _System.Environment_CS_USER_APP
    CS_LAST = _System.Environment_CS_LAST
    CS_QUANTITY = _System.Environment_CS_QUANTITY
    __swig_destroy__ = _System.delete_Environment
    __del__ = lambda self: None
    if _newclass:
        Instance = staticmethod(_System.Environment_Instance)
    else:
        Instance = _System.Environment_Instance

    def homeDir(self):
        return _System.Environment_homeDir(self)

    def configDir(self):
        return _System.Environment_configDir(self)

    def appConfigDir(self):
        return _System.Environment_appConfigDir(self)

    def globalConfigDir(self):
        return _System.Environment_globalConfigDir(self)

    def installDir(self):
        return _System.Environment_installDir(self)

    def shareDir(self):
        return _System.Environment_shareDir(self)

    def logDir(self):
        return _System.Environment_logDir(self)

    def archiveFileName(self, clientname):
        return _System.Environment_archiveFileName(self, clientname)

    def configFileName(self, programname):
        return _System.Environment_configFileName(self, programname)

    def appConfigFileName(self, programname):
        return _System.Environment_appConfigFileName(self, programname)

    def globalConfigFileName(self, programname):
        return _System.Environment_globalConfigFileName(self, programname)

    def logFile(self, name):
        return _System.Environment_logFile(self, name)

    def absolutePath(self, name):
        return _System.Environment_absolutePath(self, name)

    def configFileLocation(self, name, stage):
        return _System.Environment_configFileLocation(self, name, stage)

    def initConfig(self, *args):
        return _System.Environment_initConfig(self, *args)
Environment_swigregister = _System.Environment_swigregister
Environment_swigregister(Environment)

def Environment_Instance():
    return _System.Environment_Instance()
Environment_Instance = _System.Environment_Instance

class SchemaParameter(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaParameter, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaParameter_ClassName)
    else:
        ClassName = _System.SchemaParameter_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaParameter_TypeInfo)
    else:
        TypeInfo = _System.SchemaParameter_TypeInfo

    def className(self):
        return _System.SchemaParameter_className(self)

    def typeInfo(self):
        return _System.SchemaParameter_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaParameter_Cast)
    else:
        Cast = _System.SchemaParameter_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaParameter_ConstCast)
    else:
        ConstCast = _System.SchemaParameter_ConstCast

    def __init__(self):
        this = _System.new_SchemaParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaParameter_serialize(self, ar)
    __swig_setmethods__["name"] = _System.SchemaParameter_name_set
    __swig_getmethods__["name"] = _System.SchemaParameter_name_get
    if _newclass:
        name = _swig_property(_System.SchemaParameter_name_get, _System.SchemaParameter_name_set)
    __swig_setmethods__["type"] = _System.SchemaParameter_type_set
    __swig_getmethods__["type"] = _System.SchemaParameter_type_get
    if _newclass:
        type = _swig_property(_System.SchemaParameter_type_get, _System.SchemaParameter_type_set)
    __swig_setmethods__["unit"] = _System.SchemaParameter_unit_set
    __swig_getmethods__["unit"] = _System.SchemaParameter_unit_get
    if _newclass:
        unit = _swig_property(_System.SchemaParameter_unit_get, _System.SchemaParameter_unit_set)
    __swig_setmethods__["defaultValue"] = _System.SchemaParameter_defaultValue_set
    __swig_getmethods__["defaultValue"] = _System.SchemaParameter_defaultValue_get
    if _newclass:
        defaultValue = _swig_property(_System.SchemaParameter_defaultValue_get, _System.SchemaParameter_defaultValue_set)
    __swig_setmethods__["description"] = _System.SchemaParameter_description_set
    __swig_getmethods__["description"] = _System.SchemaParameter_description_get
    if _newclass:
        description = _swig_property(_System.SchemaParameter_description_get, _System.SchemaParameter_description_set)
    __swig_setmethods__["readOnly"] = _System.SchemaParameter_readOnly_set
    __swig_getmethods__["readOnly"] = _System.SchemaParameter_readOnly_get
    if _newclass:
        readOnly = _swig_property(_System.SchemaParameter_readOnly_get, _System.SchemaParameter_readOnly_set)
    __swig_destroy__ = _System.delete_SchemaParameter
    __del__ = lambda self: None
SchemaParameter_swigregister = _System.SchemaParameter_swigregister
SchemaParameter_swigregister(SchemaParameter)

def SchemaParameter_ClassName():
    return _System.SchemaParameter_ClassName()
SchemaParameter_ClassName = _System.SchemaParameter_ClassName

def SchemaParameter_TypeInfo():
    return _System.SchemaParameter_TypeInfo()
SchemaParameter_TypeInfo = _System.SchemaParameter_TypeInfo

def SchemaParameter_Cast(*args):
    return _System.SchemaParameter_Cast(*args)
SchemaParameter_Cast = _System.SchemaParameter_Cast

def SchemaParameter_ConstCast(*args):
    return _System.SchemaParameter_ConstCast(*args)
SchemaParameter_ConstCast = _System.SchemaParameter_ConstCast

class SchemaParameters(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaParameters, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaParameters_ClassName)
    else:
        ClassName = _System.SchemaParameters_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaParameters_TypeInfo)
    else:
        TypeInfo = _System.SchemaParameters_TypeInfo

    def className(self):
        return _System.SchemaParameters_className(self)

    def typeInfo(self):
        return _System.SchemaParameters_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaParameters_Cast)
    else:
        Cast = _System.SchemaParameters_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaParameters_ConstCast)
    else:
        ConstCast = _System.SchemaParameters_ConstCast

    def __init__(self):
        this = _System.new_SchemaParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def parameterCount(self):
        return _System.SchemaParameters_parameterCount(self)

    def parameter(self, i):
        return _System.SchemaParameters_parameter(self, i)

    def groupCount(self):
        return _System.SchemaParameters_groupCount(self)

    def group(self, i):
        return _System.SchemaParameters_group(self, i)

    def structureCount(self):
        return _System.SchemaParameters_structureCount(self)

    def structure(self, i):
        return _System.SchemaParameters_structure(self, i)

    def add(self, *args):
        return _System.SchemaParameters_add(self, *args)

    def accept(self, arg2):
        return _System.SchemaParameters_accept(self, arg2)

    def serialize(self, ar):
        return _System.SchemaParameters_serialize(self, ar)
    __swig_destroy__ = _System.delete_SchemaParameters
    __del__ = lambda self: None
SchemaParameters_swigregister = _System.SchemaParameters_swigregister
SchemaParameters_swigregister(SchemaParameters)

def SchemaParameters_ClassName():
    return _System.SchemaParameters_ClassName()
SchemaParameters_ClassName = _System.SchemaParameters_ClassName

def SchemaParameters_TypeInfo():
    return _System.SchemaParameters_TypeInfo()
SchemaParameters_TypeInfo = _System.SchemaParameters_TypeInfo

def SchemaParameters_Cast(*args):
    return _System.SchemaParameters_Cast(*args)
SchemaParameters_Cast = _System.SchemaParameters_Cast

def SchemaParameters_ConstCast(*args):
    return _System.SchemaParameters_ConstCast(*args)
SchemaParameters_ConstCast = _System.SchemaParameters_ConstCast

class SchemaGroup(SchemaParameters):
    __swig_setmethods__ = {}
    for _s in [SchemaParameters]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [SchemaParameters]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaGroup, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaGroup_ClassName)
    else:
        ClassName = _System.SchemaGroup_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaGroup_TypeInfo)
    else:
        TypeInfo = _System.SchemaGroup_TypeInfo

    def className(self):
        return _System.SchemaGroup_className(self)

    def typeInfo(self):
        return _System.SchemaGroup_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaGroup_Cast)
    else:
        Cast = _System.SchemaGroup_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaGroup_ConstCast)
    else:
        ConstCast = _System.SchemaGroup_ConstCast

    def __init__(self):
        this = _System.new_SchemaGroup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaGroup_serialize(self, ar)
    __swig_setmethods__["name"] = _System.SchemaGroup_name_set
    __swig_getmethods__["name"] = _System.SchemaGroup_name_get
    if _newclass:
        name = _swig_property(_System.SchemaGroup_name_get, _System.SchemaGroup_name_set)
    __swig_setmethods__["description"] = _System.SchemaGroup_description_set
    __swig_getmethods__["description"] = _System.SchemaGroup_description_get
    if _newclass:
        description = _swig_property(_System.SchemaGroup_description_get, _System.SchemaGroup_description_set)
    __swig_destroy__ = _System.delete_SchemaGroup
    __del__ = lambda self: None
SchemaGroup_swigregister = _System.SchemaGroup_swigregister
SchemaGroup_swigregister(SchemaGroup)

def SchemaGroup_ClassName():
    return _System.SchemaGroup_ClassName()
SchemaGroup_ClassName = _System.SchemaGroup_ClassName

def SchemaGroup_TypeInfo():
    return _System.SchemaGroup_TypeInfo()
SchemaGroup_TypeInfo = _System.SchemaGroup_TypeInfo

def SchemaGroup_Cast(*args):
    return _System.SchemaGroup_Cast(*args)
SchemaGroup_Cast = _System.SchemaGroup_Cast

def SchemaGroup_ConstCast(*args):
    return _System.SchemaGroup_ConstCast(*args)
SchemaGroup_ConstCast = _System.SchemaGroup_ConstCast

class SchemaStructure(SchemaParameters):
    __swig_setmethods__ = {}
    for _s in [SchemaParameters]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [SchemaParameters]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaStructure, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaStructure_ClassName)
    else:
        ClassName = _System.SchemaStructure_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaStructure_TypeInfo)
    else:
        TypeInfo = _System.SchemaStructure_TypeInfo

    def className(self):
        return _System.SchemaStructure_className(self)

    def typeInfo(self):
        return _System.SchemaStructure_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaStructure_Cast)
    else:
        Cast = _System.SchemaStructure_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaStructure_ConstCast)
    else:
        ConstCast = _System.SchemaStructure_ConstCast

    def __init__(self):
        this = _System.new_SchemaStructure()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaStructure_serialize(self, ar)
    __swig_setmethods__["type"] = _System.SchemaStructure_type_set
    __swig_getmethods__["type"] = _System.SchemaStructure_type_get
    if _newclass:
        type = _swig_property(_System.SchemaStructure_type_get, _System.SchemaStructure_type_set)
    __swig_setmethods__["link"] = _System.SchemaStructure_link_set
    __swig_getmethods__["link"] = _System.SchemaStructure_link_get
    if _newclass:
        link = _swig_property(_System.SchemaStructure_link_get, _System.SchemaStructure_link_set)
    __swig_setmethods__["description"] = _System.SchemaStructure_description_set
    __swig_getmethods__["description"] = _System.SchemaStructure_description_get
    if _newclass:
        description = _swig_property(_System.SchemaStructure_description_get, _System.SchemaStructure_description_set)
    __swig_destroy__ = _System.delete_SchemaStructure
    __del__ = lambda self: None
SchemaStructure_swigregister = _System.SchemaStructure_swigregister
SchemaStructure_swigregister(SchemaStructure)

def SchemaStructure_ClassName():
    return _System.SchemaStructure_ClassName()
SchemaStructure_ClassName = _System.SchemaStructure_ClassName

def SchemaStructure_TypeInfo():
    return _System.SchemaStructure_TypeInfo()
SchemaStructure_TypeInfo = _System.SchemaStructure_TypeInfo

def SchemaStructure_Cast(*args):
    return _System.SchemaStructure_Cast(*args)
SchemaStructure_Cast = _System.SchemaStructure_Cast

def SchemaStructure_ConstCast(*args):
    return _System.SchemaStructure_ConstCast(*args)
SchemaStructure_ConstCast = _System.SchemaStructure_ConstCast

class SchemaSetupInputOption(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaSetupInputOption, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaSetupInputOption, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaSetupInputOption_ClassName)
    else:
        ClassName = _System.SchemaSetupInputOption_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaSetupInputOption_TypeInfo)
    else:
        TypeInfo = _System.SchemaSetupInputOption_TypeInfo

    def className(self):
        return _System.SchemaSetupInputOption_className(self)

    def typeInfo(self):
        return _System.SchemaSetupInputOption_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaSetupInputOption_Cast)
    else:
        Cast = _System.SchemaSetupInputOption_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaSetupInputOption_ConstCast)
    else:
        ConstCast = _System.SchemaSetupInputOption_ConstCast

    def __init__(self):
        this = _System.new_SchemaSetupInputOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaSetupInputOption_serialize(self, ar)
    __swig_setmethods__["value"] = _System.SchemaSetupInputOption_value_set
    __swig_getmethods__["value"] = _System.SchemaSetupInputOption_value_get
    if _newclass:
        value = _swig_property(_System.SchemaSetupInputOption_value_get, _System.SchemaSetupInputOption_value_set)
    __swig_setmethods__["description"] = _System.SchemaSetupInputOption_description_set
    __swig_getmethods__["description"] = _System.SchemaSetupInputOption_description_get
    if _newclass:
        description = _swig_property(_System.SchemaSetupInputOption_description_get, _System.SchemaSetupInputOption_description_set)
    __swig_setmethods__["inputs"] = _System.SchemaSetupInputOption_inputs_set
    __swig_getmethods__["inputs"] = _System.SchemaSetupInputOption_inputs_get
    if _newclass:
        inputs = _swig_property(_System.SchemaSetupInputOption_inputs_get, _System.SchemaSetupInputOption_inputs_set)
    __swig_destroy__ = _System.delete_SchemaSetupInputOption
    __del__ = lambda self: None
SchemaSetupInputOption_swigregister = _System.SchemaSetupInputOption_swigregister
SchemaSetupInputOption_swigregister(SchemaSetupInputOption)

def SchemaSetupInputOption_ClassName():
    return _System.SchemaSetupInputOption_ClassName()
SchemaSetupInputOption_ClassName = _System.SchemaSetupInputOption_ClassName

def SchemaSetupInputOption_TypeInfo():
    return _System.SchemaSetupInputOption_TypeInfo()
SchemaSetupInputOption_TypeInfo = _System.SchemaSetupInputOption_TypeInfo

def SchemaSetupInputOption_Cast(*args):
    return _System.SchemaSetupInputOption_Cast(*args)
SchemaSetupInputOption_Cast = _System.SchemaSetupInputOption_Cast

def SchemaSetupInputOption_ConstCast(*args):
    return _System.SchemaSetupInputOption_ConstCast(*args)
SchemaSetupInputOption_ConstCast = _System.SchemaSetupInputOption_ConstCast

class SchemaSetupInput(SchemaParameter):
    __swig_setmethods__ = {}
    for _s in [SchemaParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaSetupInput, name, value)
    __swig_getmethods__ = {}
    for _s in [SchemaParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaSetupInput, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaSetupInput_ClassName)
    else:
        ClassName = _System.SchemaSetupInput_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaSetupInput_TypeInfo)
    else:
        TypeInfo = _System.SchemaSetupInput_TypeInfo

    def className(self):
        return _System.SchemaSetupInput_className(self)

    def typeInfo(self):
        return _System.SchemaSetupInput_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaSetupInput_Cast)
    else:
        Cast = _System.SchemaSetupInput_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaSetupInput_ConstCast)
    else:
        ConstCast = _System.SchemaSetupInput_ConstCast

    def __init__(self):
        this = _System.new_SchemaSetupInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaSetupInput_serialize(self, ar)
    __swig_setmethods__["text"] = _System.SchemaSetupInput_text_set
    __swig_getmethods__["text"] = _System.SchemaSetupInput_text_get
    if _newclass:
        text = _swig_property(_System.SchemaSetupInput_text_get, _System.SchemaSetupInput_text_set)
    __swig_setmethods__["echo"] = _System.SchemaSetupInput_echo_set
    __swig_getmethods__["echo"] = _System.SchemaSetupInput_echo_get
    if _newclass:
        echo = _swig_property(_System.SchemaSetupInput_echo_get, _System.SchemaSetupInput_echo_set)
    __swig_setmethods__["options"] = _System.SchemaSetupInput_options_set
    __swig_getmethods__["options"] = _System.SchemaSetupInput_options_get
    if _newclass:
        options = _swig_property(_System.SchemaSetupInput_options_get, _System.SchemaSetupInput_options_set)
    __swig_destroy__ = _System.delete_SchemaSetupInput
    __del__ = lambda self: None
SchemaSetupInput_swigregister = _System.SchemaSetupInput_swigregister
SchemaSetupInput_swigregister(SchemaSetupInput)

def SchemaSetupInput_ClassName():
    return _System.SchemaSetupInput_ClassName()
SchemaSetupInput_ClassName = _System.SchemaSetupInput_ClassName

def SchemaSetupInput_TypeInfo():
    return _System.SchemaSetupInput_TypeInfo()
SchemaSetupInput_TypeInfo = _System.SchemaSetupInput_TypeInfo

def SchemaSetupInput_Cast(*args):
    return _System.SchemaSetupInput_Cast(*args)
SchemaSetupInput_Cast = _System.SchemaSetupInput_Cast

def SchemaSetupInput_ConstCast(*args):
    return _System.SchemaSetupInput_ConstCast(*args)
SchemaSetupInput_ConstCast = _System.SchemaSetupInput_ConstCast

class SchemaSetupGroup(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaSetupGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaSetupGroup, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaSetupGroup_ClassName)
    else:
        ClassName = _System.SchemaSetupGroup_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaSetupGroup_TypeInfo)
    else:
        TypeInfo = _System.SchemaSetupGroup_TypeInfo

    def className(self):
        return _System.SchemaSetupGroup_className(self)

    def typeInfo(self):
        return _System.SchemaSetupGroup_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaSetupGroup_Cast)
    else:
        Cast = _System.SchemaSetupGroup_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaSetupGroup_ConstCast)
    else:
        ConstCast = _System.SchemaSetupGroup_ConstCast

    def __init__(self):
        this = _System.new_SchemaSetupGroup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaSetupGroup_serialize(self, ar)
    __swig_setmethods__["name"] = _System.SchemaSetupGroup_name_set
    __swig_getmethods__["name"] = _System.SchemaSetupGroup_name_get
    if _newclass:
        name = _swig_property(_System.SchemaSetupGroup_name_get, _System.SchemaSetupGroup_name_set)
    __swig_setmethods__["inputs"] = _System.SchemaSetupGroup_inputs_set
    __swig_getmethods__["inputs"] = _System.SchemaSetupGroup_inputs_get
    if _newclass:
        inputs = _swig_property(_System.SchemaSetupGroup_inputs_get, _System.SchemaSetupGroup_inputs_set)
    __swig_destroy__ = _System.delete_SchemaSetupGroup
    __del__ = lambda self: None
SchemaSetupGroup_swigregister = _System.SchemaSetupGroup_swigregister
SchemaSetupGroup_swigregister(SchemaSetupGroup)

def SchemaSetupGroup_ClassName():
    return _System.SchemaSetupGroup_ClassName()
SchemaSetupGroup_ClassName = _System.SchemaSetupGroup_ClassName

def SchemaSetupGroup_TypeInfo():
    return _System.SchemaSetupGroup_TypeInfo()
SchemaSetupGroup_TypeInfo = _System.SchemaSetupGroup_TypeInfo

def SchemaSetupGroup_Cast(*args):
    return _System.SchemaSetupGroup_Cast(*args)
SchemaSetupGroup_Cast = _System.SchemaSetupGroup_Cast

def SchemaSetupGroup_ConstCast(*args):
    return _System.SchemaSetupGroup_ConstCast(*args)
SchemaSetupGroup_ConstCast = _System.SchemaSetupGroup_ConstCast

class SchemaSetup(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaSetup, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaSetup, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaSetup_ClassName)
    else:
        ClassName = _System.SchemaSetup_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaSetup_TypeInfo)
    else:
        TypeInfo = _System.SchemaSetup_TypeInfo

    def className(self):
        return _System.SchemaSetup_className(self)

    def typeInfo(self):
        return _System.SchemaSetup_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaSetup_Cast)
    else:
        Cast = _System.SchemaSetup_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaSetup_ConstCast)
    else:
        ConstCast = _System.SchemaSetup_ConstCast

    def __init__(self):
        this = _System.new_SchemaSetup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaSetup_serialize(self, ar)
    __swig_setmethods__["groups"] = _System.SchemaSetup_groups_set
    __swig_getmethods__["groups"] = _System.SchemaSetup_groups_get
    if _newclass:
        groups = _swig_property(_System.SchemaSetup_groups_get, _System.SchemaSetup_groups_set)
    __swig_destroy__ = _System.delete_SchemaSetup
    __del__ = lambda self: None
SchemaSetup_swigregister = _System.SchemaSetup_swigregister
SchemaSetup_swigregister(SchemaSetup)

def SchemaSetup_ClassName():
    return _System.SchemaSetup_ClassName()
SchemaSetup_ClassName = _System.SchemaSetup_ClassName

def SchemaSetup_TypeInfo():
    return _System.SchemaSetup_TypeInfo()
SchemaSetup_TypeInfo = _System.SchemaSetup_TypeInfo

def SchemaSetup_Cast(*args):
    return _System.SchemaSetup_Cast(*args)
SchemaSetup_Cast = _System.SchemaSetup_Cast

def SchemaSetup_ConstCast(*args):
    return _System.SchemaSetup_ConstCast(*args)
SchemaSetup_ConstCast = _System.SchemaSetup_ConstCast

class SchemaModule(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaModule, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaModule, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaModule_ClassName)
    else:
        ClassName = _System.SchemaModule_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaModule_TypeInfo)
    else:
        TypeInfo = _System.SchemaModule_TypeInfo

    def className(self):
        return _System.SchemaModule_className(self)

    def typeInfo(self):
        return _System.SchemaModule_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaModule_Cast)
    else:
        Cast = _System.SchemaModule_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaModule_ConstCast)
    else:
        ConstCast = _System.SchemaModule_ConstCast

    def __init__(self):
        this = _System.new_SchemaModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isStandalone(self):
        return _System.SchemaModule_isStandalone(self)

    def accept(self, arg2):
        return _System.SchemaModule_accept(self, arg2)

    def serialize(self, ar):
        return _System.SchemaModule_serialize(self, ar)
    __swig_setmethods__["aliasedModule"] = _System.SchemaModule_aliasedModule_set
    __swig_getmethods__["aliasedModule"] = _System.SchemaModule_aliasedModule_get
    if _newclass:
        aliasedModule = _swig_property(_System.SchemaModule_aliasedModule_get, _System.SchemaModule_aliasedModule_set)
    __swig_setmethods__["name"] = _System.SchemaModule_name_set
    __swig_getmethods__["name"] = _System.SchemaModule_name_get
    if _newclass:
        name = _swig_property(_System.SchemaModule_name_get, _System.SchemaModule_name_set)
    __swig_setmethods__["category"] = _System.SchemaModule_category_set
    __swig_getmethods__["category"] = _System.SchemaModule_category_get
    if _newclass:
        category = _swig_property(_System.SchemaModule_category_get, _System.SchemaModule_category_set)
    __swig_setmethods__["_import"] = _System.SchemaModule__import_set
    __swig_getmethods__["_import"] = _System.SchemaModule__import_get
    if _newclass:
        _import = _swig_property(_System.SchemaModule__import_get, _System.SchemaModule__import_set)
    __swig_setmethods__["description"] = _System.SchemaModule_description_set
    __swig_getmethods__["description"] = _System.SchemaModule_description_get
    if _newclass:
        description = _swig_property(_System.SchemaModule_description_get, _System.SchemaModule_description_set)
    __swig_setmethods__["standalone"] = _System.SchemaModule_standalone_set
    __swig_getmethods__["standalone"] = _System.SchemaModule_standalone_get
    if _newclass:
        standalone = _swig_property(_System.SchemaModule_standalone_get, _System.SchemaModule_standalone_set)
    __swig_setmethods__["inheritGlobalBinding"] = _System.SchemaModule_inheritGlobalBinding_set
    __swig_getmethods__["inheritGlobalBinding"] = _System.SchemaModule_inheritGlobalBinding_get
    if _newclass:
        inheritGlobalBinding = _swig_property(_System.SchemaModule_inheritGlobalBinding_get, _System.SchemaModule_inheritGlobalBinding_set)
    __swig_setmethods__["parameters"] = _System.SchemaModule_parameters_set
    __swig_getmethods__["parameters"] = _System.SchemaModule_parameters_get
    if _newclass:
        parameters = _swig_property(_System.SchemaModule_parameters_get, _System.SchemaModule_parameters_set)
    __swig_setmethods__["setup"] = _System.SchemaModule_setup_set
    __swig_getmethods__["setup"] = _System.SchemaModule_setup_get
    if _newclass:
        setup = _swig_property(_System.SchemaModule_setup_get, _System.SchemaModule_setup_set)
    __swig_destroy__ = _System.delete_SchemaModule
    __del__ = lambda self: None
SchemaModule_swigregister = _System.SchemaModule_swigregister
SchemaModule_swigregister(SchemaModule)

def SchemaModule_ClassName():
    return _System.SchemaModule_ClassName()
SchemaModule_ClassName = _System.SchemaModule_ClassName

def SchemaModule_TypeInfo():
    return _System.SchemaModule_TypeInfo()
SchemaModule_TypeInfo = _System.SchemaModule_TypeInfo

def SchemaModule_Cast(*args):
    return _System.SchemaModule_Cast(*args)
SchemaModule_Cast = _System.SchemaModule_Cast

def SchemaModule_ConstCast(*args):
    return _System.SchemaModule_ConstCast(*args)
SchemaModule_ConstCast = _System.SchemaModule_ConstCast

class SchemaPlugin(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaPlugin, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaPlugin_ClassName)
    else:
        ClassName = _System.SchemaPlugin_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaPlugin_TypeInfo)
    else:
        TypeInfo = _System.SchemaPlugin_TypeInfo

    def className(self):
        return _System.SchemaPlugin_className(self)

    def typeInfo(self):
        return _System.SchemaPlugin_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaPlugin_Cast)
    else:
        Cast = _System.SchemaPlugin_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaPlugin_ConstCast)
    else:
        ConstCast = _System.SchemaPlugin_ConstCast

    def __init__(self):
        this = _System.new_SchemaPlugin()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaPlugin_serialize(self, ar)
    __swig_setmethods__["name"] = _System.SchemaPlugin_name_set
    __swig_getmethods__["name"] = _System.SchemaPlugin_name_get
    if _newclass:
        name = _swig_property(_System.SchemaPlugin_name_get, _System.SchemaPlugin_name_set)
    __swig_setmethods__["extends"] = _System.SchemaPlugin_extends_set
    __swig_getmethods__["extends"] = _System.SchemaPlugin_extends_get
    if _newclass:
        extends = _swig_property(_System.SchemaPlugin_extends_get, _System.SchemaPlugin_extends_set)
    __swig_setmethods__["description"] = _System.SchemaPlugin_description_set
    __swig_getmethods__["description"] = _System.SchemaPlugin_description_get
    if _newclass:
        description = _swig_property(_System.SchemaPlugin_description_get, _System.SchemaPlugin_description_set)
    __swig_setmethods__["parameters"] = _System.SchemaPlugin_parameters_set
    __swig_getmethods__["parameters"] = _System.SchemaPlugin_parameters_get
    if _newclass:
        parameters = _swig_property(_System.SchemaPlugin_parameters_get, _System.SchemaPlugin_parameters_set)
    __swig_setmethods__["setup"] = _System.SchemaPlugin_setup_set
    __swig_getmethods__["setup"] = _System.SchemaPlugin_setup_get
    if _newclass:
        setup = _swig_property(_System.SchemaPlugin_setup_get, _System.SchemaPlugin_setup_set)
    __swig_destroy__ = _System.delete_SchemaPlugin
    __del__ = lambda self: None
SchemaPlugin_swigregister = _System.SchemaPlugin_swigregister
SchemaPlugin_swigregister(SchemaPlugin)

def SchemaPlugin_ClassName():
    return _System.SchemaPlugin_ClassName()
SchemaPlugin_ClassName = _System.SchemaPlugin_ClassName

def SchemaPlugin_TypeInfo():
    return _System.SchemaPlugin_TypeInfo()
SchemaPlugin_TypeInfo = _System.SchemaPlugin_TypeInfo

def SchemaPlugin_Cast(*args):
    return _System.SchemaPlugin_Cast(*args)
SchemaPlugin_Cast = _System.SchemaPlugin_Cast

def SchemaPlugin_ConstCast(*args):
    return _System.SchemaPlugin_ConstCast(*args)
SchemaPlugin_ConstCast = _System.SchemaPlugin_ConstCast

class SchemaBinding(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaBinding, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaBinding, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.SchemaBinding_ClassName)
    else:
        ClassName = _System.SchemaBinding_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.SchemaBinding_TypeInfo)
    else:
        TypeInfo = _System.SchemaBinding_TypeInfo

    def className(self):
        return _System.SchemaBinding_className(self)

    def typeInfo(self):
        return _System.SchemaBinding_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_System.SchemaBinding_Cast)
    else:
        Cast = _System.SchemaBinding_Cast
    if _newclass:
        ConstCast = staticmethod(_System.SchemaBinding_ConstCast)
    else:
        ConstCast = _System.SchemaBinding_ConstCast

    def __init__(self):
        this = _System.new_SchemaBinding()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def serialize(self, ar):
        return _System.SchemaBinding_serialize(self, ar)
    __swig_setmethods__["name"] = _System.SchemaBinding_name_set
    __swig_getmethods__["name"] = _System.SchemaBinding_name_get
    if _newclass:
        name = _swig_property(_System.SchemaBinding_name_get, _System.SchemaBinding_name_set)
    __swig_setmethods__["module"] = _System.SchemaBinding_module_set
    __swig_getmethods__["module"] = _System.SchemaBinding_module_get
    if _newclass:
        module = _swig_property(_System.SchemaBinding_module_get, _System.SchemaBinding_module_set)
    __swig_setmethods__["category"] = _System.SchemaBinding_category_set
    __swig_getmethods__["category"] = _System.SchemaBinding_category_get
    if _newclass:
        category = _swig_property(_System.SchemaBinding_category_get, _System.SchemaBinding_category_set)
    __swig_setmethods__["description"] = _System.SchemaBinding_description_set
    __swig_getmethods__["description"] = _System.SchemaBinding_description_get
    if _newclass:
        description = _swig_property(_System.SchemaBinding_description_get, _System.SchemaBinding_description_set)
    __swig_setmethods__["parameters"] = _System.SchemaBinding_parameters_set
    __swig_getmethods__["parameters"] = _System.SchemaBinding_parameters_get
    if _newclass:
        parameters = _swig_property(_System.SchemaBinding_parameters_get, _System.SchemaBinding_parameters_set)
    __swig_destroy__ = _System.delete_SchemaBinding
    __del__ = lambda self: None
SchemaBinding_swigregister = _System.SchemaBinding_swigregister
SchemaBinding_swigregister(SchemaBinding)

def SchemaBinding_ClassName():
    return _System.SchemaBinding_ClassName()
SchemaBinding_ClassName = _System.SchemaBinding_ClassName

def SchemaBinding_TypeInfo():
    return _System.SchemaBinding_TypeInfo()
SchemaBinding_TypeInfo = _System.SchemaBinding_TypeInfo

def SchemaBinding_Cast(*args):
    return _System.SchemaBinding_Cast(*args)
SchemaBinding_Cast = _System.SchemaBinding_Cast

def SchemaBinding_ConstCast(*args):
    return _System.SchemaBinding_ConstCast(*args)
SchemaBinding_ConstCast = _System.SchemaBinding_ConstCast

class SchemaDefinitions(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaDefinitions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _System.new_SchemaDefinitions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createAlias(self, existingModule, newModule):
        return _System.SchemaDefinitions_createAlias(self, existingModule, newModule)

    def removeAlias(self, existingModule):
        return _System.SchemaDefinitions_removeAlias(self, existingModule)

    def moduleCount(self):
        return _System.SchemaDefinitions_moduleCount(self)

    def module(self, *args):
        return _System.SchemaDefinitions_module(self, *args)

    def pluginCount(self):
        return _System.SchemaDefinitions_pluginCount(self)

    def plugin(self, *args):
        return _System.SchemaDefinitions_plugin(self, *args)

    def bindingCount(self):
        return _System.SchemaDefinitions_bindingCount(self)

    def binding(self, *args):
        return _System.SchemaDefinitions_binding(self, *args)

    def add(self, *args):
        return _System.SchemaDefinitions_add(self, *args)

    def pluginsForModule(self, *args):
        return _System.SchemaDefinitions_pluginsForModule(self, *args)

    def bindingsForModule(self, *args):
        return _System.SchemaDefinitions_bindingsForModule(self, *args)

    def serialize(self, ar):
        return _System.SchemaDefinitions_serialize(self, ar)

    def load(self, path):
        return _System.SchemaDefinitions_load(self, path)
    __swig_destroy__ = _System.delete_SchemaDefinitions
    __del__ = lambda self: None
SchemaDefinitions_swigregister = _System.SchemaDefinitions_swigregister
SchemaDefinitions_swigregister(SchemaDefinitions)

class SchemaVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaVisitor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
SchemaVisitor_swigregister = _System.SchemaVisitor_swigregister
SchemaVisitor_swigregister(SchemaVisitor)

class ConfigDelegate(Config.Logger):
    __swig_setmethods__ = {}
    for _s in [Config.Logger]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigDelegate, name, value)
    __swig_getmethods__ = {}
    for _s in [Config.Logger]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigDelegate, name)
    __repr__ = _swig_repr
    Added = _System.ConfigDelegate_Added
    Removed = _System.ConfigDelegate_Removed
    Updated = _System.ConfigDelegate_Updated

    def aboutToRead(self, filename):
        return _System.ConfigDelegate_aboutToRead(self, filename)

    def finishedReading(self, filename):
        return _System.ConfigDelegate_finishedReading(self, filename)

    def handleReadError(self, filename):
        return _System.ConfigDelegate_handleReadError(self, filename)

    def aboutToWrite(self, filename):
        return _System.ConfigDelegate_aboutToWrite(self, filename)

    def finishedWriting(self, filename, changes):
        return _System.ConfigDelegate_finishedWriting(self, filename, changes)

    def hasWriteError(self, filename):
        return _System.ConfigDelegate_hasWriteError(self, filename)

    def handleWriteTimeMismatch(self, filename, changes):
        return _System.ConfigDelegate_handleWriteTimeMismatch(self, filename, changes)

    def caseSensitivityConflict(self, arg2):
        return _System.ConfigDelegate_caseSensitivityConflict(self, arg2)

    def __init__(self):
        this = _System.new_ConfigDelegate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _System.delete_ConfigDelegate
    __del__ = lambda self: None
ConfigDelegate_swigregister = _System.ConfigDelegate_swigregister
ConfigDelegate_swigregister(ConfigDelegate)

class SymbolMapItem(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolMapItem, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolMapItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _System.new_SymbolMapItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["symbol"] = _System.SymbolMapItem_symbol_set
    __swig_getmethods__["symbol"] = _System.SymbolMapItem_symbol_get
    if _newclass:
        symbol = _swig_property(_System.SymbolMapItem_symbol_get, _System.SymbolMapItem_symbol_set)
    __swig_setmethods__["known"] = _System.SymbolMapItem_known_set
    __swig_getmethods__["known"] = _System.SymbolMapItem_known_get
    if _newclass:
        known = _swig_property(_System.SymbolMapItem_known_get, _System.SymbolMapItem_known_set)
    __swig_destroy__ = _System.delete_SymbolMapItem
    __del__ = lambda self: None
SymbolMapItem_swigregister = _System.SymbolMapItem_swigregister
SymbolMapItem_swigregister(SymbolMapItem)

class Container(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def parameter(self, i):
        return _System.Container_parameter(self, i)

    def parameterCount(self):
        return _System.Container_parameterCount(self)

    def group(self, i):
        return _System.Container_group(self, i)

    def groupCount(self):
        return _System.Container_groupCount(self)

    def add(self, *args):
        return _System.Container_add(self, *args)

    def structure(self, i):
        return _System.Container_structure(self, i)

    def structureCount(self):
        return _System.Container_structureCount(self)

    def addType(self, arg2):
        return _System.Container_addType(self, arg2)

    def hasStructure(self, *args):
        return _System.Container_hasStructure(self, *args)

    def instantiate(self, s, name):
        return _System.Container_instantiate(self, s, name)

    def remove(self, s):
        return _System.Container_remove(self, s)

    def findStructureType(self, type):
        return _System.Container_findStructureType(self, type)

    def findParameter(self, fullName):
        return _System.Container_findParameter(self, fullName)

    def findContainer(self, path):
        return _System.Container_findContainer(self, path)

    def accept(self, arg2):
        return _System.Container_accept(self, arg2)
    __swig_setmethods__["super"] = _System.Container_super_set
    __swig_getmethods__["super"] = _System.Container_super_get
    if _newclass:
        super = _swig_property(_System.Container_super_get, _System.Container_super_set)
    __swig_setmethods__["parent"] = _System.Container_parent_set
    __swig_getmethods__["parent"] = _System.Container_parent_get
    if _newclass:
        parent = _swig_property(_System.Container_parent_get, _System.Container_parent_set)
    __swig_setmethods__["path"] = _System.Container_path_set
    __swig_getmethods__["path"] = _System.Container_path_get
    if _newclass:
        path = _swig_property(_System.Container_path_get, _System.Container_path_set)
    __swig_setmethods__["groups"] = _System.Container_groups_set
    __swig_getmethods__["groups"] = _System.Container_groups_get
    if _newclass:
        groups = _swig_property(_System.Container_groups_get, _System.Container_groups_set)
    __swig_setmethods__["parameters"] = _System.Container_parameters_set
    __swig_getmethods__["parameters"] = _System.Container_parameters_get
    if _newclass:
        parameters = _swig_property(_System.Container_parameters_get, _System.Container_parameters_set)
    __swig_setmethods__["structures"] = _System.Container_structures_set
    __swig_getmethods__["structures"] = _System.Container_structures_get
    if _newclass:
        structures = _swig_property(_System.Container_structures_get, _System.Container_structures_set)
    __swig_setmethods__["structureTypes"] = _System.Container_structureTypes_set
    __swig_getmethods__["structureTypes"] = _System.Container_structureTypes_get
    if _newclass:
        structureTypes = _swig_property(_System.Container_structureTypes_get, _System.Container_structureTypes_set)
    __swig_destroy__ = _System.delete_Container
    __del__ = lambda self: None
Container_swigregister = _System.Container_swigregister
Container_swigregister(Container)

class Parameter(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Parameter_ClassName)
    else:
        ClassName = _System.Parameter_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Parameter_TypeInfo)
    else:
        TypeInfo = _System.Parameter_TypeInfo

    def className(self):
        return _System.Parameter_className(self)

    def typeInfo(self):
        return _System.Parameter_typeInfo(self)

    def __init__(self, *args):
        this = _System.new_Parameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, backImport=False):
        return _System.Parameter_copy(self, backImport)

    def clone(self):
        return _System.Parameter_clone(self)

    def dump(self, os):
        return _System.Parameter_dump(self, os)

    def inherits(self, param):
        return _System.Parameter_inherits(self, param)

    def updateFinalValue(self, *args):
        return _System.Parameter_updateFinalValue(self, *args)
    __swig_setmethods__["parent"] = _System.Parameter_parent_set
    __swig_getmethods__["parent"] = _System.Parameter_parent_get
    if _newclass:
        parent = _swig_property(_System.Parameter_parent_get, _System.Parameter_parent_set)
    __swig_setmethods__["super"] = _System.Parameter_super_set
    __swig_getmethods__["super"] = _System.Parameter_super_get
    if _newclass:
        super = _swig_property(_System.Parameter_super_get, _System.Parameter_super_set)
    __swig_setmethods__["definition"] = _System.Parameter_definition_set
    __swig_getmethods__["definition"] = _System.Parameter_definition_get
    if _newclass:
        definition = _swig_property(_System.Parameter_definition_get, _System.Parameter_definition_set)
    __swig_setmethods__["symbols"] = _System.Parameter_symbols_set
    __swig_getmethods__["symbols"] = _System.Parameter_symbols_get
    if _newclass:
        symbols = _swig_property(_System.Parameter_symbols_get, _System.Parameter_symbols_set)
    __swig_setmethods__["symbol"] = _System.Parameter_symbol_set
    __swig_getmethods__["symbol"] = _System.Parameter_symbol_get
    if _newclass:
        symbol = _swig_property(_System.Parameter_symbol_get, _System.Parameter_symbol_set)
    __swig_setmethods__["variableName"] = _System.Parameter_variableName_set
    __swig_getmethods__["variableName"] = _System.Parameter_variableName_get
    if _newclass:
        variableName = _swig_property(_System.Parameter_variableName_get, _System.Parameter_variableName_set)
    __swig_destroy__ = _System.delete_Parameter
    __del__ = lambda self: None
Parameter_swigregister = _System.Parameter_swigregister
Parameter_swigregister(Parameter)

def Parameter_ClassName():
    return _System.Parameter_ClassName()
Parameter_ClassName = _System.Parameter_ClassName

def Parameter_TypeInfo():
    return _System.Parameter_TypeInfo()
Parameter_TypeInfo = _System.Parameter_TypeInfo

class Structure(Container):
    __swig_setmethods__ = {}
    for _s in [Container]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Structure, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Structure, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Structure_ClassName)
    else:
        ClassName = _System.Structure_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Structure_TypeInfo)
    else:
        TypeInfo = _System.Structure_TypeInfo

    def className(self):
        return _System.Structure_className(self)

    def typeInfo(self):
        return _System.Structure_typeInfo(self)

    def __init__(self, *args):
        this = _System.new_Structure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, backImport=False):
        return _System.Structure_copy(self, backImport)

    def clone(self):
        return _System.Structure_clone(self)

    def instantiate(self, name):
        return _System.Structure_instantiate(self, name)

    def dump(self, os):
        return _System.Structure_dump(self, os)
    __swig_setmethods__["definition"] = _System.Structure_definition_set
    __swig_getmethods__["definition"] = _System.Structure_definition_get
    if _newclass:
        definition = _swig_property(_System.Structure_definition_get, _System.Structure_definition_set)
    __swig_setmethods__["name"] = _System.Structure_name_set
    __swig_getmethods__["name"] = _System.Structure_name_get
    if _newclass:
        name = _swig_property(_System.Structure_name_get, _System.Structure_name_set)
    __swig_destroy__ = _System.delete_Structure
    __del__ = lambda self: None
Structure_swigregister = _System.Structure_swigregister
Structure_swigregister(Structure)

def Structure_ClassName():
    return _System.Structure_ClassName()
Structure_ClassName = _System.Structure_ClassName

def Structure_TypeInfo():
    return _System.Structure_TypeInfo()
Structure_TypeInfo = _System.Structure_TypeInfo

class Group(Container):
    __swig_setmethods__ = {}
    for _s in [Container]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Group_ClassName)
    else:
        ClassName = _System.Group_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Group_TypeInfo)
    else:
        TypeInfo = _System.Group_TypeInfo

    def className(self):
        return _System.Group_className(self)

    def typeInfo(self):
        return _System.Group_typeInfo(self)

    def __init__(self, *args):
        this = _System.new_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, backImport=False):
        return _System.Group_copy(self, backImport)

    def clone(self):
        return _System.Group_clone(self)

    def dump(self, os):
        return _System.Group_dump(self, os)
    __swig_setmethods__["parent"] = _System.Group_parent_set
    __swig_getmethods__["parent"] = _System.Group_parent_get
    if _newclass:
        parent = _swig_property(_System.Group_parent_get, _System.Group_parent_set)
    __swig_setmethods__["definition"] = _System.Group_definition_set
    __swig_getmethods__["definition"] = _System.Group_definition_get
    if _newclass:
        definition = _swig_property(_System.Group_definition_get, _System.Group_definition_set)
    __swig_destroy__ = _System.delete_Group
    __del__ = lambda self: None
Group_swigregister = _System.Group_swigregister
Group_swigregister(Group)

def Group_ClassName():
    return _System.Group_ClassName()
Group_ClassName = _System.Group_ClassName

def Group_TypeInfo():
    return _System.Group_TypeInfo()
Group_TypeInfo = _System.Group_TypeInfo

class Section(Container):
    __swig_setmethods__ = {}
    for _s in [Container]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Section, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Section, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Section_ClassName)
    else:
        ClassName = _System.Section_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Section_TypeInfo)
    else:
        TypeInfo = _System.Section_TypeInfo

    def className(self):
        return _System.Section_className(self)

    def typeInfo(self):
        return _System.Section_typeInfo(self)

    def __init__(self, *args):
        this = _System.new_Section(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, backImport=False):
        return _System.Section_copy(self, backImport)

    def clone(self):
        return _System.Section_clone(self)

    def dump(self, os):
        return _System.Section_dump(self, os)
    __swig_setmethods__["parent"] = _System.Section_parent_set
    __swig_getmethods__["parent"] = _System.Section_parent_get
    if _newclass:
        parent = _swig_property(_System.Section_parent_get, _System.Section_parent_set)
    __swig_setmethods__["name"] = _System.Section_name_set
    __swig_getmethods__["name"] = _System.Section_name_get
    if _newclass:
        name = _swig_property(_System.Section_name_get, _System.Section_name_set)
    __swig_setmethods__["description"] = _System.Section_description_set
    __swig_getmethods__["description"] = _System.Section_description_get
    if _newclass:
        description = _swig_property(_System.Section_description_get, _System.Section_description_set)
    __swig_destroy__ = _System.delete_Section
    __del__ = lambda self: None
Section_swigregister = _System.Section_swigregister
Section_swigregister(Section)

def Section_ClassName():
    return _System.Section_ClassName()
Section_ClassName = _System.Section_ClassName

def Section_TypeInfo():
    return _System.Section_TypeInfo()
Section_TypeInfo = _System.Section_TypeInfo

class Binding(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Binding, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Binding, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Binding_ClassName)
    else:
        ClassName = _System.Binding_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Binding_TypeInfo)
    else:
        TypeInfo = _System.Binding_TypeInfo

    def className(self):
        return _System.Binding_className(self)

    def typeInfo(self):
        return _System.Binding_typeInfo(self)

    def __init__(self, n):
        this = _System.new_Binding(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _System.Binding_clone(self)

    def dump(self, os):
        return _System.Binding_dump(self, os)

    def section(self, i):
        return _System.Binding_section(self, i)

    def sectionCount(self):
        return _System.Binding_sectionCount(self)

    def findContainer(self, path):
        return _System.Binding_findContainer(self, path)

    def findParameter(self, fullName):
        return _System.Binding_findParameter(self, fullName)

    def accept(self, arg2):
        return _System.Binding_accept(self, arg2)
    __swig_setmethods__["parent"] = _System.Binding_parent_set
    __swig_getmethods__["parent"] = _System.Binding_parent_get
    if _newclass:
        parent = _swig_property(_System.Binding_parent_get, _System.Binding_parent_set)
    __swig_setmethods__["definition"] = _System.Binding_definition_set
    __swig_getmethods__["definition"] = _System.Binding_definition_get
    if _newclass:
        definition = _swig_property(_System.Binding_definition_get, _System.Binding_definition_set)
    __swig_setmethods__["name"] = _System.Binding_name_set
    __swig_getmethods__["name"] = _System.Binding_name_get
    if _newclass:
        name = _swig_property(_System.Binding_name_get, _System.Binding_name_set)
    __swig_setmethods__["description"] = _System.Binding_description_set
    __swig_getmethods__["description"] = _System.Binding_description_get
    if _newclass:
        description = _swig_property(_System.Binding_description_get, _System.Binding_description_set)
    __swig_setmethods__["sections"] = _System.Binding_sections_set
    __swig_getmethods__["sections"] = _System.Binding_sections_get
    if _newclass:
        sections = _swig_property(_System.Binding_sections_get, _System.Binding_sections_set)
    __swig_destroy__ = _System.delete_Binding
    __del__ = lambda self: None
Binding_swigregister = _System.Binding_swigregister
Binding_swigregister(Binding)

def Binding_ClassName():
    return _System.Binding_ClassName()
Binding_ClassName = _System.Binding_ClassName

def Binding_TypeInfo():
    return _System.Binding_TypeInfo()
Binding_TypeInfo = _System.Binding_TypeInfo

class BindingCategory(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BindingCategory, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BindingCategory, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _System.new_BindingCategory(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def binding(self, name):
        return _System.BindingCategory_binding(self, name)

    def clone(self):
        return _System.BindingCategory_clone(self)

    def dump(self, os):
        return _System.BindingCategory_dump(self, os)

    def hasBinding(self, alias):
        return _System.BindingCategory_hasBinding(self, alias)

    def instantiate(self, b, alias):
        return _System.BindingCategory_instantiate(self, b, alias)

    def alias(self, b):
        return _System.BindingCategory_alias(self, b)

    def removeInstance(self, *args):
        return _System.BindingCategory_removeInstance(self, *args)

    def findContainer(self, path):
        return _System.BindingCategory_findContainer(self, path)

    def findParameter(self, fullName):
        return _System.BindingCategory_findParameter(self, fullName)

    def accept(self, arg2):
        return _System.BindingCategory_accept(self, arg2)
    __swig_setmethods__["parent"] = _System.BindingCategory_parent_set
    __swig_getmethods__["parent"] = _System.BindingCategory_parent_get
    if _newclass:
        parent = _swig_property(_System.BindingCategory_parent_get, _System.BindingCategory_parent_set)
    __swig_setmethods__["name"] = _System.BindingCategory_name_set
    __swig_getmethods__["name"] = _System.BindingCategory_name_get
    if _newclass:
        name = _swig_property(_System.BindingCategory_name_get, _System.BindingCategory_name_set)
    __swig_setmethods__["bindings"] = _System.BindingCategory_bindings_set
    __swig_getmethods__["bindings"] = _System.BindingCategory_bindings_get
    if _newclass:
        bindings = _swig_property(_System.BindingCategory_bindings_get, _System.BindingCategory_bindings_set)
    __swig_setmethods__["bindingTypes"] = _System.BindingCategory_bindingTypes_set
    __swig_getmethods__["bindingTypes"] = _System.BindingCategory_bindingTypes_get
    if _newclass:
        bindingTypes = _swig_property(_System.BindingCategory_bindingTypes_get, _System.BindingCategory_bindingTypes_set)
    __swig_destroy__ = _System.delete_BindingCategory
    __del__ = lambda self: None
BindingCategory_swigregister = _System.BindingCategory_swigregister
BindingCategory_swigregister(BindingCategory)

class ModuleBinding(Binding):
    __swig_setmethods__ = {}
    for _s in [Binding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleBinding, name, value)
    __swig_getmethods__ = {}
    for _s in [Binding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleBinding, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.ModuleBinding_ClassName)
    else:
        ClassName = _System.ModuleBinding_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.ModuleBinding_TypeInfo)
    else:
        TypeInfo = _System.ModuleBinding_TypeInfo

    def className(self):
        return _System.ModuleBinding_className(self)

    def typeInfo(self):
        return _System.ModuleBinding_typeInfo(self)

    def __init__(self, n):
        this = _System.new_ModuleBinding(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _System.ModuleBinding_clone(self)

    def add(self, arg2):
        return _System.ModuleBinding_add(self, arg2)

    def category(self, name):
        return _System.ModuleBinding_category(self, name)

    def writeConfig(self, filename, delegate=None):
        return _System.ModuleBinding_writeConfig(self, filename, delegate)

    def dump(self, os):
        return _System.ModuleBinding_dump(self, os)

    def findContainer(self, path):
        return _System.ModuleBinding_findContainer(self, path)

    def findParameter(self, fullName):
        return _System.ModuleBinding_findParameter(self, fullName)

    def accept(self, arg2):
        return _System.ModuleBinding_accept(self, arg2)
    __swig_setmethods__["configFile"] = _System.ModuleBinding_configFile_set
    __swig_getmethods__["configFile"] = _System.ModuleBinding_configFile_get
    if _newclass:
        configFile = _swig_property(_System.ModuleBinding_configFile_get, _System.ModuleBinding_configFile_set)
    __swig_setmethods__["categories"] = _System.ModuleBinding_categories_set
    __swig_getmethods__["categories"] = _System.ModuleBinding_categories_get
    if _newclass:
        categories = _swig_property(_System.ModuleBinding_categories_get, _System.ModuleBinding_categories_set)
    __swig_destroy__ = _System.delete_ModuleBinding
    __del__ = lambda self: None
ModuleBinding_swigregister = _System.ModuleBinding_swigregister
ModuleBinding_swigregister(ModuleBinding)

def ModuleBinding_ClassName():
    return _System.ModuleBinding_ClassName()
ModuleBinding_ClassName = _System.ModuleBinding_ClassName

def ModuleBinding_TypeInfo():
    return _System.ModuleBinding_TypeInfo()
ModuleBinding_TypeInfo = _System.ModuleBinding_TypeInfo

class StationID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _System.new_StationID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _System.StationID___eq__(self, other)

    def __lt__(self, other):
        return _System.StationID___lt__(self, other)
    __swig_setmethods__["networkCode"] = _System.StationID_networkCode_set
    __swig_getmethods__["networkCode"] = _System.StationID_networkCode_get
    if _newclass:
        networkCode = _swig_property(_System.StationID_networkCode_get, _System.StationID_networkCode_set)
    __swig_setmethods__["stationCode"] = _System.StationID_stationCode_set
    __swig_getmethods__["stationCode"] = _System.StationID_stationCode_get
    if _newclass:
        stationCode = _swig_property(_System.StationID_stationCode_get, _System.StationID_stationCode_set)
    __swig_destroy__ = _System.delete_StationID
    __del__ = lambda self: None
StationID_swigregister = _System.StationID_swigregister
StationID_swigregister(StationID)

class Module(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Module_ClassName)
    else:
        ClassName = _System.Module_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Module_TypeInfo)
    else:
        TypeInfo = _System.Module_TypeInfo

    def className(self):
        return _System.Module_className(self)

    def typeInfo(self):
        return _System.Module_typeInfo(self)

    def __init__(self, arg2):
        this = _System.new_Module(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hasConfiguration(self):
        return _System.Module_hasConfiguration(self)

    def add(self, arg2):
        return _System.Module_add(self, arg2)

    def section(self, i):
        return _System.Module_section(self, i)

    def sectionCount(self):
        return _System.Module_sectionCount(self)

    def findParameter(self, fullName):
        return _System.Module_findParameter(self, fullName)

    def findContainer(self, path):
        return _System.Module_findContainer(self, path)

    def supportsBindings(self):
        return _System.Module_supportsBindings(self)

    def loadProfiles(self, dir, delegate=None):
        return _System.Module_loadProfiles(self, dir, delegate)

    def addProfile(self, arg2):
        return _System.Module_addProfile(self, arg2)

    def removeProfile(self, *args):
        return _System.Module_removeProfile(self, *args)

    def bind(self, *args):
        return _System.Module_bind(self, *args)

    def removeStation(self, arg2):
        return _System.Module_removeStation(self, arg2)

    def createBinding(self):
        return _System.Module_createBinding(self)

    def createProfile(self, name):
        return _System.Module_createProfile(self, name)

    def getProfile(self, profile):
        return _System.Module_getProfile(self, profile)

    def getBinding(self, arg2):
        return _System.Module_getBinding(self, arg2)

    def readBinding(self, *args):
        return _System.Module_readBinding(self, *args)

    def accept(self, arg2):
        return _System.Module_accept(self, arg2)
    __swig_setmethods__["model"] = _System.Module_model_set
    __swig_getmethods__["model"] = _System.Module_model_get
    if _newclass:
        model = _swig_property(_System.Module_model_get, _System.Module_model_set)
    __swig_setmethods__["keyDirectory"] = _System.Module_keyDirectory_set
    __swig_getmethods__["keyDirectory"] = _System.Module_keyDirectory_get
    if _newclass:
        keyDirectory = _swig_property(_System.Module_keyDirectory_get, _System.Module_keyDirectory_set)
    __swig_setmethods__["configFile"] = _System.Module_configFile_set
    __swig_getmethods__["configFile"] = _System.Module_configFile_get
    if _newclass:
        configFile = _swig_property(_System.Module_configFile_get, _System.Module_configFile_set)
    __swig_setmethods__["definition"] = _System.Module_definition_set
    __swig_getmethods__["definition"] = _System.Module_definition_get
    if _newclass:
        definition = _swig_property(_System.Module_definition_get, _System.Module_definition_set)
    __swig_setmethods__["bindingTemplate"] = _System.Module_bindingTemplate_set
    __swig_getmethods__["bindingTemplate"] = _System.Module_bindingTemplate_get
    if _newclass:
        bindingTemplate = _swig_property(_System.Module_bindingTemplate_get, _System.Module_bindingTemplate_set)
    __swig_setmethods__["sections"] = _System.Module_sections_set
    __swig_getmethods__["sections"] = _System.Module_sections_get
    if _newclass:
        sections = _swig_property(_System.Module_sections_get, _System.Module_sections_set)
    __swig_setmethods__["unknowns"] = _System.Module_unknowns_set
    __swig_getmethods__["unknowns"] = _System.Module_unknowns_get
    if _newclass:
        unknowns = _swig_property(_System.Module_unknowns_get, _System.Module_unknowns_set)
    __swig_setmethods__["bindings"] = _System.Module_bindings_set
    __swig_getmethods__["bindings"] = _System.Module_bindings_get
    if _newclass:
        bindings = _swig_property(_System.Module_bindings_get, _System.Module_bindings_set)
    __swig_setmethods__["profiles"] = _System.Module_profiles_set
    __swig_getmethods__["profiles"] = _System.Module_profiles_get
    if _newclass:
        profiles = _swig_property(_System.Module_profiles_get, _System.Module_profiles_set)
    __swig_destroy__ = _System.delete_Module
    __del__ = lambda self: None
Module_swigregister = _System.Module_swigregister
Module_swigregister(Module)

def Module_ClassName():
    return _System.Module_ClassName()
Module_ClassName = _System.Module_ClassName

def Module_TypeInfo():
    return _System.Module_TypeInfo()
Module_TypeInfo = _System.Module_TypeInfo

class Station(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Station, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Station, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Station_ClassName)
    else:
        ClassName = _System.Station_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Station_TypeInfo)
    else:
        TypeInfo = _System.Station_TypeInfo

    def className(self):
        return _System.Station_className(self)

    def typeInfo(self):
        return _System.Station_typeInfo(self)

    def __init__(self):
        this = _System.new_Station()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readConfig(self, filename):
        return _System.Station_readConfig(self, filename)

    def writeConfig(self, filename, delegate=None):
        return _System.Station_writeConfig(self, filename, delegate)

    def setConfig(self, module, profile):
        return _System.Station_setConfig(self, module, profile)

    def compareTag(self, name, value):
        return _System.Station_compareTag(self, name, value)
    __swig_setmethods__["config"] = _System.Station_config_set
    __swig_getmethods__["config"] = _System.Station_config_get
    if _newclass:
        config = _swig_property(_System.Station_config_get, _System.Station_config_set)
    __swig_setmethods__["tags"] = _System.Station_tags_set
    __swig_getmethods__["tags"] = _System.Station_tags_get
    if _newclass:
        tags = _swig_property(_System.Station_tags_get, _System.Station_tags_set)
    __swig_destroy__ = _System.delete_Station
    __del__ = lambda self: None
Station_swigregister = _System.Station_swigregister
Station_swigregister(Station)

def Station_ClassName():
    return _System.Station_ClassName()
Station_ClassName = _System.Station_ClassName

def Station_TypeInfo():
    return _System.Station_TypeInfo()
Station_TypeInfo = _System.Station_TypeInfo

class Model(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_System.Model_ClassName)
    else:
        ClassName = _System.Model_ClassName
    if _newclass:
        TypeInfo = staticmethod(_System.Model_TypeInfo)
    else:
        TypeInfo = _System.Model_TypeInfo

    def className(self):
        return _System.Model_className(self)

    def typeInfo(self):
        return _System.Model_typeInfo(self)

    def __init__(self):
        this = _System.new_Model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def create(self, arg2):
        return _System.Model_create(self, arg2)

    def readConfig(self, *args):
        return _System.Model_readConfig(self, *args)

    def writeConfig(self, *args):
        return _System.Model_writeConfig(self, *args)

    def module(self, name):
        return _System.Model_module(self, name)

    def systemConfigFilename(self, read, name):
        return _System.Model_systemConfigFilename(self, read, name)

    def configFileLocation(self, read, name, stage):
        return _System.Model_configFileLocation(self, read, name, stage)

    def stationConfigDir(self, *args):
        return _System.Model_stationConfigDir(self, *args)

    def update(self, mod, container):
        return _System.Model_update(self, mod, container)

    def updateBinding(self, mod, binding):
        return _System.Model_updateBinding(self, mod, binding)

    def addStation(self, arg2):
        return _System.Model_addStation(self, arg2)

    def removeStation(self, arg2):
        return _System.Model_removeStation(self, arg2)

    def removeNetwork(self, arg2):
        return _System.Model_removeNetwork(self, arg2)

    def removeStationModule(self, arg2, arg3):
        return _System.Model_removeStationModule(self, arg2, arg3)

    def accept(self, arg2):
        return _System.Model_accept(self, arg2)
    __swig_setmethods__["schema"] = _System.Model_schema_set
    __swig_getmethods__["schema"] = _System.Model_schema_get
    if _newclass:
        schema = _swig_property(_System.Model_schema_get, _System.Model_schema_set)
    __swig_setmethods__["modules"] = _System.Model_modules_set
    __swig_getmethods__["modules"] = _System.Model_modules_get
    if _newclass:
        modules = _swig_property(_System.Model_modules_get, _System.Model_modules_set)
    __swig_setmethods__["categories"] = _System.Model_categories_set
    __swig_getmethods__["categories"] = _System.Model_categories_get
    if _newclass:
        categories = _swig_property(_System.Model_categories_get, _System.Model_categories_set)
    __swig_setmethods__["stations"] = _System.Model_stations_set
    __swig_getmethods__["stations"] = _System.Model_stations_get
    if _newclass:
        stations = _swig_property(_System.Model_stations_get, _System.Model_stations_set)
    __swig_setmethods__["symbols"] = _System.Model_symbols_set
    __swig_getmethods__["symbols"] = _System.Model_symbols_get
    if _newclass:
        symbols = _swig_property(_System.Model_symbols_get, _System.Model_symbols_set)
    __swig_setmethods__["modMap"] = _System.Model_modMap_set
    __swig_getmethods__["modMap"] = _System.Model_modMap_get
    if _newclass:
        modMap = _swig_property(_System.Model_modMap_get, _System.Model_modMap_set)
    __swig_setmethods__["keyDirOverride"] = _System.Model_keyDirOverride_set
    __swig_getmethods__["keyDirOverride"] = _System.Model_keyDirOverride_get
    if _newclass:
        keyDirOverride = _swig_property(_System.Model_keyDirOverride_get, _System.Model_keyDirOverride_set)
    __swig_destroy__ = _System.delete_Model
    __del__ = lambda self: None
Model_swigregister = _System.Model_swigregister
Model_swigregister(Model)

def Model_ClassName():
    return _System.Model_ClassName()
Model_ClassName = _System.Model_ClassName

def Model_TypeInfo():
    return _System.Model_TypeInfo()
Model_TypeInfo = _System.Model_TypeInfo

class ModelVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelVisitor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
ModelVisitor_swigregister = _System.ModelVisitor_swigregister
ModelVisitor_swigregister(ModelVisitor)

class BindingMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BindingMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BindingMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _System.BindingMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.BindingMap___nonzero__(self)

    def __bool__(self):
        return _System.BindingMap___bool__(self)

    def __len__(self):
        return _System.BindingMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _System.BindingMap___getitem__(self, key)

    def __delitem__(self, key):
        return _System.BindingMap___delitem__(self, key)

    def has_key(self, key):
        return _System.BindingMap_has_key(self, key)

    def keys(self):
        return _System.BindingMap_keys(self)

    def values(self):
        return _System.BindingMap_values(self)

    def items(self):
        return _System.BindingMap_items(self)

    def __contains__(self, key):
        return _System.BindingMap___contains__(self, key)

    def key_iterator(self):
        return _System.BindingMap_key_iterator(self)

    def value_iterator(self):
        return _System.BindingMap_value_iterator(self)

    def __setitem__(self, *args):
        return _System.BindingMap___setitem__(self, *args)

    def asdict(self):
        return _System.BindingMap_asdict(self)

    def __init__(self, *args):
        this = _System.new_BindingMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _System.BindingMap_empty(self)

    def size(self):
        return _System.BindingMap_size(self)

    def swap(self, v):
        return _System.BindingMap_swap(self, v)

    def begin(self):
        return _System.BindingMap_begin(self)

    def end(self):
        return _System.BindingMap_end(self)

    def rbegin(self):
        return _System.BindingMap_rbegin(self)

    def rend(self):
        return _System.BindingMap_rend(self)

    def clear(self):
        return _System.BindingMap_clear(self)

    def get_allocator(self):
        return _System.BindingMap_get_allocator(self)

    def count(self, x):
        return _System.BindingMap_count(self, x)

    def erase(self, *args):
        return _System.BindingMap_erase(self, *args)

    def find(self, x):
        return _System.BindingMap_find(self, x)

    def lower_bound(self, x):
        return _System.BindingMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _System.BindingMap_upper_bound(self, x)
    __swig_destroy__ = _System.delete_BindingMap
    __del__ = lambda self: None
BindingMap_swigregister = _System.BindingMap_swigregister
BindingMap_swigregister(BindingMap)

class GroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroupVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _System.GroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.GroupVector___nonzero__(self)

    def __bool__(self):
        return _System.GroupVector___bool__(self)

    def __len__(self):
        return _System.GroupVector___len__(self)

    def __getslice__(self, i, j):
        return _System.GroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _System.GroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _System.GroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _System.GroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _System.GroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _System.GroupVector___setitem__(self, *args)

    def pop(self):
        return _System.GroupVector_pop(self)

    def append(self, x):
        return _System.GroupVector_append(self, x)

    def empty(self):
        return _System.GroupVector_empty(self)

    def size(self):
        return _System.GroupVector_size(self)

    def swap(self, v):
        return _System.GroupVector_swap(self, v)

    def begin(self):
        return _System.GroupVector_begin(self)

    def end(self):
        return _System.GroupVector_end(self)

    def rbegin(self):
        return _System.GroupVector_rbegin(self)

    def rend(self):
        return _System.GroupVector_rend(self)

    def clear(self):
        return _System.GroupVector_clear(self)

    def get_allocator(self):
        return _System.GroupVector_get_allocator(self)

    def pop_back(self):
        return _System.GroupVector_pop_back(self)

    def erase(self, *args):
        return _System.GroupVector_erase(self, *args)

    def __init__(self, *args):
        this = _System.new_GroupVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _System.GroupVector_push_back(self, x)

    def front(self):
        return _System.GroupVector_front(self)

    def back(self):
        return _System.GroupVector_back(self)

    def assign(self, n, x):
        return _System.GroupVector_assign(self, n, x)

    def resize(self, *args):
        return _System.GroupVector_resize(self, *args)

    def insert(self, *args):
        return _System.GroupVector_insert(self, *args)

    def reserve(self, n):
        return _System.GroupVector_reserve(self, n)

    def capacity(self):
        return _System.GroupVector_capacity(self)
    __swig_destroy__ = _System.delete_GroupVector
    __del__ = lambda self: None
GroupVector_swigregister = _System.GroupVector_swigregister
GroupVector_swigregister(GroupVector)

class ParameterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _System.ParameterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.ParameterVector___nonzero__(self)

    def __bool__(self):
        return _System.ParameterVector___bool__(self)

    def __len__(self):
        return _System.ParameterVector___len__(self)

    def __getslice__(self, i, j):
        return _System.ParameterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _System.ParameterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _System.ParameterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _System.ParameterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _System.ParameterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _System.ParameterVector___setitem__(self, *args)

    def pop(self):
        return _System.ParameterVector_pop(self)

    def append(self, x):
        return _System.ParameterVector_append(self, x)

    def empty(self):
        return _System.ParameterVector_empty(self)

    def size(self):
        return _System.ParameterVector_size(self)

    def swap(self, v):
        return _System.ParameterVector_swap(self, v)

    def begin(self):
        return _System.ParameterVector_begin(self)

    def end(self):
        return _System.ParameterVector_end(self)

    def rbegin(self):
        return _System.ParameterVector_rbegin(self)

    def rend(self):
        return _System.ParameterVector_rend(self)

    def clear(self):
        return _System.ParameterVector_clear(self)

    def get_allocator(self):
        return _System.ParameterVector_get_allocator(self)

    def pop_back(self):
        return _System.ParameterVector_pop_back(self)

    def erase(self, *args):
        return _System.ParameterVector_erase(self, *args)

    def __init__(self, *args):
        this = _System.new_ParameterVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _System.ParameterVector_push_back(self, x)

    def front(self):
        return _System.ParameterVector_front(self)

    def back(self):
        return _System.ParameterVector_back(self)

    def assign(self, n, x):
        return _System.ParameterVector_assign(self, n, x)

    def resize(self, *args):
        return _System.ParameterVector_resize(self, *args)

    def insert(self, *args):
        return _System.ParameterVector_insert(self, *args)

    def reserve(self, n):
        return _System.ParameterVector_reserve(self, n)

    def capacity(self):
        return _System.ParameterVector_capacity(self)
    __swig_destroy__ = _System.delete_ParameterVector
    __del__ = lambda self: None
ParameterVector_swigregister = _System.ParameterVector_swigregister
ParameterVector_swigregister(ParameterVector)

class StructureVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructureVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructureVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _System.StructureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _System.StructureVector___nonzero__(self)

    def __bool__(self):
        return _System.StructureVector___bool__(self)

    def __len__(self):
        return _System.StructureVector___len__(self)

    def __getslice__(self, i, j):
        return _System.StructureVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _System.StructureVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _System.StructureVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _System.StructureVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _System.StructureVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _System.StructureVector___setitem__(self, *args)

    def pop(self):
        return _System.StructureVector_pop(self)

    def append(self, x):
        return _System.StructureVector_append(self, x)

    def empty(self):
        return _System.StructureVector_empty(self)

    def size(self):
        return _System.StructureVector_size(self)

    def swap(self, v):
        return _System.StructureVector_swap(self, v)

    def begin(self):
        return _System.StructureVector_begin(self)

    def end(self):
        return _System.StructureVector_end(self)

    def rbegin(self):
        return _System.StructureVector_rbegin(self)

    def rend(self):
        return _System.StructureVector_rend(self)

    def clear(self):
        return _System.StructureVector_clear(self)

    def get_allocator(self):
        return _System.StructureVector_get_allocator(self)

    def pop_back(self):
        return _System.StructureVector_pop_back(self)

    def erase(self, *args):
        return _System.StructureVector_erase(self, *args)

    def __init__(self, *args):
        this = _System.new_StructureVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _System.StructureVector_push_back(self, x)

    def front(self):
        return _System.StructureVector_front(self)

    def back(self):
        return _System.StructureVector_back(self)

    def assign(self, n, x):
        return _System.StructureVector_assign(self, n, x)

    def resize(self, *args):
        return _System.StructureVector_resize(self, *args)

    def insert(self, *args):
        return _System.StructureVector_insert(self, *args)

    def reserve(self, n):
        return _System.StructureVector_reserve(self, n)

    def capacity(self):
        return _System.StructureVector_capacity(self)
    __swig_destroy__ = _System.delete_StructureVector
    __del__ = lambda self: None
StructureVector_swigregister = _System.StructureVector_swigregister
StructureVector_swigregister(StructureVector)

# This file is compatible with both classic and new-style classes.


