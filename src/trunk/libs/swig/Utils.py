# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Utils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Utils')
    _Utils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Utils', [dirname(__file__)])
        except ImportError:
            import _Utils
            return _Utils
        try:
            _mod = imp.load_module('_Utils', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Utils = swig_import_helper()
    del swig_import_helper
else:
    import _Utils
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Utils.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Utils.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Utils.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Utils.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Utils.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Utils.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Utils.SwigPyIterator_copy(self)

    def next(self):
        return _Utils.SwigPyIterator_next(self)

    def __next__(self):
        return _Utils.SwigPyIterator___next__(self)

    def previous(self):
        return _Utils.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Utils.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Utils.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Utils.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Utils.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Utils.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Utils.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Utils.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Utils.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def basename(name):
    return _Utils.basename(name)
basename = _Utils.basename

def fileExists(file):
    return _Utils.fileExists(file)
fileExists = _Utils.fileExists

def pathExists(path):
    return _Utils.pathExists(path)
pathExists = _Utils.pathExists

def createPath(path):
    return _Utils.createPath(path)
createPath = _Utils.createPath

def removeExtension(name):
    return _Utils.removeExtension(name)
removeExtension = _Utils.removeExtension

def bytesToStreambuf(data, n):
    return _Utils.bytesToStreambuf(data, n)
bytesToStreambuf = _Utils.bytesToStreambuf

def stringToStreambuf(str):
    return _Utils.stringToStreambuf(str)
stringToStreambuf = _Utils.stringToStreambuf

def file2ostream(fn):
    return _Utils.file2ostream(fn)
file2ostream = _Utils.file2ostream

def file2istream(fn):
    return _Utils.file2istream(fn)
file2istream = _Utils.file2istream
class StopWatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopWatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopWatch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Utils.new_StopWatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def restart(self):
        return _Utils.StopWatch_restart(self)

    def reset(self):
        return _Utils.StopWatch_reset(self)

    def isActive(self):
        return _Utils.StopWatch_isActive(self)

    def elapsed(self):
        return _Utils.StopWatch_elapsed(self)
    __swig_destroy__ = _Utils.delete_StopWatch
    __del__ = lambda self: None
StopWatch_swigregister = _Utils.StopWatch_swigregister
StopWatch_swigregister(StopWatch)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr

    def __init__(self, timeoutseconds=0):
        this = _Utils.new_Timer(timeoutseconds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Utils.delete_Timer
    __del__ = lambda self: None

    def setTimeout(self, seconds):
        return _Utils.Timer_setTimeout(self, seconds)

    def setTimeout2(self, seconds, nanoseconds):
        return _Utils.Timer_setTimeout2(self, seconds, nanoseconds)

    def setCallback(self, arg2):
        return _Utils.Timer_setCallback(self, arg2)

    def setSingleShot(self, arg2):
        return _Utils.Timer_setSingleShot(self, arg2)

    def start(self):
        return _Utils.Timer_start(self)

    def stop(self):
        return _Utils.Timer_stop(self)

    def disable(self):
        return _Utils.Timer_disable(self)

    def isActive(self):
        return _Utils.Timer_isActive(self)
Timer_swigregister = _Utils.Timer_swigregister
Timer_swigregister(Timer)

# This file is compatible with both classic and new-style classes.


