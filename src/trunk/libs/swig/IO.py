# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IO')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IO')
    _IO = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IO', [dirname(__file__)])
        except ImportError:
            import _IO
            return _IO
        try:
            _mod = imp.load_module('_IO', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IO = swig_import_helper()
    del swig_import_helper
else:
    import _IO
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IO.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _IO.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IO.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IO.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IO.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IO.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IO.SwigPyIterator_copy(self)

    def next(self):
        return _IO.SwigPyIterator_next(self)

    def __next__(self):
        return _IO.SwigPyIterator___next__(self)

    def previous(self):
        return _IO.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IO.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IO.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IO.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IO.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IO.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IO.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IO.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IO.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _IO.ios_base_erase_event
    imbue_event = _IO.ios_base_imbue_event
    copyfmt_event = _IO.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _IO.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _IO.ios_base_flags(self, *args)

    def setf(self, *args):
        return _IO.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _IO.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _IO.ios_base_precision(self, *args)

    def width(self, *args):
        return _IO.ios_base_width(self, *args)
    if _newclass:
        sync_with_stdio = staticmethod(_IO.ios_base_sync_with_stdio)
    else:
        sync_with_stdio = _IO.ios_base_sync_with_stdio

    def imbue(self, __loc):
        return _IO.ios_base_imbue(self, __loc)

    def getloc(self):
        return _IO.ios_base_getloc(self)
    if _newclass:
        xalloc = staticmethod(_IO.ios_base_xalloc)
    else:
        xalloc = _IO.ios_base_xalloc

    def iword(self, __ix):
        return _IO.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _IO.ios_base_pword(self, __ix)
    __swig_destroy__ = _IO.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _IO.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _IO.cvar
ios_base.boolalpha = _IO.cvar.ios_base_boolalpha
ios_base.dec = _IO.cvar.ios_base_dec
ios_base.fixed = _IO.cvar.ios_base_fixed
ios_base.hex = _IO.cvar.ios_base_hex
ios_base.internal = _IO.cvar.ios_base_internal
ios_base.left = _IO.cvar.ios_base_left
ios_base.oct = _IO.cvar.ios_base_oct
ios_base.right = _IO.cvar.ios_base_right
ios_base.scientific = _IO.cvar.ios_base_scientific
ios_base.showbase = _IO.cvar.ios_base_showbase
ios_base.showpoint = _IO.cvar.ios_base_showpoint
ios_base.showpos = _IO.cvar.ios_base_showpos
ios_base.skipws = _IO.cvar.ios_base_skipws
ios_base.unitbuf = _IO.cvar.ios_base_unitbuf
ios_base.uppercase = _IO.cvar.ios_base_uppercase
ios_base.adjustfield = _IO.cvar.ios_base_adjustfield
ios_base.basefield = _IO.cvar.ios_base_basefield
ios_base.floatfield = _IO.cvar.ios_base_floatfield
ios_base.badbit = _IO.cvar.ios_base_badbit
ios_base.eofbit = _IO.cvar.ios_base_eofbit
ios_base.failbit = _IO.cvar.ios_base_failbit
ios_base.goodbit = _IO.cvar.ios_base_goodbit
ios_base.app = _IO.cvar.ios_base_app
ios_base.ate = _IO.cvar.ios_base_ate
ios_base.binary = _IO.cvar.ios_base_binary
ios_base.ios_base_in = _IO.cvar.ios_base_ios_base_in
ios_base.out = _IO.cvar.ios_base_out
ios_base.trunc = _IO.cvar.ios_base_trunc
ios_base.beg = _IO.cvar.ios_base_beg
ios_base.cur = _IO.cvar.ios_base_cur
ios_base.end = _IO.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _IO.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _IO.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _IO.ios_base_xalloc()
ios_base_xalloc = _IO.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self):
        return _IO.ios_rdstate(self)

    def clear(self, *args):
        return _IO.ios_clear(self, *args)

    def setstate(self, __state):
        return _IO.ios_setstate(self, __state)

    def good(self):
        return _IO.ios_good(self)

    def eof(self):
        return _IO.ios_eof(self)

    def fail(self):
        return _IO.ios_fail(self)

    def bad(self):
        return _IO.ios_bad(self)

    def exceptions(self, *args):
        return _IO.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _IO.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _IO.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _IO.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _IO.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _IO.ios_fill(self, *args)

    def imbue(self, __loc):
        return _IO.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _IO.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _IO.ios_widen(self, __c)
ios_swigregister = _IO.ios_swigregister
ios_swigregister(ios)

import Math
import Core
class DatabaseInterface(Core.BaseObject):
    """Proxy of C++ Seiscomp::IO::DatabaseInterface class."""

    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.DatabaseInterface_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.DatabaseInterface_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(DatabaseInterface self) -> char const *"""
        return _IO.DatabaseInterface_className(self)


    def typeInfo(self):
        """typeInfo(DatabaseInterface self) -> RTTI"""
        return _IO.DatabaseInterface_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> DatabaseInterface
        Cast(Seiscomp::Core::BaseObjectPtr o) -> DatabaseInterface
        """
        return _IO.DatabaseInterface_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> DatabaseInterface
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> DatabaseInterface
        """
        return _IO.DatabaseInterface_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)
    __swig_destroy__ = _IO.delete_DatabaseInterface
    __del__ = lambda self: None

    def Create(service):
        """Create(char const * service) -> DatabaseInterface"""
        return _IO.DatabaseInterface_Create(service)

    Create = staticmethod(Create)

    def Open(uri):
        """Open(char const * uri) -> DatabaseInterface"""
        return _IO.DatabaseInterface_Open(uri)

    Open = staticmethod(Open)

    def connect(self, connection):
        """connect(DatabaseInterface self, char const * connection) -> bool"""
        return _IO.DatabaseInterface_connect(self, connection)


    def disconnect(self):
        """disconnect(DatabaseInterface self)"""
        return _IO.DatabaseInterface_disconnect(self)


    def isConnected(self):
        """isConnected(DatabaseInterface self) -> bool"""
        return _IO.DatabaseInterface_isConnected(self)


    def start(self):
        """start(DatabaseInterface self)"""
        return _IO.DatabaseInterface_start(self)


    def commit(self):
        """commit(DatabaseInterface self)"""
        return _IO.DatabaseInterface_commit(self)


    def rollback(self):
        """rollback(DatabaseInterface self)"""
        return _IO.DatabaseInterface_rollback(self)


    def execute(self, command):
        """execute(DatabaseInterface self, char const * command) -> bool"""
        return _IO.DatabaseInterface_execute(self, command)


    def beginQuery(self, query):
        """beginQuery(DatabaseInterface self, char const * query) -> bool"""
        return _IO.DatabaseInterface_beginQuery(self, query)


    def endQuery(self):
        """endQuery(DatabaseInterface self)"""
        return _IO.DatabaseInterface_endQuery(self)


    def defaultValue(self):
        """defaultValue(DatabaseInterface self) -> char const *"""
        return _IO.DatabaseInterface_defaultValue(self)


    def lastInsertId(self, table):
        """lastInsertId(DatabaseInterface self, char const * table) -> unsigned long"""
        return _IO.DatabaseInterface_lastInsertId(self, table)


    def numberOfAffectedRows(self):
        """numberOfAffectedRows(DatabaseInterface self) -> uint64_t"""
        return _IO.DatabaseInterface_numberOfAffectedRows(self)


    def fetchRow(self):
        """fetchRow(DatabaseInterface self) -> bool"""
        return _IO.DatabaseInterface_fetchRow(self)


    def findColumn(self, name):
        """findColumn(DatabaseInterface self, char const * name) -> int"""
        return _IO.DatabaseInterface_findColumn(self, name)


    def getRowFieldCount(self):
        """getRowFieldCount(DatabaseInterface self) -> int"""
        return _IO.DatabaseInterface_getRowFieldCount(self)


    def getRowFieldName(self, index):
        """getRowFieldName(DatabaseInterface self, int index) -> char const *"""
        return _IO.DatabaseInterface_getRowFieldName(self, index)


    def getRowField(self, index):
        """getRowField(DatabaseInterface self, int index) -> void const *"""
        return _IO.DatabaseInterface_getRowField(self, index)


    def getRowFieldString(self, index):
        """getRowFieldString(DatabaseInterface self, int index) -> string"""
        return _IO.DatabaseInterface_getRowFieldString(self, index)


    def getRowFieldSize(self, index):
        """getRowFieldSize(DatabaseInterface self, int index) -> size_t"""
        return _IO.DatabaseInterface_getRowFieldSize(self, index)


    def timeToString(self, arg2):
        """timeToString(DatabaseInterface self, Time arg2) -> string"""
        return _IO.DatabaseInterface_timeToString(self, arg2)


    def stringToTime(self, arg2):
        """stringToTime(DatabaseInterface self, char const * arg2) -> Time"""
        return _IO.DatabaseInterface_stringToTime(self, arg2)


    def columnPrefix(self):
        """columnPrefix(DatabaseInterface self) -> string"""
        return _IO.DatabaseInterface_columnPrefix(self)


    def convertColumnName(self, name):
        """convertColumnName(DatabaseInterface self, string name) -> string"""
        return _IO.DatabaseInterface_convertColumnName(self, name)

DatabaseInterface_swigregister = _IO.DatabaseInterface_swigregister
DatabaseInterface_swigregister(DatabaseInterface)

def DatabaseInterface_ClassName():
    """DatabaseInterface_ClassName() -> char const *"""
    return _IO.DatabaseInterface_ClassName()

def DatabaseInterface_TypeInfo():
    """DatabaseInterface_TypeInfo() -> RTTI"""
    return _IO.DatabaseInterface_TypeInfo()

def DatabaseInterface_Cast(*args):
    """
    Cast(BaseObject o) -> DatabaseInterface
    DatabaseInterface_Cast(Seiscomp::Core::BaseObjectPtr o) -> DatabaseInterface
    """
    return _IO.DatabaseInterface_Cast(*args)

def DatabaseInterface_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> DatabaseInterface
    DatabaseInterface_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> DatabaseInterface
    """
    return _IO.DatabaseInterface_ConstCast(*args)

def DatabaseInterface_Create(service):
    """DatabaseInterface_Create(char const * service) -> DatabaseInterface"""
    return _IO.DatabaseInterface_Create(service)

def DatabaseInterface_Open(uri):
    """DatabaseInterface_Open(char const * uri) -> DatabaseInterface"""
    return _IO.DatabaseInterface_Open(uri)

class GFSource(Math.CoordD):
    """Proxy of C++ Seiscomp::IO::GFSource class."""

    __swig_setmethods__ = {}
    for _s in [Math.CoordD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Math.CoordD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GFSource, name)
    __repr__ = _swig_repr

    def __init__(self, lat=0.0, lon=0.0, d=0.0):
        """
        __init__(Seiscomp::IO::GFSource self, double lat=0.0, double lon=0.0, double d=0.0) -> GFSource
        __init__(Seiscomp::IO::GFSource self, double lat=0.0, double lon=0.0) -> GFSource
        __init__(Seiscomp::IO::GFSource self, double lat=0.0) -> GFSource
        __init__(Seiscomp::IO::GFSource self) -> GFSource
        """
        this = _IO.new_GFSource(lat, lon, d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["depth"] = _IO.GFSource_depth_set
    __swig_getmethods__["depth"] = _IO.GFSource_depth_get
    if _newclass:
        depth = _swig_property(_IO.GFSource_depth_get, _IO.GFSource_depth_set)
    __swig_destroy__ = _IO.delete_GFSource
    __del__ = lambda self: None
GFSource_swigregister = _IO.GFSource_swigregister
GFSource_swigregister(GFSource)

class GFReceiver(Math.CoordD):
    """Proxy of C++ Seiscomp::IO::GFReceiver class."""

    __swig_setmethods__ = {}
    for _s in [Math.CoordD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFReceiver, name, value)
    __swig_getmethods__ = {}
    for _s in [Math.CoordD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GFReceiver, name)
    __repr__ = _swig_repr

    def __init__(self, lat=0.0, lon=0.0, e=0.0):
        """
        __init__(Seiscomp::IO::GFReceiver self, double lat=0.0, double lon=0.0, double e=0.0) -> GFReceiver
        __init__(Seiscomp::IO::GFReceiver self, double lat=0.0, double lon=0.0) -> GFReceiver
        __init__(Seiscomp::IO::GFReceiver self, double lat=0.0) -> GFReceiver
        __init__(Seiscomp::IO::GFReceiver self) -> GFReceiver
        """
        this = _IO.new_GFReceiver(lat, lon, e)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["elevation"] = _IO.GFReceiver_elevation_set
    __swig_getmethods__["elevation"] = _IO.GFReceiver_elevation_get
    if _newclass:
        elevation = _swig_property(_IO.GFReceiver_elevation_get, _IO.GFReceiver_elevation_set)
    __swig_destroy__ = _IO.delete_GFReceiver
    __del__ = lambda self: None
GFReceiver_swigregister = _IO.GFReceiver_swigregister
GFReceiver_swigregister(GFReceiver)

class GFArchive(Core.BaseObject):
    """Proxy of C++ Seiscomp::IO::GFArchive class."""

    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GFArchive, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.GFArchive_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.GFArchive_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(GFArchive self) -> char const *"""
        return _IO.GFArchive_className(self)


    def typeInfo(self):
        """typeInfo(GFArchive self) -> RTTI"""
        return _IO.GFArchive_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> GFArchive
        Cast(Seiscomp::Core::BaseObjectPtr o) -> GFArchive
        """
        return _IO.GFArchive_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> GFArchive
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> GFArchive
        """
        return _IO.GFArchive_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)
    __swig_destroy__ = _IO.delete_GFArchive
    __del__ = lambda self: None

    def setSource(self, arg2):
        """setSource(GFArchive self, string arg2) -> bool"""
        return _IO.GFArchive_setSource(self, arg2)


    def close(self):
        """close(GFArchive self)"""
        return _IO.GFArchive_close(self)


    def availableModels(self):
        """availableModels(GFArchive self) -> std::list< std::string >"""
        return _IO.GFArchive_availableModels(self)


    def availableDepths(self, model):
        """availableDepths(GFArchive self, string model) -> std::list< double >"""
        return _IO.GFArchive_availableDepths(self, model)


    def setTimeSpan(self, span):
        """setTimeSpan(GFArchive self, TimeSpan span) -> bool"""
        return _IO.GFArchive_setTimeSpan(self, span)


    def addRequest(self, *args):
        """
        addRequest(GFArchive self, string id, string model, GFSource source, GFReceiver receiver) -> bool
        addRequest(GFArchive self, string id, string model, GFSource source, GFReceiver receiver, TimeSpan span) -> bool
        """
        return _IO.GFArchive_addRequest(self, *args)


    def get(self):
        """get(GFArchive self) -> GreensFunction"""
        return _IO.GFArchive_get(self)


    def getTravelTime(self, phase, model, source, receiver):
        """getTravelTime(GFArchive self, string phase, string model, GFSource source, GFReceiver receiver) -> Seiscomp::Core::Optional< double >::Impl"""
        return _IO.GFArchive_getTravelTime(self, phase, model, source, receiver)


    def Create(service):
        """Create(char const * service) -> GFArchive"""
        return _IO.GFArchive_Create(service)

    Create = staticmethod(Create)

    def Open(url):
        """Open(char const * url) -> GFArchive"""
        return _IO.GFArchive_Open(url)

    Open = staticmethod(Open)
GFArchive_swigregister = _IO.GFArchive_swigregister
GFArchive_swigregister(GFArchive)

def GFArchive_ClassName():
    """GFArchive_ClassName() -> char const *"""
    return _IO.GFArchive_ClassName()

def GFArchive_TypeInfo():
    """GFArchive_TypeInfo() -> RTTI"""
    return _IO.GFArchive_TypeInfo()

def GFArchive_Cast(*args):
    """
    Cast(BaseObject o) -> GFArchive
    GFArchive_Cast(Seiscomp::Core::BaseObjectPtr o) -> GFArchive
    """
    return _IO.GFArchive_Cast(*args)

def GFArchive_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> GFArchive
    GFArchive_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> GFArchive
    """
    return _IO.GFArchive_ConstCast(*args)

def GFArchive_Create(service):
    """GFArchive_Create(char const * service) -> GFArchive"""
    return _IO.GFArchive_Create(service)

def GFArchive_Open(url):
    """GFArchive_Open(char const * url) -> GFArchive"""
    return _IO.GFArchive_Open(url)

class RecordStream(Core.InterruptibleObject):
    """Proxy of C++ Seiscomp::IO::RecordStream class."""

    __swig_setmethods__ = {}
    for _s in [Core.InterruptibleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.InterruptibleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.RecordStream_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.RecordStream_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(RecordStream self) -> char const *"""
        return _IO.RecordStream_className(self)


    def typeInfo(self):
        """typeInfo(RecordStream self) -> RTTI"""
        return _IO.RecordStream_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> RecordStream
        Cast(Seiscomp::Core::BaseObjectPtr o) -> RecordStream
        """
        return _IO.RecordStream_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> RecordStream
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RecordStream
        """
        return _IO.RecordStream_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)
    __swig_destroy__ = _IO.delete_RecordStream
    __del__ = lambda self: None

    def setRecordType(self, arg2):
        """setRecordType(RecordStream self, char const * arg2) -> bool"""
        return _IO.RecordStream_setRecordType(self, arg2)


    def setSource(self, arg2):
        """setSource(RecordStream self, string arg2) -> bool"""
        return _IO.RecordStream_setSource(self, arg2)


    def close(self):
        """close(RecordStream self)"""
        return _IO.RecordStream_close(self)


    def addStream(self, *args):
        """
        addStream(RecordStream self, string net, string sta, string loc, string cha) -> bool
        addStream(RecordStream self, string net, string sta, string loc, string cha, Time stime, Time etime) -> bool
        """
        return _IO.RecordStream_addStream(self, *args)


    def setStartTime(self, stime):
        """setStartTime(RecordStream self, Time stime) -> bool"""
        return _IO.RecordStream_setStartTime(self, stime)


    def setEndTime(self, etime):
        """setEndTime(RecordStream self, Time etime) -> bool"""
        return _IO.RecordStream_setEndTime(self, etime)


    def setTimeWindow(self, w):
        """setTimeWindow(RecordStream self, Seiscomp::Core::TimeWindow const & w) -> bool"""
        return _IO.RecordStream_setTimeWindow(self, w)


    def setTimeout(self, seconds):
        """setTimeout(RecordStream self, int seconds) -> bool"""
        return _IO.RecordStream_setTimeout(self, seconds)


    def stream(self):
        """stream(RecordStream self) -> std::istream &"""
        return _IO.RecordStream_stream(self)


    def createRecord(self, arg2, arg3):
        """createRecord(RecordStream self, Seiscomp::Array::DataType arg2, Seiscomp::Record::Hint arg3) -> Record"""
        return _IO.RecordStream_createRecord(self, arg2, arg3)


    def recordStored(self, arg2):
        """recordStored(RecordStream self, Record arg2)"""
        return _IO.RecordStream_recordStored(self, arg2)


    def filterRecord(self, arg2):
        """filterRecord(RecordStream self, Record arg2) -> bool"""
        return _IO.RecordStream_filterRecord(self, arg2)


    def Create(*args):
        """
        Create(char const * service) -> RecordStream
        Create(char const * service, char const * recordType) -> RecordStream
        """
        return _IO.RecordStream_Create(*args)

    Create = staticmethod(Create)

    def Open(url):
        """Open(char const * url) -> RecordStream"""
        return _IO.RecordStream_Open(url)

    Open = staticmethod(Open)
RecordStream_swigregister = _IO.RecordStream_swigregister
RecordStream_swigregister(RecordStream)

def RecordStream_ClassName():
    """RecordStream_ClassName() -> char const *"""
    return _IO.RecordStream_ClassName()

def RecordStream_TypeInfo():
    """RecordStream_TypeInfo() -> RTTI"""
    return _IO.RecordStream_TypeInfo()

def RecordStream_Cast(*args):
    """
    Cast(BaseObject o) -> RecordStream
    RecordStream_Cast(Seiscomp::Core::BaseObjectPtr o) -> RecordStream
    """
    return _IO.RecordStream_Cast(*args)

def RecordStream_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> RecordStream
    RecordStream_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RecordStream
    """
    return _IO.RecordStream_ConstCast(*args)

def RecordStream_Create(*args):
    """
    Create(char const * service) -> RecordStream
    RecordStream_Create(char const * service, char const * recordType) -> RecordStream
    """
    return _IO.RecordStream_Create(*args)

def RecordStream_Open(url):
    """RecordStream_Open(char const * url) -> RecordStream"""
    return _IO.RecordStream_Open(url)

class RecordIterator(_object):
    """Proxy of C++ Seiscomp::IO::RecordIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecordIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::RecordIterator self) -> RecordIterator
        __init__(Seiscomp::IO::RecordIterator self, RecordIterator iter) -> RecordIterator
        """
        this = _IO.new_RecordIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordIterator
    __del__ = lambda self: None

    def __ref__(self):
        """__ref__(RecordIterator self) -> Record"""
        return _IO.RecordIterator___ref__(self)


    def __ne__(self, iter):
        """__ne__(RecordIterator self, RecordIterator iter) -> bool"""
        return _IO.RecordIterator___ne__(self, iter)


    def __eq__(self, iter):
        """__eq__(RecordIterator self, RecordIterator iter) -> bool"""
        return _IO.RecordIterator___eq__(self, iter)


    def source(self):
        """source(RecordIterator self) -> RecordInput"""
        return _IO.RecordIterator_source(self)


    def current(self):
        """current(RecordIterator self) -> Record"""
        return _IO.RecordIterator_current(self)

RecordIterator_swigregister = _IO.RecordIterator_swigregister
RecordIterator_swigregister(RecordIterator)

class RecordInput(Core.BaseObject):
    """Proxy of C++ Seiscomp::IO::RecordInput class."""

    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordInput, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordInput, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::RecordInput self, RecordStream arg2, Seiscomp::Array::DataType dt, Seiscomp::Record::Hint h) -> RecordInput
        __init__(Seiscomp::IO::RecordInput self, RecordStream arg2, Seiscomp::Array::DataType dt) -> RecordInput
        __init__(Seiscomp::IO::RecordInput self, RecordStream arg2) -> RecordInput
        """
        this = _IO.new_RecordInput(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        """begin(RecordInput self) -> RecordIterator"""
        return _IO.RecordInput_begin(self)


    def end(self):
        """end(RecordInput self) -> RecordIterator"""
        return _IO.RecordInput_end(self)


    def next(self):
        """next(RecordInput self) -> Record"""
        return _IO.RecordInput_next(self)


    def __iter__(self):
        while 1:
            rec = self.next()
            if not rec:
                raise StopIteration

            yield rec

    __swig_destroy__ = _IO.delete_RecordInput
    __del__ = lambda self: None
RecordInput_swigregister = _IO.RecordInput_swigregister
RecordInput_swigregister(RecordInput)

class RecordFilterInterface(Core.BaseObject):
    """Proxy of C++ Seiscomp::IO::RecordFilterInterface class."""

    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordFilterInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordFilterInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IO.delete_RecordFilterInterface
    __del__ = lambda self: None

    def feed(self, rec):
        """feed(RecordFilterInterface self, Record rec) -> Record"""
        return _IO.RecordFilterInterface_feed(self, rec)


    def flush(self):
        """flush(RecordFilterInterface self) -> Record"""
        return _IO.RecordFilterInterface_flush(self)


    def reset(self):
        """reset(RecordFilterInterface self)"""
        return _IO.RecordFilterInterface_reset(self)


    def clone(self):
        """clone(RecordFilterInterface self) -> RecordFilterInterface"""
        return _IO.RecordFilterInterface_clone(self)

RecordFilterInterface_swigregister = _IO.RecordFilterInterface_swigregister
RecordFilterInterface_swigregister(RecordFilterInterface)

class RecordDemuxFilter(RecordFilterInterface):
    """Proxy of C++ Seiscomp::IO::RecordDemuxFilter class."""

    __swig_setmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordDemuxFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordDemuxFilter, name)
    __repr__ = _swig_repr

    def __init__(self, recordFilter=None):
        """
        __init__(Seiscomp::IO::RecordDemuxFilter self, RecordFilterInterface recordFilter=None) -> RecordDemuxFilter
        __init__(Seiscomp::IO::RecordDemuxFilter self) -> RecordDemuxFilter
        """
        this = _IO.new_RecordDemuxFilter(recordFilter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordDemuxFilter
    __del__ = lambda self: None

    def setFilter(self, recordFilter):
        """setFilter(RecordDemuxFilter self, RecordFilterInterface recordFilter)"""
        return _IO.RecordDemuxFilter_setFilter(self, recordFilter)


    def feed(self, rec):
        """feed(RecordDemuxFilter self, Record rec) -> Record"""
        return _IO.RecordDemuxFilter_feed(self, rec)


    def flush(self):
        """flush(RecordDemuxFilter self) -> Record"""
        return _IO.RecordDemuxFilter_flush(self)


    def reset(self):
        """reset(RecordDemuxFilter self)"""
        return _IO.RecordDemuxFilter_reset(self)


    def clone(self):
        """clone(RecordDemuxFilter self) -> RecordFilterInterface"""
        return _IO.RecordDemuxFilter_clone(self)

RecordDemuxFilter_swigregister = _IO.RecordDemuxFilter_swigregister
RecordDemuxFilter_swigregister(RecordDemuxFilter)

class RecordResamplerBase(RecordFilterInterface):
    """Proxy of C++ Seiscomp::IO::RecordResamplerBase class."""

    __swig_setmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordResamplerBase, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordResamplerBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def flush(self):
        """flush(RecordResamplerBase self) -> Record"""
        return _IO.RecordResamplerBase_flush(self)


    def reset(self):
        """reset(RecordResamplerBase self)"""
        return _IO.RecordResamplerBase_reset(self)

RecordResamplerBase_swigregister = _IO.RecordResamplerBase_swigregister
RecordResamplerBase_swigregister(RecordResamplerBase)

class RecordStreamException(Core.StreamException):
    """Proxy of C++ Seiscomp::IO::RecordStreamException class."""

    __swig_setmethods__ = {}
    for _s in [Core.StreamException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordStreamException, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.StreamException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordStreamException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::RecordStreamException self) -> RecordStreamException
        __init__(Seiscomp::IO::RecordStreamException self, string what) -> RecordStreamException
        """
        this = _IO.new_RecordStreamException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordStreamException
    __del__ = lambda self: None
RecordStreamException_swigregister = _IO.RecordStreamException_swigregister
RecordStreamException_swigregister(RecordStreamException)

class RecordStreamTimeout(RecordStreamException):
    """Proxy of C++ Seiscomp::IO::RecordStreamTimeout class."""

    __swig_setmethods__ = {}
    for _s in [RecordStreamException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordStreamTimeout, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStreamException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordStreamTimeout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::RecordStreamTimeout self) -> RecordStreamTimeout
        __init__(Seiscomp::IO::RecordStreamTimeout self, string what) -> RecordStreamTimeout
        """
        this = _IO.new_RecordStreamTimeout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordStreamTimeout
    __del__ = lambda self: None
RecordStreamTimeout_swigregister = _IO.RecordStreamTimeout_swigregister
RecordStreamTimeout_swigregister(RecordStreamTimeout)

class Importer(Core.BaseObject):
    """Proxy of C++ Seiscomp::IO::Importer class."""

    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Importer, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Importer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.Importer_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.Importer_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(Importer self) -> char const *"""
        return _IO.Importer_className(self)


    def typeInfo(self):
        """typeInfo(Importer self) -> RTTI"""
        return _IO.Importer_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> Importer
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Importer
        """
        return _IO.Importer_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Importer
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Importer
        """
        return _IO.Importer_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)
    __swig_destroy__ = _IO.delete_Importer
    __del__ = lambda self: None

    def Create(type):
        """Create(char const * type) -> Importer"""
        return _IO.Importer_Create(type)

    Create = staticmethod(Create)

    def read(self, *args):
        """
        read(Importer self, std::streambuf * buf) -> BaseObject
        read(Importer self, string filename) -> BaseObject
        """
        return _IO.Importer_read(self, *args)


    def withoutErrors(self):
        """withoutErrors(Importer self) -> bool"""
        return _IO.Importer_withoutErrors(self)

Importer_swigregister = _IO.Importer_swigregister
Importer_swigregister(Importer)

def Importer_ClassName():
    """Importer_ClassName() -> char const *"""
    return _IO.Importer_ClassName()

def Importer_TypeInfo():
    """Importer_TypeInfo() -> RTTI"""
    return _IO.Importer_TypeInfo()

def Importer_Cast(*args):
    """
    Cast(BaseObject o) -> Importer
    Importer_Cast(Seiscomp::Core::BaseObjectPtr o) -> Importer
    """
    return _IO.Importer_Cast(*args)

def Importer_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> Importer
    Importer_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Importer
    """
    return _IO.Importer_ConstCast(*args)

def Importer_Create(type):
    """Importer_Create(char const * type) -> Importer"""
    return _IO.Importer_Create(type)

class ExportSink(_object):
    """Proxy of C++ Seiscomp::IO::ExportSink class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExportSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExportSink, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IO.delete_ExportSink
    __del__ = lambda self: None

    def write(self, data, size):
        """write(ExportSink self, char const * data, int size) -> int"""
        return _IO.ExportSink_write(self, data, size)


    def __init__(self):
        """__init__(Seiscomp::IO::ExportSink self) -> ExportSink"""
        if self.__class__ == ExportSink:
            _self = None
        else:
            _self = self
        this = _IO.new_ExportSink(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _IO.disown_ExportSink(self)
        return weakref_proxy(self)
ExportSink_swigregister = _IO.ExportSink_swigregister
ExportSink_swigregister(ExportSink)

class Exporter(Core.BaseObject):
    """Proxy of C++ Seiscomp::IO::Exporter class."""

    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exporter, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Exporter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.Exporter_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.Exporter_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(Exporter self) -> char const *"""
        return _IO.Exporter_className(self)


    def typeInfo(self):
        """typeInfo(Exporter self) -> RTTI"""
        return _IO.Exporter_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> Exporter
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Exporter
        """
        return _IO.Exporter_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Exporter
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Exporter
        """
        return _IO.Exporter_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)
    __swig_destroy__ = _IO.delete_Exporter
    __del__ = lambda self: None

    def Create(type):
        """Create(char const * type) -> Exporter"""
        return _IO.Exporter_Create(type)

    Create = staticmethod(Create)

    def setFormattedOutput(self, enable):
        """setFormattedOutput(Exporter self, bool enable)"""
        return _IO.Exporter_setFormattedOutput(self, enable)


    def setIndent(self, arg2):
        """setIndent(Exporter self, int arg2)"""
        return _IO.Exporter_setIndent(self, arg2)


    def write(self, *args):
        """
        write(Exporter self, std::streambuf * buf, BaseObject arg3) -> bool
        write(Exporter self, string filename, BaseObject arg3) -> bool
        write(Exporter self, ExportSink sink, BaseObject arg3) -> bool
        """
        return _IO.Exporter_write(self, *args)

Exporter_swigregister = _IO.Exporter_swigregister
Exporter_swigregister(Exporter)

def Exporter_ClassName():
    """Exporter_ClassName() -> char const *"""
    return _IO.Exporter_ClassName()

def Exporter_TypeInfo():
    """Exporter_TypeInfo() -> RTTI"""
    return _IO.Exporter_TypeInfo()

def Exporter_Cast(*args):
    """
    Cast(BaseObject o) -> Exporter
    Exporter_Cast(Seiscomp::Core::BaseObjectPtr o) -> Exporter
    """
    return _IO.Exporter_Cast(*args)

def Exporter_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> Exporter
    Exporter_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Exporter
    """
    return _IO.Exporter_ConstCast(*args)

def Exporter_Create(type):
    """Exporter_Create(char const * type) -> Exporter"""
    return _IO.Exporter_Create(type)

class XMLArchive(Core.GenericArchive):
    """Proxy of C++ Seiscomp::IO::XMLArchive class."""

    __swig_setmethods__ = {}
    for _s in [Core.GenericArchive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.GenericArchive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLArchive, name)
    __repr__ = _swig_repr
    ZIP = _IO.XMLArchive_ZIP
    GZIP = _IO.XMLArchive_GZIP

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::XMLArchive self) -> XMLArchive
        __init__(Seiscomp::IO::XMLArchive self, std::streambuf * buf, bool isReading=True, int forceWriteVersion=-1) -> XMLArchive
        __init__(Seiscomp::IO::XMLArchive self, std::streambuf * buf, bool isReading=True) -> XMLArchive
        __init__(Seiscomp::IO::XMLArchive self, std::streambuf * buf) -> XMLArchive
        """
        this = _IO.new_XMLArchive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_XMLArchive
    __del__ = lambda self: None

    def open(self, *args):
        """
        open(XMLArchive self, std::streambuf * arg2) -> bool
        open(XMLArchive self, char const * filename) -> bool
        """
        return _IO.XMLArchive_open(self, *args)


    def create(self, *args):
        """
        create(XMLArchive self, std::streambuf * buf, bool writeVersion=True, bool headerNode=True) -> bool
        create(XMLArchive self, std::streambuf * buf, bool writeVersion=True) -> bool
        create(XMLArchive self, std::streambuf * buf) -> bool
        create(XMLArchive self, char const * filename, bool writeVersion=True, bool headerNode=True) -> bool
        create(XMLArchive self, char const * filename, bool writeVersion=True) -> bool
        create(XMLArchive self, char const * filename) -> bool
        """
        return _IO.XMLArchive_create(self, *args)


    def close(self):
        """close(XMLArchive self)"""
        return _IO.XMLArchive_close(self)


    def setRootName(self, name):
        """setRootName(XMLArchive self, string name)"""
        return _IO.XMLArchive_setRootName(self, name)


    def setFormattedOutput(self, enable):
        """setFormattedOutput(XMLArchive self, bool enable)"""
        return _IO.XMLArchive_setFormattedOutput(self, enable)


    def setCompression(self, enable):
        """setCompression(XMLArchive self, bool enable)"""
        return _IO.XMLArchive_setCompression(self, enable)


    def setCompressionMethod(self, method):
        """setCompressionMethod(XMLArchive self, Seiscomp::IO::XMLArchive::CompressionMethod method)"""
        return _IO.XMLArchive_setCompressionMethod(self, method)


    def rootNamespace(self):
        """rootNamespace(XMLArchive self) -> string"""
        return _IO.XMLArchive_rootNamespace(self)


    def rootNamespaceUri(self):
        """rootNamespaceUri(XMLArchive self) -> string"""
        return _IO.XMLArchive_rootNamespaceUri(self)


    def setRootNamespace(self, name, uri):
        """setRootNamespace(XMLArchive self, string name, string uri)"""
        return _IO.XMLArchive_setRootNamespace(self, name, uri)


    def read(self, *args):
        """
        read(XMLArchive self, int & value)
        read(XMLArchive self, float & value)
        read(XMLArchive self, double & value)
        read(XMLArchive self, std::vector< char,std::allocator< char > > & value)
        read(XMLArchive self, std::vector< int,std::allocator< int > > & value)
        read(XMLArchive self, vectorf value)
        read(XMLArchive self, vectord value)
        read(XMLArchive self, std::vector< std::string,std::allocator< std::string > > & value)
        read(XMLArchive self, std::complex< float > & value)
        read(XMLArchive self, std::complex< double > & value)
        read(XMLArchive self, bool & value)
        read(XMLArchive self, vectorc value)
        read(XMLArchive self, string value)
        read(XMLArchive self, time_t & value)
        read(XMLArchive self, Time value)
        """
        return _IO.XMLArchive_read(self, *args)


    def write(self, *args):
        """
        write(XMLArchive self, int value)
        write(XMLArchive self, float value)
        write(XMLArchive self, double value)
        write(XMLArchive self, std::vector< char,std::allocator< char > > & value)
        write(XMLArchive self, std::vector< int,std::allocator< int > > & value)
        write(XMLArchive self, vectorf value)
        write(XMLArchive self, vectord value)
        write(XMLArchive self, std::vector< std::string,std::allocator< std::string > > & value)
        write(XMLArchive self, std::complex< float > & value)
        write(XMLArchive self, std::complex< double > & value)
        write(XMLArchive self, bool value)
        write(XMLArchive self, vectorc value)
        write(XMLArchive self, string value)
        write(XMLArchive self, time_t value)
        write(XMLArchive self, Time value)
        """
        return _IO.XMLArchive_write(self, *args)

XMLArchive_swigregister = _IO.XMLArchive_swigregister
XMLArchive_swigregister(XMLArchive)

class BinaryArchive(Core.GenericArchive):
    """Proxy of C++ Seiscomp::IO::BinaryArchive class."""

    __swig_setmethods__ = {}
    for _s in [Core.GenericArchive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.GenericArchive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryArchive, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::BinaryArchive self) -> BinaryArchive
        __init__(Seiscomp::IO::BinaryArchive self, std::streambuf * buf, bool isReading=True) -> BinaryArchive
        __init__(Seiscomp::IO::BinaryArchive self, std::streambuf * buf) -> BinaryArchive
        """
        this = _IO.new_BinaryArchive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_BinaryArchive
    __del__ = lambda self: None

    def open(self, *args):
        """
        open(BinaryArchive self, char const * file) -> bool
        open(BinaryArchive self, std::streambuf * arg2) -> bool
        """
        return _IO.BinaryArchive_open(self, *args)


    def create(self, *args):
        """
        create(BinaryArchive self, char const * file) -> bool
        create(BinaryArchive self, std::streambuf * arg2) -> bool
        """
        return _IO.BinaryArchive_create(self, *args)


    def close(self):
        """close(BinaryArchive self)"""
        return _IO.BinaryArchive_close(self)


    def read(self, *args):
        """
        read(BinaryArchive self, int & value)
        read(BinaryArchive self, float & value)
        read(BinaryArchive self, double & value)
        read(BinaryArchive self, std::vector< char,std::allocator< char > > & value)
        read(BinaryArchive self, std::vector< int,std::allocator< int > > & value)
        read(BinaryArchive self, vectorf value)
        read(BinaryArchive self, vectord value)
        read(BinaryArchive self, std::vector< std::string,std::allocator< std::string > > & value)
        read(BinaryArchive self, std::complex< float > & value)
        read(BinaryArchive self, std::complex< double > & value)
        read(BinaryArchive self, bool & value)
        read(BinaryArchive self, vectorc value)
        read(BinaryArchive self, string value)
        read(BinaryArchive self, time_t & value)
        read(BinaryArchive self, Time value)
        """
        return _IO.BinaryArchive_read(self, *args)


    def write(self, *args):
        """
        write(BinaryArchive self, int value)
        write(BinaryArchive self, float value)
        write(BinaryArchive self, double value)
        write(BinaryArchive self, std::vector< char,std::allocator< char > > & value)
        write(BinaryArchive self, std::vector< int,std::allocator< int > > & value)
        write(BinaryArchive self, vectorf value)
        write(BinaryArchive self, vectord value)
        write(BinaryArchive self, std::vector< std::string,std::allocator< std::string > > & value)
        write(BinaryArchive self, std::complex< float > & value)
        write(BinaryArchive self, std::complex< double > & value)
        write(BinaryArchive self, bool value)
        write(BinaryArchive self, vectorc value)
        write(BinaryArchive self, string value)
        write(BinaryArchive self, time_t value)
        write(BinaryArchive self, Time value)
        """
        return _IO.BinaryArchive_write(self, *args)

BinaryArchive_swigregister = _IO.BinaryArchive_swigregister
BinaryArchive_swigregister(BinaryArchive)

class VBinaryArchive(BinaryArchive):
    """Proxy of C++ Seiscomp::IO::VBinaryArchive class."""

    __swig_setmethods__ = {}
    for _s in [BinaryArchive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VBinaryArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryArchive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VBinaryArchive, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::VBinaryArchive self, int forceWriteVersion=-1) -> VBinaryArchive
        __init__(Seiscomp::IO::VBinaryArchive self) -> VBinaryArchive
        __init__(Seiscomp::IO::VBinaryArchive self, std::streambuf * buf, bool isReading=True, int forceWriteVersion=-1) -> VBinaryArchive
        __init__(Seiscomp::IO::VBinaryArchive self, std::streambuf * buf, bool isReading=True) -> VBinaryArchive
        __init__(Seiscomp::IO::VBinaryArchive self, std::streambuf * buf) -> VBinaryArchive
        """
        this = _IO.new_VBinaryArchive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setWriteVersion(self, version):
        """setWriteVersion(VBinaryArchive self, int version)"""
        return _IO.VBinaryArchive_setWriteVersion(self, version)


    def open(self, *args):
        """
        open(VBinaryArchive self, char const * file) -> bool
        open(VBinaryArchive self, std::streambuf * arg2) -> bool
        """
        return _IO.VBinaryArchive_open(self, *args)


    def create(self, *args):
        """
        create(VBinaryArchive self, char const * file) -> bool
        create(VBinaryArchive self, std::streambuf * arg2) -> bool
        """
        return _IO.VBinaryArchive_create(self, *args)


    def close(self):
        """close(VBinaryArchive self)"""
        return _IO.VBinaryArchive_close(self)


    def errorMsg(self):
        """errorMsg(VBinaryArchive self) -> char const *"""
        return _IO.VBinaryArchive_errorMsg(self)

    __swig_destroy__ = _IO.delete_VBinaryArchive
    __del__ = lambda self: None
VBinaryArchive_swigregister = _IO.VBinaryArchive_swigregister
VBinaryArchive_swigregister(VBinaryArchive)

NEXTRAS = _IO.NEXTRAS
AH_DATATYPE_UNDEFINED = _IO.AH_DATATYPE_UNDEFINED
AH_DATATYPE_FLOAT = _IO.AH_DATATYPE_FLOAT
AH_DATATYPE_COMPLEX = _IO.AH_DATATYPE_COMPLEX
AH_DATATYPE_VECTOR = _IO.AH_DATATYPE_VECTOR
AH_DATATYPE_TENSOR = _IO.AH_DATATYPE_TENSOR
AH_DATATYPE_DOUBLE = _IO.AH_DATATYPE_DOUBLE
class AHRecord(Core.Record):
    """Proxy of C++ Seiscomp::IO::AHRecord class."""

    __swig_setmethods__ = {}
    for _s in [Core.Record]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AHRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Record]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AHRecord, name)
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.AHRecord_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.AHRecord_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(AHRecord self) -> char const *"""
        return _IO.AHRecord_className(self)


    def typeInfo(self):
        """typeInfo(AHRecord self) -> RTTI"""
        return _IO.AHRecord_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> AHRecord
        Cast(Seiscomp::Core::BaseObjectPtr o) -> AHRecord
        """
        return _IO.AHRecord_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> AHRecord
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AHRecord
        """
        return _IO.AHRecord_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc, string cha, Time stime, double fsamp=0., int tqual=-1, Seiscomp::Array::DataType dt, Seiscomp::Record::Hint h) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc, string cha, Time stime, double fsamp=0., int tqual=-1, Seiscomp::Array::DataType dt) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc, string cha, Time stime, double fsamp=0., int tqual=-1) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc, string cha, Time stime, double fsamp=0.) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc, string cha, Time stime) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc, string cha) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta, string loc) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net, string sta) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, string net) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, AHRecord rec) -> AHRecord
        __init__(Seiscomp::IO::AHRecord self, Record rec) -> AHRecord
        """
        this = _IO.new_AHRecord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_AHRecord
    __del__ = lambda self: None

    def setSamplingFrequency(self, freq):
        """setSamplingFrequency(AHRecord self, double freq)"""
        return _IO.AHRecord_setSamplingFrequency(self, freq)


    def data(self, *args):
        """
        data(AHRecord self) -> Array
        data(AHRecord self) -> Array
        """
        return _IO.AHRecord_data(self, *args)


    def raw(self):
        """raw(AHRecord self) -> Array"""
        return _IO.AHRecord_raw(self)


    def setData(self, *args):
        """
        setData(AHRecord self, Array data)
        setData(AHRecord self, int size, void const * data, Seiscomp::Array::DataType datatype)
        """
        return _IO.AHRecord_setData(self, *args)


    def saveSpace(self):
        """saveSpace(AHRecord self)"""
        return _IO.AHRecord_saveSpace(self)


    def copy(self):
        """copy(AHRecord self) -> AHRecord"""
        return _IO.AHRecord_copy(self)


    def read(self, arg2):
        """read(AHRecord self, std::istream & arg2)"""
        return _IO.AHRecord_read(self, arg2)


    def write(self, out):
        """write(AHRecord self, std::ostream & out)"""
        return _IO.AHRecord_write(self, out)


    def gain(self):
        """gain(AHRecord self) -> float"""
        return _IO.AHRecord_gain(self)


    def setGain(self, value):
        """setGain(AHRecord self, float value)"""
        return _IO.AHRecord_setGain(self, value)


    def extra(self, i):
        """extra(AHRecord self, int i) -> float"""
        return _IO.AHRecord_extra(self, i)


    def setExtra(self, i, value):
        """setExtra(AHRecord self, int i, float value)"""
        return _IO.AHRecord_setExtra(self, i, value)

    __swig_setmethods__["elat"] = _IO.AHRecord_elat_set
    __swig_getmethods__["elat"] = _IO.AHRecord_elat_get
    if _newclass:
        elat = _swig_property(_IO.AHRecord_elat_get, _IO.AHRecord_elat_set)
    __swig_setmethods__["elon"] = _IO.AHRecord_elon_set
    __swig_getmethods__["elon"] = _IO.AHRecord_elon_get
    if _newclass:
        elon = _swig_property(_IO.AHRecord_elon_get, _IO.AHRecord_elon_set)
    __swig_setmethods__["edep"] = _IO.AHRecord_edep_set
    __swig_getmethods__["edep"] = _IO.AHRecord_edep_get
    if _newclass:
        edep = _swig_property(_IO.AHRecord_edep_get, _IO.AHRecord_edep_set)
    __swig_setmethods__["etim"] = _IO.AHRecord_etim_set
    __swig_getmethods__["etim"] = _IO.AHRecord_etim_get
    if _newclass:
        etim = _swig_property(_IO.AHRecord_etim_get, _IO.AHRecord_etim_set)
    __swig_setmethods__["com"] = _IO.AHRecord_com_set
    __swig_getmethods__["com"] = _IO.AHRecord_com_get
    if _newclass:
        com = _swig_property(_IO.AHRecord_com_get, _IO.AHRecord_com_set)
    __swig_setmethods__["ecom"] = _IO.AHRecord_ecom_set
    __swig_getmethods__["ecom"] = _IO.AHRecord_ecom_get
    if _newclass:
        ecom = _swig_property(_IO.AHRecord_ecom_get, _IO.AHRecord_ecom_set)
    __swig_setmethods__["log"] = _IO.AHRecord_log_set
    __swig_getmethods__["log"] = _IO.AHRecord_log_get
    if _newclass:
        log = _swig_property(_IO.AHRecord_log_get, _IO.AHRecord_log_set)
    __swig_setmethods__["slat"] = _IO.AHRecord_slat_set
    __swig_getmethods__["slat"] = _IO.AHRecord_slat_get
    if _newclass:
        slat = _swig_property(_IO.AHRecord_slat_get, _IO.AHRecord_slat_set)
    __swig_setmethods__["slon"] = _IO.AHRecord_slon_set
    __swig_getmethods__["slon"] = _IO.AHRecord_slon_get
    if _newclass:
        slon = _swig_property(_IO.AHRecord_slon_get, _IO.AHRecord_slon_set)
    __swig_setmethods__["salt"] = _IO.AHRecord_salt_set
    __swig_getmethods__["salt"] = _IO.AHRecord_salt_get
    if _newclass:
        salt = _swig_property(_IO.AHRecord_salt_get, _IO.AHRecord_salt_set)
    __swig_setmethods__["sgain"] = _IO.AHRecord_sgain_set
    __swig_getmethods__["sgain"] = _IO.AHRecord_sgain_get
    if _newclass:
        sgain = _swig_property(_IO.AHRecord_sgain_get, _IO.AHRecord_sgain_set)
    __swig_setmethods__["snorm"] = _IO.AHRecord_snorm_set
    __swig_getmethods__["snorm"] = _IO.AHRecord_snorm_get
    if _newclass:
        snorm = _swig_property(_IO.AHRecord_snorm_get, _IO.AHRecord_snorm_set)
    __swig_setmethods__["rmin"] = _IO.AHRecord_rmin_set
    __swig_getmethods__["rmin"] = _IO.AHRecord_rmin_get
    if _newclass:
        rmin = _swig_property(_IO.AHRecord_rmin_get, _IO.AHRecord_rmin_set)
    __swig_setmethods__["maxamp"] = _IO.AHRecord_maxamp_set
    __swig_getmethods__["maxamp"] = _IO.AHRecord_maxamp_get
    if _newclass:
        maxamp = _swig_property(_IO.AHRecord_maxamp_get, _IO.AHRecord_maxamp_set)
    __swig_setmethods__["delta"] = _IO.AHRecord_delta_set
    __swig_getmethods__["delta"] = _IO.AHRecord_delta_get
    if _newclass:
        delta = _swig_property(_IO.AHRecord_delta_get, _IO.AHRecord_delta_set)
    __swig_setmethods__["cal"] = _IO.AHRecord_cal_set
    __swig_getmethods__["cal"] = _IO.AHRecord_cal_get
    if _newclass:
        cal = _swig_property(_IO.AHRecord_cal_get, _IO.AHRecord_cal_set)
    __swig_setmethods__["_delta"] = _IO.AHRecord__delta_set
    __swig_getmethods__["_delta"] = _IO.AHRecord__delta_get
    if _newclass:
        _delta = _swig_property(_IO.AHRecord__delta_get, _IO.AHRecord__delta_set)
AHRecord_swigregister = _IO.AHRecord_swigregister
AHRecord_swigregister(AHRecord)

def AHRecord_ClassName():
    """AHRecord_ClassName() -> char const *"""
    return _IO.AHRecord_ClassName()

def AHRecord_TypeInfo():
    """AHRecord_TypeInfo() -> RTTI"""
    return _IO.AHRecord_TypeInfo()

def AHRecord_Cast(*args):
    """
    Cast(BaseObject o) -> AHRecord
    AHRecord_Cast(Seiscomp::Core::BaseObjectPtr o) -> AHRecord
    """
    return _IO.AHRecord_Cast(*args)

def AHRecord_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> AHRecord
    AHRecord_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AHRecord
    """
    return _IO.AHRecord_ConstCast(*args)

class AHOutput(_object):
    """Proxy of C++ Seiscomp::IO::AHOutput class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AHOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AHOutput, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::AHOutput self) -> AHOutput
        __init__(Seiscomp::IO::AHOutput self, string filename) -> AHOutput
        """
        this = _IO.new_AHOutput(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_AHOutput
    __del__ = lambda self: None

    def put(self, rec):
        """put(AHOutput self, AHRecord rec) -> bool"""
        return _IO.AHOutput_put(self, rec)

AHOutput_swigregister = _IO.AHOutput_swigregister
AHOutput_swigregister(AHOutput)


def read_one(arg1):
    """read_one(std::istream & arg1) -> AHRecord"""
    return _IO.read_one(arg1)

def write_one(rec, os):
    """write_one(AHRecord rec, std::ostream & os) -> bool"""
    return _IO.write_one(rec, os)
class LibmseedException(Core.StreamException):
    """Proxy of C++ Seiscomp::IO::LibmseedException class."""

    __swig_setmethods__ = {}
    for _s in [Core.StreamException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibmseedException, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.StreamException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LibmseedException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::LibmseedException self) -> LibmseedException
        __init__(Seiscomp::IO::LibmseedException self, string what) -> LibmseedException
        """
        this = _IO.new_LibmseedException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_LibmseedException
    __del__ = lambda self: None
LibmseedException_swigregister = _IO.LibmseedException_swigregister
LibmseedException_swigregister(LibmseedException)

class MSeedRecord(Core.Record):
    """Proxy of C++ Seiscomp::IO::MSeedRecord class."""

    __swig_setmethods__ = {}
    for _s in [Core.Record]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSeedRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Record]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MSeedRecord, name)
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.MSeedRecord_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.MSeedRecord_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(MSeedRecord self) -> char const *"""
        return _IO.MSeedRecord_className(self)


    def typeInfo(self):
        """typeInfo(MSeedRecord self) -> RTTI"""
        return _IO.MSeedRecord_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> MSeedRecord
        Cast(Seiscomp::Core::BaseObjectPtr o) -> MSeedRecord
        """
        return _IO.MSeedRecord_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> MSeedRecord
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MSeedRecord
        """
        return _IO.MSeedRecord_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)

    def __init__(self, *args):
        """
        __init__(Seiscomp::IO::MSeedRecord self, Seiscomp::Array::DataType dt, Seiscomp::Record::Hint h) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, Seiscomp::Array::DataType dt) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, MSRecord * msrec, Seiscomp::Array::DataType dt, Seiscomp::Record::Hint h) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, MSRecord * msrec, Seiscomp::Array::DataType dt) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, MSRecord * msrec) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, MSeedRecord ms) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, Record rec, int reclen=512) -> MSeedRecord
        __init__(Seiscomp::IO::MSeedRecord self, Record rec) -> MSeedRecord
        """
        this = _IO.new_MSeedRecord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_MSeedRecord
    __del__ = lambda self: None

    def setNetworkCode(self, net):
        """setNetworkCode(MSeedRecord self, string net)"""
        return _IO.MSeedRecord_setNetworkCode(self, net)


    def setStationCode(self, sta):
        """setStationCode(MSeedRecord self, string sta)"""
        return _IO.MSeedRecord_setStationCode(self, sta)


    def setLocationCode(self, loc):
        """setLocationCode(MSeedRecord self, string loc)"""
        return _IO.MSeedRecord_setLocationCode(self, loc)


    def setChannelCode(self, cha):
        """setChannelCode(MSeedRecord self, string cha)"""
        return _IO.MSeedRecord_setChannelCode(self, cha)


    def setStartTime(self, time):
        """setStartTime(MSeedRecord self, Time time)"""
        return _IO.MSeedRecord_setStartTime(self, time)


    def sequenceNumber(self):
        """sequenceNumber(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_sequenceNumber(self)


    def setSequenceNumber(self, seqno):
        """setSequenceNumber(MSeedRecord self, int seqno)"""
        return _IO.MSeedRecord_setSequenceNumber(self, seqno)


    def dataQuality(self):
        """dataQuality(MSeedRecord self) -> char"""
        return _IO.MSeedRecord_dataQuality(self)


    def setDataQuality(self, qual):
        """setDataQuality(MSeedRecord self, char qual)"""
        return _IO.MSeedRecord_setDataQuality(self, qual)


    def sampleRateFactor(self):
        """sampleRateFactor(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_sampleRateFactor(self)


    def setSampleRateFactor(self, srfact):
        """setSampleRateFactor(MSeedRecord self, int srfact)"""
        return _IO.MSeedRecord_setSampleRateFactor(self, srfact)


    def sampleRateMultiplier(self):
        """sampleRateMultiplier(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_sampleRateMultiplier(self)


    def setSampleRateMultiplier(self, srmult):
        """setSampleRateMultiplier(MSeedRecord self, int srmult)"""
        return _IO.MSeedRecord_setSampleRateMultiplier(self, srmult)


    def byteOrder(self):
        """byteOrder(MSeedRecord self) -> unsigned short"""
        return _IO.MSeedRecord_byteOrder(self)


    def encoding(self):
        """encoding(MSeedRecord self) -> unsigned short"""
        return _IO.MSeedRecord_encoding(self)


    def sampleRateNumerator(self):
        """sampleRateNumerator(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_sampleRateNumerator(self)


    def sampleRateDenominator(self):
        """sampleRateDenominator(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_sampleRateDenominator(self)


    def frameNumber(self):
        """frameNumber(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_frameNumber(self)


    def endTime(self):
        """endTime(MSeedRecord self) -> Time"""
        return _IO.MSeedRecord_endTime(self)


    def recordLength(self):
        """recordLength(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_recordLength(self)


    def leapSeconds(self):
        """leapSeconds(MSeedRecord self) -> int"""
        return _IO.MSeedRecord_leapSeconds(self)


    def data(self):
        """data(MSeedRecord self) -> Array"""
        return _IO.MSeedRecord_data(self)


    def raw(self):
        """raw(MSeedRecord self) -> Array"""
        return _IO.MSeedRecord_raw(self)


    def saveSpace(self):
        """saveSpace(MSeedRecord self)"""
        return _IO.MSeedRecord_saveSpace(self)


    def copy(self):
        """copy(MSeedRecord self) -> Record"""
        return _IO.MSeedRecord_copy(self)


    def useEncoding(self, flag):
        """useEncoding(MSeedRecord self, bool flag)"""
        return _IO.MSeedRecord_useEncoding(self, flag)


    def setOutputRecordLength(self, reclen):
        """setOutputRecordLength(MSeedRecord self, int reclen)"""
        return _IO.MSeedRecord_setOutputRecordLength(self, reclen)


    def read(self, arg2):
        """read(MSeedRecord self, std::istream & arg2)"""
        return _IO.MSeedRecord_read(self, arg2)


    def write(self, out):
        """write(MSeedRecord self, std::ostream & out)"""
        return _IO.MSeedRecord_write(self, out)

MSeedRecord_swigregister = _IO.MSeedRecord_swigregister
MSeedRecord_swigregister(MSeedRecord)

def MSeedRecord_ClassName():
    """MSeedRecord_ClassName() -> char const *"""
    return _IO.MSeedRecord_ClassName()

def MSeedRecord_TypeInfo():
    """MSeedRecord_TypeInfo() -> RTTI"""
    return _IO.MSeedRecord_TypeInfo()

def MSeedRecord_Cast(*args):
    """
    Cast(BaseObject o) -> MSeedRecord
    MSeedRecord_Cast(Seiscomp::Core::BaseObjectPtr o) -> MSeedRecord
    """
    return _IO.MSeedRecord_Cast(*args)

def MSeedRecord_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> MSeedRecord
    MSeedRecord_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MSeedRecord
    """
    return _IO.MSeedRecord_ConstCast(*args)

class FileRecordStream(RecordStream):
    """Proxy of C++ Seiscomp::RecordStream::File class."""

    __swig_setmethods__ = {}
    for _s in [RecordStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileRecordStream, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileRecordStream, name)
    __repr__ = _swig_repr
    Begin = _IO.FileRecordStream_Begin
    Current = _IO.FileRecordStream_Current
    End = _IO.FileRecordStream_End

    def __init__(self, *args):
        """
        File() -> FileRecordStream
        File(string name) -> FileRecordStream
        __init__(Seiscomp::RecordStream::File self, FileRecordStream f) -> FileRecordStream
        """
        this = _IO.new_FileRecordStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_FileRecordStream
    __del__ = lambda self: None

    def setSource(self, arg2):
        """setSource(FileRecordStream self, string arg2) -> bool"""
        return _IO.FileRecordStream_setSource(self, arg2)


    def addStream(self, *args):
        """
        addStream(FileRecordStream self, string net, string sta, string loc, string cha) -> bool
        addStream(FileRecordStream self, string net, string sta, string loc, string cha, Time stime, Time etime) -> bool
        """
        return _IO.FileRecordStream_addStream(self, *args)


    def setStartTime(self, stime):
        """setStartTime(FileRecordStream self, Time stime) -> bool"""
        return _IO.FileRecordStream_setStartTime(self, stime)


    def setEndTime(self, etime):
        """setEndTime(FileRecordStream self, Time etime) -> bool"""
        return _IO.FileRecordStream_setEndTime(self, etime)


    def setTimeWindow(self, w):
        """setTimeWindow(FileRecordStream self, Seiscomp::Core::TimeWindow const & w) -> bool"""
        return _IO.FileRecordStream_setTimeWindow(self, w)


    def setTimeout(self, seconds):
        """setTimeout(FileRecordStream self, int seconds) -> bool"""
        return _IO.FileRecordStream_setTimeout(self, seconds)


    def close(self):
        """close(FileRecordStream self)"""
        return _IO.FileRecordStream_close(self)


    def name(self):
        """name(FileRecordStream self) -> string"""
        return _IO.FileRecordStream_name(self)


    def stream(self):
        """stream(FileRecordStream self) -> std::istream &"""
        return _IO.FileRecordStream_stream(self)


    def filterRecord(self, arg2):
        """filterRecord(FileRecordStream self, Record arg2) -> bool"""
        return _IO.FileRecordStream_filterRecord(self, arg2)


    def tell(self):
        """tell(FileRecordStream self) -> size_t"""
        return _IO.FileRecordStream_tell(self)


    def seek(self, *args):
        """
        seek(FileRecordStream self, size_t pos) -> FileRecordStream
        seek(FileRecordStream self, int off, Seiscomp::RecordStream::File::SeekDir dir) -> FileRecordStream
        """
        return _IO.FileRecordStream_seek(self, *args)

FileRecordStream_swigregister = _IO.FileRecordStream_swigregister
FileRecordStream_swigregister(FileRecordStream)

class SeedlinkException(RecordStreamException):
    """Proxy of C++ Seiscomp::RecordStream::SeedlinkException class."""

    __swig_setmethods__ = {}
    for _s in [RecordStreamException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeedlinkException, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStreamException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeedlinkException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::SeedlinkException self) -> SeedlinkException
        __init__(Seiscomp::RecordStream::SeedlinkException self, string what) -> SeedlinkException
        """
        this = _IO.new_SeedlinkException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_SeedlinkException
    __del__ = lambda self: None
SeedlinkException_swigregister = _IO.SeedlinkException_swigregister
SeedlinkException_swigregister(SeedlinkException)

class SeedlinkCommandException(SeedlinkException):
    """Proxy of C++ Seiscomp::RecordStream::SeedlinkCommandException class."""

    __swig_setmethods__ = {}
    for _s in [SeedlinkException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeedlinkCommandException, name, value)
    __swig_getmethods__ = {}
    for _s in [SeedlinkException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeedlinkCommandException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::SeedlinkCommandException self) -> SeedlinkCommandException
        __init__(Seiscomp::RecordStream::SeedlinkCommandException self, string what) -> SeedlinkCommandException
        """
        this = _IO.new_SeedlinkCommandException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_SeedlinkCommandException
    __del__ = lambda self: None
SeedlinkCommandException_swigregister = _IO.SeedlinkCommandException_swigregister
SeedlinkCommandException_swigregister(SeedlinkCommandException)

class SLStreamIdx(_object):
    """Proxy of C++ Seiscomp::RecordStream::SLStreamIdx class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLStreamIdx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLStreamIdx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::SLStreamIdx self) -> SLStreamIdx
        __init__(Seiscomp::RecordStream::SLStreamIdx self, string net, string sta, string loc, string cha) -> SLStreamIdx
        __init__(Seiscomp::RecordStream::SLStreamIdx self, string net, string sta, string loc, string cha, Time stime, Time etime) -> SLStreamIdx
        """
        this = _IO.new_SLStreamIdx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, other):
        """__lt__(SLStreamIdx self, SLStreamIdx other) -> bool"""
        return _IO.SLStreamIdx___lt__(self, other)


    def __eq__(self, other):
        """__eq__(SLStreamIdx self, SLStreamIdx other) -> bool"""
        return _IO.SLStreamIdx___eq__(self, other)


    def network(self):
        """network(SLStreamIdx self) -> string"""
        return _IO.SLStreamIdx_network(self)


    def station(self):
        """station(SLStreamIdx self) -> string"""
        return _IO.SLStreamIdx_station(self)


    def channel(self):
        """channel(SLStreamIdx self) -> string"""
        return _IO.SLStreamIdx_channel(self)


    def location(self):
        """location(SLStreamIdx self) -> string"""
        return _IO.SLStreamIdx_location(self)


    def selector(self):
        """selector(SLStreamIdx self) -> string"""
        return _IO.SLStreamIdx_selector(self)


    def startTime(self):
        """startTime(SLStreamIdx self) -> Time"""
        return _IO.SLStreamIdx_startTime(self)


    def endTime(self):
        """endTime(SLStreamIdx self) -> Time"""
        return _IO.SLStreamIdx_endTime(self)


    def timestamp(self):
        """timestamp(SLStreamIdx self) -> Time"""
        return _IO.SLStreamIdx_timestamp(self)


    def setTimestamp(self, rectime):
        """setTimestamp(SLStreamIdx self, Time rectime)"""
        return _IO.SLStreamIdx_setTimestamp(self, rectime)

    __swig_destroy__ = _IO.delete_SLStreamIdx
    __del__ = lambda self: None
SLStreamIdx_swigregister = _IO.SLStreamIdx_swigregister
SLStreamIdx_swigregister(SLStreamIdx)

class SLConnection(RecordStream):
    """Proxy of C++ Seiscomp::RecordStream::SLConnection class."""

    __swig_setmethods__ = {}
    for _s in [RecordStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SLConnection, name)
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.SLConnection_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.SLConnection_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(SLConnection self) -> char const *"""
        return _IO.SLConnection_className(self)


    def typeInfo(self):
        """typeInfo(SLConnection self) -> RTTI"""
        return _IO.SLConnection_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> SLConnection
        Cast(Seiscomp::Core::BaseObjectPtr o) -> SLConnection
        """
        return _IO.SLConnection_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> SLConnection
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SLConnection
        """
        return _IO.SLConnection_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::SLConnection self) -> SLConnection
        __init__(Seiscomp::RecordStream::SLConnection self, string serverloc) -> SLConnection
        """
        this = _IO.new_SLConnection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_SLConnection
    __del__ = lambda self: None

    def setRecordType(self, arg2):
        """setRecordType(SLConnection self, char const * arg2) -> bool"""
        return _IO.SLConnection_setRecordType(self, arg2)


    def setSource(self, serverloc):
        """setSource(SLConnection self, string serverloc) -> bool"""
        return _IO.SLConnection_setSource(self, serverloc)


    def addStream(self, *args):
        """
        addStream(SLConnection self, string net, string sta, string loc, string cha) -> bool
        addStream(SLConnection self, string net, string sta, string loc, string cha, Time stime, Time etime) -> bool
        """
        return _IO.SLConnection_addStream(self, *args)


    def removeStream(self, net, sta, loc, cha):
        """removeStream(SLConnection self, string net, string sta, string loc, string cha) -> bool"""
        return _IO.SLConnection_removeStream(self, net, sta, loc, cha)


    def setStartTime(self, stime):
        """setStartTime(SLConnection self, Time stime) -> bool"""
        return _IO.SLConnection_setStartTime(self, stime)


    def setEndTime(self, etime):
        """setEndTime(SLConnection self, Time etime) -> bool"""
        return _IO.SLConnection_setEndTime(self, etime)


    def setTimeWindow(self, w):
        """setTimeWindow(SLConnection self, Seiscomp::Core::TimeWindow const & w) -> bool"""
        return _IO.SLConnection_setTimeWindow(self, w)


    def setTimeout(self, seconds):
        """setTimeout(SLConnection self, int seconds) -> bool"""
        return _IO.SLConnection_setTimeout(self, seconds)


    def clear(self):
        """clear(SLConnection self) -> bool"""
        return _IO.SLConnection_clear(self)


    def close(self):
        """close(SLConnection self)"""
        return _IO.SLConnection_close(self)


    def reconnect(self):
        """reconnect(SLConnection self) -> bool"""
        return _IO.SLConnection_reconnect(self)


    def stream(self):
        """stream(SLConnection self) -> std::istream &"""
        return _IO.SLConnection_stream(self)

SLConnection_swigregister = _IO.SLConnection_swigregister
SLConnection_swigregister(SLConnection)

def SLConnection_ClassName():
    """SLConnection_ClassName() -> char const *"""
    return _IO.SLConnection_ClassName()

def SLConnection_TypeInfo():
    """SLConnection_TypeInfo() -> RTTI"""
    return _IO.SLConnection_TypeInfo()

def SLConnection_Cast(*args):
    """
    Cast(BaseObject o) -> SLConnection
    SLConnection_Cast(Seiscomp::Core::BaseObjectPtr o) -> SLConnection
    """
    return _IO.SLConnection_Cast(*args)

def SLConnection_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> SLConnection
    SLConnection_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SLConnection
    """
    return _IO.SLConnection_ConstCast(*args)

class ArclinkException(RecordStreamException):
    """Proxy of C++ Seiscomp::RecordStream::Arclink::_private::ArclinkException class."""

    __swig_setmethods__ = {}
    for _s in [RecordStreamException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkException, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStreamException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::Arclink::_private::ArclinkException self) -> ArclinkException
        __init__(Seiscomp::RecordStream::Arclink::_private::ArclinkException self, string what) -> ArclinkException
        """
        this = _IO.new_ArclinkException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_ArclinkException
    __del__ = lambda self: None
ArclinkException_swigregister = _IO.ArclinkException_swigregister
ArclinkException_swigregister(ArclinkException)

class ArclinkCommandException(ArclinkException):
    """Proxy of C++ Seiscomp::RecordStream::Arclink::_private::ArclinkCommandException class."""

    __swig_setmethods__ = {}
    for _s in [ArclinkException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkCommandException, name, value)
    __swig_getmethods__ = {}
    for _s in [ArclinkException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkCommandException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::Arclink::_private::ArclinkCommandException self) -> ArclinkCommandException
        __init__(Seiscomp::RecordStream::Arclink::_private::ArclinkCommandException self, string what) -> ArclinkCommandException
        """
        this = _IO.new_ArclinkCommandException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_ArclinkCommandException
    __del__ = lambda self: None
ArclinkCommandException_swigregister = _IO.ArclinkCommandException_swigregister
ArclinkCommandException_swigregister(ArclinkCommandException)

class ArclinkConnection(RecordStream):
    """Proxy of C++ Seiscomp::RecordStream::Arclink::_private::ArclinkConnection class."""

    __swig_setmethods__ = {}
    for _s in [RecordStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkConnection, name)
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.ArclinkConnection_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.ArclinkConnection_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(ArclinkConnection self) -> char const *"""
        return _IO.ArclinkConnection_className(self)


    def typeInfo(self):
        """typeInfo(ArclinkConnection self) -> RTTI"""
        return _IO.ArclinkConnection_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkConnection
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkConnection
        """
        return _IO.ArclinkConnection_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkConnection
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkConnection
        """
        return _IO.ArclinkConnection_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::Arclink::_private::ArclinkConnection self) -> ArclinkConnection
        __init__(Seiscomp::RecordStream::Arclink::_private::ArclinkConnection self, string serverloc) -> ArclinkConnection
        """
        this = _IO.new_ArclinkConnection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_ArclinkConnection
    __del__ = lambda self: None

    def setRecordType(self, arg2):
        """setRecordType(ArclinkConnection self, char const * arg2) -> bool"""
        return _IO.ArclinkConnection_setRecordType(self, arg2)


    def setSource(self, serverloc):
        """setSource(ArclinkConnection self, string serverloc) -> bool"""
        return _IO.ArclinkConnection_setSource(self, serverloc)


    def setUser(self, name, password):
        """setUser(ArclinkConnection self, string name, string password) -> bool"""
        return _IO.ArclinkConnection_setUser(self, name, password)


    def addStream(self, *args):
        """
        addStream(ArclinkConnection self, string net, string sta, string loc, string cha) -> bool
        addStream(ArclinkConnection self, string net, string sta, string loc, string cha, Time stime, Time etime) -> bool
        """
        return _IO.ArclinkConnection_addStream(self, *args)


    def removeStream(self, net, sta, loc, cha):
        """removeStream(ArclinkConnection self, string net, string sta, string loc, string cha) -> bool"""
        return _IO.ArclinkConnection_removeStream(self, net, sta, loc, cha)


    def setStartTime(self, stime):
        """setStartTime(ArclinkConnection self, Time stime) -> bool"""
        return _IO.ArclinkConnection_setStartTime(self, stime)


    def setEndTime(self, etime):
        """setEndTime(ArclinkConnection self, Time etime) -> bool"""
        return _IO.ArclinkConnection_setEndTime(self, etime)


    def setTimeWindow(self, w):
        """setTimeWindow(ArclinkConnection self, Seiscomp::Core::TimeWindow const & w) -> bool"""
        return _IO.ArclinkConnection_setTimeWindow(self, w)


    def setTimeout(self, seconds):
        """setTimeout(ArclinkConnection self, int seconds) -> bool"""
        return _IO.ArclinkConnection_setTimeout(self, seconds)


    def clear(self):
        """clear(ArclinkConnection self) -> bool"""
        return _IO.ArclinkConnection_clear(self)


    def close(self):
        """close(ArclinkConnection self)"""
        return _IO.ArclinkConnection_close(self)


    def reconnect(self):
        """reconnect(ArclinkConnection self) -> bool"""
        return _IO.ArclinkConnection_reconnect(self)


    def stream(self):
        """stream(ArclinkConnection self) -> std::istream &"""
        return _IO.ArclinkConnection_stream(self)

ArclinkConnection_swigregister = _IO.ArclinkConnection_swigregister
ArclinkConnection_swigregister(ArclinkConnection)

def ArclinkConnection_ClassName():
    """ArclinkConnection_ClassName() -> char const *"""
    return _IO.ArclinkConnection_ClassName()

def ArclinkConnection_TypeInfo():
    """ArclinkConnection_TypeInfo() -> RTTI"""
    return _IO.ArclinkConnection_TypeInfo()

def ArclinkConnection_Cast(*args):
    """
    Cast(BaseObject o) -> ArclinkConnection
    ArclinkConnection_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkConnection
    """
    return _IO.ArclinkConnection_Cast(*args)

def ArclinkConnection_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> ArclinkConnection
    ArclinkConnection_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkConnection
    """
    return _IO.ArclinkConnection_ConstCast(*args)

class CombinedConnection(RecordStream):
    """Proxy of C++ Seiscomp::RecordStream::Combined::_private::CombinedConnection class."""

    __swig_setmethods__ = {}
    for _s in [RecordStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombinedConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombinedConnection, name)
    __repr__ = _swig_repr

    def ClassName():
        """ClassName() -> char const *"""
        return _IO.CombinedConnection_ClassName()

    ClassName = staticmethod(ClassName)

    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _IO.CombinedConnection_TypeInfo()

    TypeInfo = staticmethod(TypeInfo)

    def className(self):
        """className(CombinedConnection self) -> char const *"""
        return _IO.CombinedConnection_className(self)


    def typeInfo(self):
        """typeInfo(CombinedConnection self) -> RTTI"""
        return _IO.CombinedConnection_typeInfo(self)


    def Cast(*args):
        """
        Cast(BaseObject o) -> CombinedConnection
        Cast(Seiscomp::Core::BaseObjectPtr o) -> CombinedConnection
        """
        return _IO.CombinedConnection_Cast(*args)

    Cast = staticmethod(Cast)

    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> CombinedConnection
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> CombinedConnection
        """
        return _IO.CombinedConnection_ConstCast(*args)

    ConstCast = staticmethod(ConstCast)

    def __init__(self, *args):
        """
        __init__(Seiscomp::RecordStream::Combined::_private::CombinedConnection self) -> CombinedConnection
        __init__(Seiscomp::RecordStream::Combined::_private::CombinedConnection self, string serverloc) -> CombinedConnection
        """
        this = _IO.new_CombinedConnection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_CombinedConnection
    __del__ = lambda self: None

    def setRecordType(self, arg2):
        """setRecordType(CombinedConnection self, char const * arg2) -> bool"""
        return _IO.CombinedConnection_setRecordType(self, arg2)


    def setSource(self, serverloc):
        """setSource(CombinedConnection self, string serverloc) -> bool"""
        return _IO.CombinedConnection_setSource(self, serverloc)


    def addStream(self, *args):
        """
        addStream(CombinedConnection self, string net, string sta, string loc, string cha) -> bool
        addStream(CombinedConnection self, string net, string sta, string loc, string cha, Time stime, Time etime) -> bool
        """
        return _IO.CombinedConnection_addStream(self, *args)


    def setStartTime(self, stime):
        """setStartTime(CombinedConnection self, Time stime) -> bool"""
        return _IO.CombinedConnection_setStartTime(self, stime)


    def setEndTime(self, etime):
        """setEndTime(CombinedConnection self, Time etime) -> bool"""
        return _IO.CombinedConnection_setEndTime(self, etime)


    def setTimeWindow(self, w):
        """setTimeWindow(CombinedConnection self, Seiscomp::Core::TimeWindow const & w) -> bool"""
        return _IO.CombinedConnection_setTimeWindow(self, w)


    def setTimeout(self, seconds):
        """setTimeout(CombinedConnection self, int seconds) -> bool"""
        return _IO.CombinedConnection_setTimeout(self, seconds)


    def close(self):
        """close(CombinedConnection self)"""
        return _IO.CombinedConnection_close(self)


    def stream(self):
        """stream(CombinedConnection self) -> std::istream &"""
        return _IO.CombinedConnection_stream(self)


    def createRecord(self, arg2, arg3):
        """createRecord(CombinedConnection self, Seiscomp::Array::DataType arg2, Seiscomp::Record::Hint arg3) -> Record"""
        return _IO.CombinedConnection_createRecord(self, arg2, arg3)

CombinedConnection_swigregister = _IO.CombinedConnection_swigregister
CombinedConnection_swigregister(CombinedConnection)

def CombinedConnection_ClassName():
    """CombinedConnection_ClassName() -> char const *"""
    return _IO.CombinedConnection_ClassName()

def CombinedConnection_TypeInfo():
    """CombinedConnection_TypeInfo() -> RTTI"""
    return _IO.CombinedConnection_TypeInfo()

def CombinedConnection_Cast(*args):
    """
    Cast(BaseObject o) -> CombinedConnection
    CombinedConnection_Cast(Seiscomp::Core::BaseObjectPtr o) -> CombinedConnection
    """
    return _IO.CombinedConnection_Cast(*args)

def CombinedConnection_ConstCast(*args):
    """
    ConstCast(BaseObject o) -> CombinedConnection
    CombinedConnection_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> CombinedConnection
    """
    return _IO.CombinedConnection_ConstCast(*args)

class RecordIIRFilterF(RecordFilterInterface):
    """Proxy of C++ Seiscomp::IO::RecordIIRFilter<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordIIRFilterF, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordIIRFilterF, name)
    __repr__ = _swig_repr

    def __init__(self, filter=None):
        """
        __init__(Seiscomp::IO::RecordIIRFilter<(float)> self, InPlaceFilterF filter=None) -> RecordIIRFilterF
        __init__(Seiscomp::IO::RecordIIRFilter<(float)> self) -> RecordIIRFilterF
        """
        this = _IO.new_RecordIIRFilterF(filter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordIIRFilterF
    __del__ = lambda self: None

    def setIIR(self, f):
        """setIIR(RecordIIRFilterF self, InPlaceFilterF f)"""
        return _IO.RecordIIRFilterF_setIIR(self, f)


    def filter(self, *args):
        """
        filter(RecordIIRFilterF self) -> InPlaceFilterF
        filter(RecordIIRFilterF self) -> InPlaceFilterF
        """
        return _IO.RecordIIRFilterF_filter(self, *args)


    def apply(self, rec):
        """apply(RecordIIRFilterF self, GenericRecord rec) -> bool"""
        return _IO.RecordIIRFilterF_apply(self, rec)


    def __nonzero__(self):
        return _IO.RecordIIRFilterF___nonzero__(self)
    __bool__ = __nonzero__



    def feed(self, rec):
        """feed(RecordIIRFilterF self, Record rec) -> Record"""
        return _IO.RecordIIRFilterF_feed(self, rec)


    def flush(self):
        """flush(RecordIIRFilterF self) -> Record"""
        return _IO.RecordIIRFilterF_flush(self)


    def reset(self):
        """reset(RecordIIRFilterF self)"""
        return _IO.RecordIIRFilterF_reset(self)


    def clone(self):
        """clone(RecordIIRFilterF self) -> RecordFilterInterface"""
        return _IO.RecordIIRFilterF_clone(self)

RecordIIRFilterF_swigregister = _IO.RecordIIRFilterF_swigregister
RecordIIRFilterF_swigregister(RecordIIRFilterF)

class RecordIIRFilterD(RecordFilterInterface):
    """Proxy of C++ Seiscomp::IO::RecordIIRFilter<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordIIRFilterD, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordFilterInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordIIRFilterD, name)
    __repr__ = _swig_repr

    def __init__(self, filter=None):
        """
        __init__(Seiscomp::IO::RecordIIRFilter<(double)> self, InPlaceFilterD filter=None) -> RecordIIRFilterD
        __init__(Seiscomp::IO::RecordIIRFilter<(double)> self) -> RecordIIRFilterD
        """
        this = _IO.new_RecordIIRFilterD(filter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordIIRFilterD
    __del__ = lambda self: None

    def setIIR(self, f):
        """setIIR(RecordIIRFilterD self, InPlaceFilterD f)"""
        return _IO.RecordIIRFilterD_setIIR(self, f)


    def filter(self, *args):
        """
        filter(RecordIIRFilterD self) -> InPlaceFilterD
        filter(RecordIIRFilterD self) -> InPlaceFilterD
        """
        return _IO.RecordIIRFilterD_filter(self, *args)


    def apply(self, rec):
        """apply(RecordIIRFilterD self, GenericRecord rec) -> bool"""
        return _IO.RecordIIRFilterD_apply(self, rec)


    def __nonzero__(self):
        return _IO.RecordIIRFilterD___nonzero__(self)
    __bool__ = __nonzero__



    def feed(self, rec):
        """feed(RecordIIRFilterD self, Record rec) -> Record"""
        return _IO.RecordIIRFilterD_feed(self, rec)


    def flush(self):
        """flush(RecordIIRFilterD self) -> Record"""
        return _IO.RecordIIRFilterD_flush(self)


    def reset(self):
        """reset(RecordIIRFilterD self)"""
        return _IO.RecordIIRFilterD_reset(self)


    def clone(self):
        """clone(RecordIIRFilterD self) -> RecordFilterInterface"""
        return _IO.RecordIIRFilterD_clone(self)

RecordIIRFilterD_swigregister = _IO.RecordIIRFilterD_swigregister
RecordIIRFilterD_swigregister(RecordIIRFilterD)

class RecordResamplerF(RecordResamplerBase):
    """Proxy of C++ Seiscomp::IO::RecordResampler<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [RecordResamplerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordResamplerF, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordResamplerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordResamplerF, name)
    __repr__ = _swig_repr

    def __init__(self, targetFrequency, fp=0.7, fs=0.9, coeffScale=10, lanzcosWidth=3):
        """
        __init__(Seiscomp::IO::RecordResampler<(float)> self, double targetFrequency, double fp=0.7, double fs=0.9, double coeffScale=10, int lanzcosWidth=3) -> RecordResamplerF
        __init__(Seiscomp::IO::RecordResampler<(float)> self, double targetFrequency, double fp=0.7, double fs=0.9, double coeffScale=10) -> RecordResamplerF
        __init__(Seiscomp::IO::RecordResampler<(float)> self, double targetFrequency, double fp=0.7, double fs=0.9) -> RecordResamplerF
        __init__(Seiscomp::IO::RecordResampler<(float)> self, double targetFrequency, double fp=0.7) -> RecordResamplerF
        __init__(Seiscomp::IO::RecordResampler<(float)> self, double targetFrequency) -> RecordResamplerF
        """
        this = _IO.new_RecordResamplerF(targetFrequency, fp, fs, coeffScale, lanzcosWidth)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordResamplerF
    __del__ = lambda self: None

    def feed(self, record):
        """feed(RecordResamplerF self, Record record) -> Record"""
        return _IO.RecordResamplerF_feed(self, record)


    def reset(self):
        """reset(RecordResamplerF self)"""
        return _IO.RecordResamplerF_reset(self)


    def clone(self):
        """clone(RecordResamplerF self) -> RecordFilterInterface"""
        return _IO.RecordResamplerF_clone(self)

RecordResamplerF_swigregister = _IO.RecordResamplerF_swigregister
RecordResamplerF_swigregister(RecordResamplerF)

class RecordResamplerD(RecordResamplerBase):
    """Proxy of C++ Seiscomp::IO::RecordResampler<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [RecordResamplerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordResamplerD, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordResamplerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordResamplerD, name)
    __repr__ = _swig_repr

    def __init__(self, targetFrequency, fp=0.7, fs=0.9, coeffScale=10, lanzcosWidth=3):
        """
        __init__(Seiscomp::IO::RecordResampler<(double)> self, double targetFrequency, double fp=0.7, double fs=0.9, double coeffScale=10, int lanzcosWidth=3) -> RecordResamplerD
        __init__(Seiscomp::IO::RecordResampler<(double)> self, double targetFrequency, double fp=0.7, double fs=0.9, double coeffScale=10) -> RecordResamplerD
        __init__(Seiscomp::IO::RecordResampler<(double)> self, double targetFrequency, double fp=0.7, double fs=0.9) -> RecordResamplerD
        __init__(Seiscomp::IO::RecordResampler<(double)> self, double targetFrequency, double fp=0.7) -> RecordResamplerD
        __init__(Seiscomp::IO::RecordResampler<(double)> self, double targetFrequency) -> RecordResamplerD
        """
        this = _IO.new_RecordResamplerD(targetFrequency, fp, fs, coeffScale, lanzcosWidth)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordResamplerD
    __del__ = lambda self: None

    def feed(self, record):
        """feed(RecordResamplerD self, Record record) -> Record"""
        return _IO.RecordResamplerD_feed(self, record)


    def reset(self):
        """reset(RecordResamplerD self)"""
        return _IO.RecordResamplerD_reset(self)


    def clone(self):
        """clone(RecordResamplerD self) -> RecordFilterInterface"""
        return _IO.RecordResamplerD_clone(self)

RecordResamplerD_swigregister = _IO.RecordResamplerD_swigregister
RecordResamplerD_swigregister(RecordResamplerD)

class RecordResamplerI(RecordResamplerBase):
    """Proxy of C++ Seiscomp::IO::RecordResampler<(int)> class."""

    __swig_setmethods__ = {}
    for _s in [RecordResamplerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordResamplerI, name, value)
    __swig_getmethods__ = {}
    for _s in [RecordResamplerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordResamplerI, name)
    __repr__ = _swig_repr

    def __init__(self, targetFrequency, fp=0.7, fs=0.9, coeffScale=10, lanzcosWidth=3):
        """
        __init__(Seiscomp::IO::RecordResampler<(int)> self, double targetFrequency, double fp=0.7, double fs=0.9, double coeffScale=10, int lanzcosWidth=3) -> RecordResamplerI
        __init__(Seiscomp::IO::RecordResampler<(int)> self, double targetFrequency, double fp=0.7, double fs=0.9, double coeffScale=10) -> RecordResamplerI
        __init__(Seiscomp::IO::RecordResampler<(int)> self, double targetFrequency, double fp=0.7, double fs=0.9) -> RecordResamplerI
        __init__(Seiscomp::IO::RecordResampler<(int)> self, double targetFrequency, double fp=0.7) -> RecordResamplerI
        __init__(Seiscomp::IO::RecordResampler<(int)> self, double targetFrequency) -> RecordResamplerI
        """
        this = _IO.new_RecordResamplerI(targetFrequency, fp, fs, coeffScale, lanzcosWidth)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IO.delete_RecordResamplerI
    __del__ = lambda self: None

    def feed(self, record):
        """feed(RecordResamplerI self, Record record) -> Record"""
        return _IO.RecordResamplerI_feed(self, record)


    def reset(self):
        """reset(RecordResamplerI self)"""
        return _IO.RecordResamplerI_reset(self)


    def clone(self):
        """clone(RecordResamplerI self) -> RecordFilterInterface"""
        return _IO.RecordResamplerI_clone(self)

RecordResamplerI_swigregister = _IO.RecordResamplerI_swigregister
RecordResamplerI_swigregister(RecordResamplerI)

# This file is compatible with both classic and new-style classes.


