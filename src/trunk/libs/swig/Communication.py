# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Communication')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Communication')
    _Communication = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Communication', [dirname(__file__)])
        except ImportError:
            import _Communication
            return _Communication
        try:
            _mod = imp.load_module('_Communication', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Communication = swig_import_helper()
    del swig_import_helper
else:
    import _Communication
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import Core
class Protocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Protocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Protocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PRIORITY_DEFAULT = _Communication.Protocol_PRIORITY_DEFAULT
    PRIORITY_HIGH = _Communication.Protocol_PRIORITY_HIGH
    PRIORITY_MEDIUM = _Communication.Protocol_PRIORITY_MEDIUM
    PRIORITY_LOW = _Communication.Protocol_PRIORITY_LOW
    CP_QUANTITY = _Communication.Protocol_CP_QUANTITY
    TYPE_DEFAULT = _Communication.Protocol_TYPE_DEFAULT
    TYPE_ONE = _Communication.Protocol_TYPE_ONE
    TYPE_TWO = _Communication.Protocol_TYPE_TWO
    TYPE_THREE = _Communication.Protocol_TYPE_THREE
    CT_QUANTITY = _Communication.Protocol_CT_QUANTITY
    UNDEFINED_SERVICE_MSG = _Communication.Protocol_UNDEFINED_SERVICE_MSG
    CONNECT_GROUP_MSG = _Communication.Protocol_CONNECT_GROUP_MSG
    CONNECT_GROUP_REJECT_MSG = _Communication.Protocol_CONNECT_GROUP_REJECT_MSG
    ADMIN_REJECT_MSG = _Communication.Protocol_ADMIN_REJECT_MSG
    CONNECT_GROUP_OK_MSG = _Communication.Protocol_CONNECT_GROUP_OK_MSG
    JOIN_GROUP_MSG = _Communication.Protocol_JOIN_GROUP_MSG
    LEAVE_GROUP_MSG = _Communication.Protocol_LEAVE_GROUP_MSG
    CLIENT_DISCONNECTED_MSG = _Communication.Protocol_CLIENT_DISCONNECTED_MSG
    INVALID_GROUP_MSG = _Communication.Protocol_INVALID_GROUP_MSG
    MASTER_DISCONNECTED_MSG = _Communication.Protocol_MASTER_DISCONNECTED_MSG
    ARCHIVE_SERVICE_MSG = _Communication.Protocol_ARCHIVE_SERVICE_MSG
    ARCHIVE_REQUEST_MSG = _Communication.Protocol_ARCHIVE_REQUEST_MSG
    INVAlID_ARCHIVE_REQUEST_MSG = _Communication.Protocol_INVAlID_ARCHIVE_REQUEST_MSG
    INVALID_PROTOCOL_MSG = _Communication.Protocol_INVALID_PROTOCOL_MSG
    STATE_OF_HEALTH_CMD_MSG = _Communication.Protocol_STATE_OF_HEALTH_CMD_MSG
    STATE_OF_HEALTH_RESPONSE_MSG = _Communication.Protocol_STATE_OF_HEALTH_RESPONSE_MSG
    REJECTED_CMD_MSG = _Communication.Protocol_REJECTED_CMD_MSG
    LIST_CONNECTED_CLIENTS_CMD_MSG = _Communication.Protocol_LIST_CONNECTED_CLIENTS_CMD_MSG
    LIST_CONNECTED_CLIENTS_RESPONSE_MSG = _Communication.Protocol_LIST_CONNECTED_CLIENTS_RESPONSE_MSG
    CLIENT_DISCONNECT_CMD_MSG = _Communication.Protocol_CLIENT_DISCONNECT_CMD_MSG
    EMT_QUANTITY = _Communication.Protocol_EMT_QUANTITY
    UNDEFINED_MSG = _Communication.Protocol_UNDEFINED_MSG
    DATA_MSG = _Communication.Protocol_DATA_MSG
    ARCHIVE_MSG = _Communication.Protocol_ARCHIVE_MSG
    MT_QUANTITY = _Communication.Protocol_MT_QUANTITY
    CONTENT_BINARY = _Communication.Protocol_CONTENT_BINARY
    CONTENT_XML = _Communication.Protocol_CONTENT_XML
    CONTENT_UNCOMPRESSED_XML = _Communication.Protocol_CONTENT_UNCOMPRESSED_XML
    CONTENT_IMPORTED_XML = _Communication.Protocol_CONTENT_IMPORTED_XML
    CONTENT_BSON = _Communication.Protocol_CONTENT_BSON
    CONTENT_UNCOMPRESSED_BSON = _Communication.Protocol_CONTENT_UNCOMPRESSED_BSON
    CONTENT_JSON = _Communication.Protocol_CONTENT_JSON
    CONTENT_UNCOMPRESSED_JSON = _Communication.Protocol_CONTENT_UNCOMPRESSED_JSON
    MCT_QUANTITY = _Communication.Protocol_MCT_QUANTITY
    if _newclass:
        MsgTypeToString = staticmethod(_Communication.Protocol_MsgTypeToString)
    else:
        MsgTypeToString = _Communication.Protocol_MsgTypeToString
    if _newclass:
        ClientTypeToString = staticmethod(_Communication.Protocol_ClientTypeToString)
    else:
        ClientTypeToString = _Communication.Protocol_ClientTypeToString
    if _newclass:
        ClientPriorityToString = staticmethod(_Communication.Protocol_ClientPriorityToString)
    else:
        ClientPriorityToString = _Communication.Protocol_ClientPriorityToString
    MAX_SEQ_NUM = _Communication.Protocol_MAX_SEQ_NUM
    MASTER_ARCHIVE_SIZE = _Communication.Protocol_MASTER_ARCHIVE_SIZE
    MAX_GROUPS = _Communication.Protocol_MAX_GROUPS
    STD_MSG_LEN = _Communication.Protocol_STD_MSG_LEN
    __swig_destroy__ = _Communication.delete_Protocol
    __del__ = lambda self: None
Protocol_swigregister = _Communication.Protocol_swigregister
Protocol_swigregister(Protocol)

def Protocol_MsgTypeToString(msgType):
    return _Communication.Protocol_MsgTypeToString(msgType)
Protocol_MsgTypeToString = _Communication.Protocol_MsgTypeToString

def Protocol_ClientTypeToString(type):
    return _Communication.Protocol_ClientTypeToString(type)
Protocol_ClientTypeToString = _Communication.Protocol_ClientTypeToString

def Protocol_ClientPriorityToString(priority):
    return _Communication.Protocol_ClientPriorityToString(priority)
Protocol_ClientPriorityToString = _Communication.Protocol_ClientPriorityToString
cvar = _Communication.cvar
Protocol.PROTOCOL_VERSION = _Communication.cvar.Protocol_PROTOCOL_VERSION
Protocol.PROTOCOL_VERSION_V1_0 = _Communication.cvar.Protocol_PROTOCOL_VERSION_V1_0
Protocol.PROTOCOL_VERSION_V1_1 = _Communication.cvar.Protocol_PROTOCOL_VERSION_V1_1
Protocol.HEADER_GROUP_TAG = _Communication.cvar.Protocol_HEADER_GROUP_TAG
Protocol.HEADER_SERVER_VERSION_TAG = _Communication.cvar.Protocol_HEADER_SERVER_VERSION_TAG
Protocol.HEADER_SCHEMA_VERSION_TAG = _Communication.cvar.Protocol_HEADER_SCHEMA_VERSION_TAG
Protocol.MASTER_CLIENT_NAME = _Communication.cvar.Protocol_MASTER_CLIENT_NAME
Protocol.MASTER_GROUP = _Communication.cvar.Protocol_MASTER_GROUP
Protocol.LISTENER_GROUP = _Communication.cvar.Protocol_LISTENER_GROUP
Protocol.IMPORT_GROUP = _Communication.cvar.Protocol_IMPORT_GROUP
Protocol.ADMIN_GROUP = _Communication.cvar.Protocol_ADMIN_GROUP
Protocol.STATUS_GROUP = _Communication.cvar.Protocol_STATUS_GROUP
Protocol.DEFAULT_ADMIN_CLIENT_NAME = _Communication.cvar.Protocol_DEFAULT_ADMIN_CLIENT_NAME

class SyncRequestMessage(Core.Message):
    __swig_setmethods__ = {}
    for _s in [Core.Message]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyncRequestMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SyncRequestMessage, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.SyncRequestMessage_ClassName)
    else:
        ClassName = _Communication.SyncRequestMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.SyncRequestMessage_TypeInfo)
    else:
        TypeInfo = _Communication.SyncRequestMessage_TypeInfo

    def className(self):
        return _Communication.SyncRequestMessage_className(self)

    def typeInfo(self):
        return _Communication.SyncRequestMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.SyncRequestMessage_Cast)
    else:
        Cast = _Communication.SyncRequestMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.SyncRequestMessage_ConstCast)
    else:
        ConstCast = _Communication.SyncRequestMessage_ConstCast

    def serialize(self, ar):
        return _Communication.SyncRequestMessage_serialize(self, ar)

    def __init__(self, *args):
        this = _Communication.new_SyncRequestMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Communication.SyncRequestMessage_empty(self)

    def ID(self):
        return _Communication.SyncRequestMessage_ID(self)
    __swig_destroy__ = _Communication.delete_SyncRequestMessage
    __del__ = lambda self: None
SyncRequestMessage_swigregister = _Communication.SyncRequestMessage_swigregister
SyncRequestMessage_swigregister(SyncRequestMessage)

def SyncRequestMessage_ClassName():
    return _Communication.SyncRequestMessage_ClassName()
SyncRequestMessage_ClassName = _Communication.SyncRequestMessage_ClassName

def SyncRequestMessage_TypeInfo():
    return _Communication.SyncRequestMessage_TypeInfo()
SyncRequestMessage_TypeInfo = _Communication.SyncRequestMessage_TypeInfo

def SyncRequestMessage_Cast(*args):
    return _Communication.SyncRequestMessage_Cast(*args)
SyncRequestMessage_Cast = _Communication.SyncRequestMessage_Cast

def SyncRequestMessage_ConstCast(*args):
    return _Communication.SyncRequestMessage_ConstCast(*args)
SyncRequestMessage_ConstCast = _Communication.SyncRequestMessage_ConstCast

class SyncResponseMessage(Core.Message):
    __swig_setmethods__ = {}
    for _s in [Core.Message]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyncResponseMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SyncResponseMessage, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.SyncResponseMessage_ClassName)
    else:
        ClassName = _Communication.SyncResponseMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.SyncResponseMessage_TypeInfo)
    else:
        TypeInfo = _Communication.SyncResponseMessage_TypeInfo

    def className(self):
        return _Communication.SyncResponseMessage_className(self)

    def typeInfo(self):
        return _Communication.SyncResponseMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.SyncResponseMessage_Cast)
    else:
        Cast = _Communication.SyncResponseMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.SyncResponseMessage_ConstCast)
    else:
        ConstCast = _Communication.SyncResponseMessage_ConstCast

    def serialize(self, ar):
        return _Communication.SyncResponseMessage_serialize(self, ar)

    def __init__(self, *args):
        this = _Communication.new_SyncResponseMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _Communication.SyncResponseMessage_empty(self)

    def ID(self):
        return _Communication.SyncResponseMessage_ID(self)
    __swig_destroy__ = _Communication.delete_SyncResponseMessage
    __del__ = lambda self: None
SyncResponseMessage_swigregister = _Communication.SyncResponseMessage_swigregister
SyncResponseMessage_swigregister(SyncResponseMessage)

def SyncResponseMessage_ClassName():
    return _Communication.SyncResponseMessage_ClassName()
SyncResponseMessage_ClassName = _Communication.SyncResponseMessage_ClassName

def SyncResponseMessage_TypeInfo():
    return _Communication.SyncResponseMessage_TypeInfo()
SyncResponseMessage_TypeInfo = _Communication.SyncResponseMessage_TypeInfo

def SyncResponseMessage_Cast(*args):
    return _Communication.SyncResponseMessage_Cast(*args)
SyncResponseMessage_Cast = _Communication.SyncResponseMessage_Cast

def SyncResponseMessage_ConstCast(*args):
    return _Communication.SyncResponseMessage_ConstCast(*args)
SyncResponseMessage_ConstCast = _Communication.SyncResponseMessage_ConstCast

class ServiceRequestMessage(Core.Message):
    __swig_setmethods__ = {}
    for _s in [Core.Message]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceRequestMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceRequestMessage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.ServiceRequestMessage_ClassName)
    else:
        ClassName = _Communication.ServiceRequestMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.ServiceRequestMessage_TypeInfo)
    else:
        TypeInfo = _Communication.ServiceRequestMessage_TypeInfo

    def className(self):
        return _Communication.ServiceRequestMessage_className(self)

    def typeInfo(self):
        return _Communication.ServiceRequestMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.ServiceRequestMessage_Cast)
    else:
        Cast = _Communication.ServiceRequestMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.ServiceRequestMessage_ConstCast)
    else:
        ConstCast = _Communication.ServiceRequestMessage_ConstCast

    def serialize(self, ar):
        return _Communication.ServiceRequestMessage_serialize(self, ar)

    def service(self):
        return _Communication.ServiceRequestMessage_service(self)
    __swig_destroy__ = _Communication.delete_ServiceRequestMessage
    __del__ = lambda self: None
ServiceRequestMessage_swigregister = _Communication.ServiceRequestMessage_swigregister
ServiceRequestMessage_swigregister(ServiceRequestMessage)

def ServiceRequestMessage_ClassName():
    return _Communication.ServiceRequestMessage_ClassName()
ServiceRequestMessage_ClassName = _Communication.ServiceRequestMessage_ClassName

def ServiceRequestMessage_TypeInfo():
    return _Communication.ServiceRequestMessage_TypeInfo()
ServiceRequestMessage_TypeInfo = _Communication.ServiceRequestMessage_TypeInfo

def ServiceRequestMessage_Cast(*args):
    return _Communication.ServiceRequestMessage_Cast(*args)
ServiceRequestMessage_Cast = _Communication.ServiceRequestMessage_Cast

def ServiceRequestMessage_ConstCast(*args):
    return _Communication.ServiceRequestMessage_ConstCast(*args)
ServiceRequestMessage_ConstCast = _Communication.ServiceRequestMessage_ConstCast

class ServiceProvideMessage(Core.Message):
    __swig_setmethods__ = {}
    for _s in [Core.Message]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceProvideMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceProvideMessage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.ServiceProvideMessage_ClassName)
    else:
        ClassName = _Communication.ServiceProvideMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.ServiceProvideMessage_TypeInfo)
    else:
        TypeInfo = _Communication.ServiceProvideMessage_TypeInfo

    def className(self):
        return _Communication.ServiceProvideMessage_className(self)

    def typeInfo(self):
        return _Communication.ServiceProvideMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.ServiceProvideMessage_Cast)
    else:
        Cast = _Communication.ServiceProvideMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.ServiceProvideMessage_ConstCast)
    else:
        ConstCast = _Communication.ServiceProvideMessage_ConstCast

    def serialize(self, ar):
        return _Communication.ServiceProvideMessage_serialize(self, ar)

    def service(self):
        return _Communication.ServiceProvideMessage_service(self)

    def parameters(self):
        return _Communication.ServiceProvideMessage_parameters(self)

    def empty(self):
        return _Communication.ServiceProvideMessage_empty(self)
    __swig_destroy__ = _Communication.delete_ServiceProvideMessage
    __del__ = lambda self: None
ServiceProvideMessage_swigregister = _Communication.ServiceProvideMessage_swigregister
ServiceProvideMessage_swigregister(ServiceProvideMessage)

def ServiceProvideMessage_ClassName():
    return _Communication.ServiceProvideMessage_ClassName()
ServiceProvideMessage_ClassName = _Communication.ServiceProvideMessage_ClassName

def ServiceProvideMessage_TypeInfo():
    return _Communication.ServiceProvideMessage_TypeInfo()
ServiceProvideMessage_TypeInfo = _Communication.ServiceProvideMessage_TypeInfo

def ServiceProvideMessage_Cast(*args):
    return _Communication.ServiceProvideMessage_Cast(*args)
ServiceProvideMessage_Cast = _Communication.ServiceProvideMessage_Cast

def ServiceProvideMessage_ConstCast(*args):
    return _Communication.ServiceProvideMessage_ConstCast(*args)
ServiceProvideMessage_ConstCast = _Communication.ServiceProvideMessage_ConstCast

class DatabaseRequestMessage(ServiceRequestMessage):
    __swig_setmethods__ = {}
    for _s in [ServiceRequestMessage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseRequestMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceRequestMessage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseRequestMessage, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.DatabaseRequestMessage_ClassName)
    else:
        ClassName = _Communication.DatabaseRequestMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.DatabaseRequestMessage_TypeInfo)
    else:
        TypeInfo = _Communication.DatabaseRequestMessage_TypeInfo

    def className(self):
        return _Communication.DatabaseRequestMessage_className(self)

    def typeInfo(self):
        return _Communication.DatabaseRequestMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.DatabaseRequestMessage_Cast)
    else:
        Cast = _Communication.DatabaseRequestMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.DatabaseRequestMessage_ConstCast)
    else:
        ConstCast = _Communication.DatabaseRequestMessage_ConstCast

    def __init__(self, *args):
        this = _Communication.new_DatabaseRequestMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Communication.delete_DatabaseRequestMessage
    __del__ = lambda self: None
DatabaseRequestMessage_swigregister = _Communication.DatabaseRequestMessage_swigregister
DatabaseRequestMessage_swigregister(DatabaseRequestMessage)

def DatabaseRequestMessage_ClassName():
    return _Communication.DatabaseRequestMessage_ClassName()
DatabaseRequestMessage_ClassName = _Communication.DatabaseRequestMessage_ClassName

def DatabaseRequestMessage_TypeInfo():
    return _Communication.DatabaseRequestMessage_TypeInfo()
DatabaseRequestMessage_TypeInfo = _Communication.DatabaseRequestMessage_TypeInfo

def DatabaseRequestMessage_Cast(*args):
    return _Communication.DatabaseRequestMessage_Cast(*args)
DatabaseRequestMessage_Cast = _Communication.DatabaseRequestMessage_Cast

def DatabaseRequestMessage_ConstCast(*args):
    return _Communication.DatabaseRequestMessage_ConstCast(*args)
DatabaseRequestMessage_ConstCast = _Communication.DatabaseRequestMessage_ConstCast

class DatabaseProvideMessage(ServiceProvideMessage):
    __swig_setmethods__ = {}
    for _s in [ServiceProvideMessage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseProvideMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceProvideMessage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseProvideMessage, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.DatabaseProvideMessage_ClassName)
    else:
        ClassName = _Communication.DatabaseProvideMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.DatabaseProvideMessage_TypeInfo)
    else:
        TypeInfo = _Communication.DatabaseProvideMessage_TypeInfo

    def className(self):
        return _Communication.DatabaseProvideMessage_className(self)

    def typeInfo(self):
        return _Communication.DatabaseProvideMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.DatabaseProvideMessage_Cast)
    else:
        Cast = _Communication.DatabaseProvideMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.DatabaseProvideMessage_ConstCast)
    else:
        ConstCast = _Communication.DatabaseProvideMessage_ConstCast

    def __init__(self, *args):
        this = _Communication.new_DatabaseProvideMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def database(self):
        return _Communication.DatabaseProvideMessage_database(self)
    __swig_destroy__ = _Communication.delete_DatabaseProvideMessage
    __del__ = lambda self: None
DatabaseProvideMessage_swigregister = _Communication.DatabaseProvideMessage_swigregister
DatabaseProvideMessage_swigregister(DatabaseProvideMessage)

def DatabaseProvideMessage_ClassName():
    return _Communication.DatabaseProvideMessage_ClassName()
DatabaseProvideMessage_ClassName = _Communication.DatabaseProvideMessage_ClassName

def DatabaseProvideMessage_TypeInfo():
    return _Communication.DatabaseProvideMessage_TypeInfo()
DatabaseProvideMessage_TypeInfo = _Communication.DatabaseProvideMessage_TypeInfo

def DatabaseProvideMessage_Cast(*args):
    return _Communication.DatabaseProvideMessage_Cast(*args)
DatabaseProvideMessage_Cast = _Communication.DatabaseProvideMessage_Cast

def DatabaseProvideMessage_ConstCast(*args):
    return _Communication.DatabaseProvideMessage_ConstCast(*args)
DatabaseProvideMessage_ConstCast = _Communication.DatabaseProvideMessage_ConstCast

class NetworkMessage(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkMessage, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.NetworkMessage_ClassName)
    else:
        ClassName = _Communication.NetworkMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.NetworkMessage_TypeInfo)
    else:
        TypeInfo = _Communication.NetworkMessage_TypeInfo

    def className(self):
        return _Communication.NetworkMessage_className(self)

    def typeInfo(self):
        return _Communication.NetworkMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.NetworkMessage_Cast)
    else:
        Cast = _Communication.NetworkMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.NetworkMessage_ConstCast)
    else:
        ConstCast = _Communication.NetworkMessage_ConstCast

    def serialize(self, ar):
        return _Communication.NetworkMessage_serialize(self, ar)

    def __init__(self, *args):
        this = _Communication.new_NetworkMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Communication.delete_NetworkMessage
    __del__ = lambda self: None

    def privateSenderGroup(self):
        return _Communication.NetworkMessage_privateSenderGroup(self)

    def setPrivateSenderGroup(self, privateGroup):
        return _Communication.NetworkMessage_setPrivateSenderGroup(self, privateGroup)

    def clientName(self):
        return _Communication.NetworkMessage_clientName(self)

    def hostname(self):
        return _Communication.NetworkMessage_hostname(self)

    def type(self):
        return _Communication.NetworkMessage_type(self)

    def setType(self, type):
        return _Communication.NetworkMessage_setType(self, type)

    def messageType(self):
        return _Communication.NetworkMessage_messageType(self)

    def setMessageType(self, type):
        return _Communication.NetworkMessage_setMessageType(self, type)

    def contentType(self):
        return _Communication.NetworkMessage_contentType(self)

    def setContentType(self, type):
        return _Communication.NetworkMessage_setContentType(self, type)

    def destination(self):
        return _Communication.NetworkMessage_destination(self)

    def setDestination(self, destinationGroup):
        return _Communication.NetworkMessage_setDestination(self, destinationGroup)

    def tag(self, seqNum, timeStamp):
        return _Communication.NetworkMessage_tag(self, seqNum, timeStamp)

    def tagged(self):
        return _Communication.NetworkMessage_tagged(self)

    def seqNum(self):
        return _Communication.NetworkMessage_seqNum(self)

    def timestamp(self):
        return _Communication.NetworkMessage_timestamp(self)

    def data(self):
        return _Communication.NetworkMessage_data(self)

    def dataSize(self):
        return _Communication.NetworkMessage_dataSize(self)

    def setData(self, *args):
        return _Communication.NetworkMessage_setData(self, *args)

    def setSize(self, size):
        return _Communication.NetworkMessage_setSize(self, size)

    def size(self):
        return _Communication.NetworkMessage_size(self)

    def read(self, buf, size):
        return _Communication.NetworkMessage_read(self, buf, size)

    def write(self, buf, size):
        return _Communication.NetworkMessage_write(self, buf, size)

    def copy(self):
        return _Communication.NetworkMessage_copy(self)
    if _newclass:
        Encode = staticmethod(_Communication.NetworkMessage_Encode)
    else:
        Encode = _Communication.NetworkMessage_Encode

    def decode(self):
        return _Communication.NetworkMessage_decode(self)
NetworkMessage_swigregister = _Communication.NetworkMessage_swigregister
NetworkMessage_swigregister(NetworkMessage)

def NetworkMessage_ClassName():
    return _Communication.NetworkMessage_ClassName()
NetworkMessage_ClassName = _Communication.NetworkMessage_ClassName

def NetworkMessage_TypeInfo():
    return _Communication.NetworkMessage_TypeInfo()
NetworkMessage_TypeInfo = _Communication.NetworkMessage_TypeInfo

def NetworkMessage_Cast(*args):
    return _Communication.NetworkMessage_Cast(*args)
NetworkMessage_Cast = _Communication.NetworkMessage_Cast

def NetworkMessage_ConstCast(*args):
    return _Communication.NetworkMessage_ConstCast(*args)
NetworkMessage_ConstCast = _Communication.NetworkMessage_ConstCast

def NetworkMessage_Encode(arg1, type, schemaVersion=-1):
    return _Communication.NetworkMessage_Encode(arg1, type, schemaVersion)
NetworkMessage_Encode = _Communication.NetworkMessage_Encode

class ServiceMessage(NetworkMessage):
    __swig_setmethods__ = {}
    for _s in [NetworkMessage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkMessage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceMessage, name)
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.ServiceMessage_ClassName)
    else:
        ClassName = _Communication.ServiceMessage_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.ServiceMessage_TypeInfo)
    else:
        TypeInfo = _Communication.ServiceMessage_TypeInfo

    def className(self):
        return _Communication.ServiceMessage_className(self)

    def typeInfo(self):
        return _Communication.ServiceMessage_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.ServiceMessage_Cast)
    else:
        Cast = _Communication.ServiceMessage_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.ServiceMessage_ConstCast)
    else:
        ConstCast = _Communication.ServiceMessage_ConstCast

    def serialize(self, ar):
        return _Communication.ServiceMessage_serialize(self, ar)

    def __init__(self, *args):
        this = _Communication.new_ServiceMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Communication.delete_ServiceMessage
    __del__ = lambda self: None

    def protocolVersion(self):
        return _Communication.ServiceMessage_protocolVersion(self)

    def setProtocolVersion(self, version):
        return _Communication.ServiceMessage_setProtocolVersion(self, version)

    def clientType(self):
        return _Communication.ServiceMessage_clientType(self)

    def setClientType(self, clientType):
        return _Communication.ServiceMessage_setClientType(self, clientType)

    def clientPriority(self):
        return _Communication.ServiceMessage_clientPriority(self)

    def setClientPriority(self, clientPriority):
        return _Communication.ServiceMessage_setClientPriority(self, clientPriority)

    def copy(self):
        return _Communication.ServiceMessage_copy(self)

    def archiveSeqNum(self):
        return _Communication.ServiceMessage_archiveSeqNum(self)

    def setArchiveSeqNum(self, seqNum):
        return _Communication.ServiceMessage_setArchiveSeqNum(self, seqNum)

    def archiveTimestamp(self):
        return _Communication.ServiceMessage_archiveTimestamp(self)

    def setArchiveTimestamp(self, timestamp):
        return _Communication.ServiceMessage_setArchiveTimestamp(self, timestamp)

    def setPassword(self, password):
        return _Communication.ServiceMessage_setPassword(self, password)

    def password(self):
        return _Communication.ServiceMessage_password(self)

    def setPeerGroup(self, peerGroup):
        return _Communication.ServiceMessage_setPeerGroup(self, peerGroup)

    def peerGroup(self):
        return _Communication.ServiceMessage_peerGroup(self)
ServiceMessage_swigregister = _Communication.ServiceMessage_swigregister
ServiceMessage_swigregister(ServiceMessage)

def ServiceMessage_ClassName():
    return _Communication.ServiceMessage_ClassName()
ServiceMessage_ClassName = _Communication.ServiceMessage_ClassName

def ServiceMessage_TypeInfo():
    return _Communication.ServiceMessage_TypeInfo()
ServiceMessage_TypeInfo = _Communication.ServiceMessage_TypeInfo

def ServiceMessage_Cast(*args):
    return _Communication.ServiceMessage_Cast(*args)
ServiceMessage_Cast = _Communication.ServiceMessage_Cast

def ServiceMessage_ConstCast(*args):
    return _Communication.ServiceMessage_ConstCast(*args)
ServiceMessage_ConstCast = _Communication.ServiceMessage_ConstCast

class NetworkInterface(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        ClassName = staticmethod(_Communication.NetworkInterface_ClassName)
    else:
        ClassName = _Communication.NetworkInterface_ClassName
    if _newclass:
        TypeInfo = staticmethod(_Communication.NetworkInterface_TypeInfo)
    else:
        TypeInfo = _Communication.NetworkInterface_TypeInfo

    def className(self):
        return _Communication.NetworkInterface_className(self)

    def typeInfo(self):
        return _Communication.NetworkInterface_typeInfo(self)
    if _newclass:
        Cast = staticmethod(_Communication.NetworkInterface_Cast)
    else:
        Cast = _Communication.NetworkInterface_Cast
    if _newclass:
        ConstCast = staticmethod(_Communication.NetworkInterface_ConstCast)
    else:
        ConstCast = _Communication.NetworkInterface_ConstCast
    __swig_destroy__ = _Communication.delete_NetworkInterface
    __del__ = lambda self: None

    def connect(self, serverAddress, clientName):
        return _Communication.NetworkInterface_connect(self, serverAddress, clientName)

    def disconnect(self):
        return _Communication.NetworkInterface_disconnect(self)

    def receive(self, error=None):
        return _Communication.NetworkInterface_receive(self, error)

    def send(self, group, type, msg, selfDiscard=True):
        return _Communication.NetworkInterface_send(self, group, type, msg, selfDiscard)

    def subscribe(self, group):
        return _Communication.NetworkInterface_subscribe(self, group)

    def unsubscribe(self, group):
        return _Communication.NetworkInterface_unsubscribe(self, group)

    def poll(self, error=None):
        return _Communication.NetworkInterface_poll(self, error)

    def isConnected(self):
        return _Communication.NetworkInterface_isConnected(self)
    if _newclass:
        Create = staticmethod(_Communication.NetworkInterface_Create)
    else:
        Create = _Communication.NetworkInterface_Create

    def privateGroup(self):
        return _Communication.NetworkInterface_privateGroup(self)

    def groupOfLastSender(self):
        return _Communication.NetworkInterface_groupOfLastSender(self)

    def setSequenceNumber(self, seq):
        return _Communication.NetworkInterface_setSequenceNumber(self, seq)

    def getSequenceNumber(self):
        return _Communication.NetworkInterface_getSequenceNumber(self)
NetworkInterface_swigregister = _Communication.NetworkInterface_swigregister
NetworkInterface_swigregister(NetworkInterface)

def NetworkInterface_ClassName():
    return _Communication.NetworkInterface_ClassName()
NetworkInterface_ClassName = _Communication.NetworkInterface_ClassName

def NetworkInterface_TypeInfo():
    return _Communication.NetworkInterface_TypeInfo()
NetworkInterface_TypeInfo = _Communication.NetworkInterface_TypeInfo

def NetworkInterface_Cast(*args):
    return _Communication.NetworkInterface_Cast(*args)
NetworkInterface_Cast = _Communication.NetworkInterface_Cast

def NetworkInterface_ConstCast(*args):
    return _Communication.NetworkInterface_ConstCast(*args)
NetworkInterface_ConstCast = _Communication.NetworkInterface_ConstCast

def NetworkInterface_Create(service):
    return _Communication.NetworkInterface_Create(service)
NetworkInterface_Create = _Communication.NetworkInterface_Create

class SystemConnection(Core.BaseObject):
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemConnection, name)
    __repr__ = _swig_repr
    NON_THREADED = _Communication.SystemConnection_NON_THREADED
    THREADED = _Communication.SystemConnection_THREADED
    LM_QUANTITY = _Communication.SystemConnection_LM_QUANTITY

    def __init__(self, networkInterface=None):
        this = _Communication.new_SystemConnection(networkInterface)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Communication.delete_SystemConnection
    __del__ = lambda self: None

    def connect(self, *args):
        return _Communication.SystemConnection_connect(self, *args)

    def reconnect(self):
        return _Communication.SystemConnection_reconnect(self)

    def disconnect(self):
        return _Communication.SystemConnection_disconnect(self)

    def isConnected(self):
        return _Communication.SystemConnection_isConnected(self)

    def subscribe(self, group):
        return _Communication.SystemConnection_subscribe(self, group)

    def unsubscribe(self, group):
        return _Communication.SystemConnection_unsubscribe(self, group)

    def subscribeArchive(self, group):
        return _Communication.SystemConnection_subscribeArchive(self, group)

    def unsubscribeArchive(self, group):
        return _Communication.SystemConnection_unsubscribeArchive(self, group)

    def archiveRequest(self):
        return _Communication.SystemConnection_archiveRequest(self)

    def receive(self, blocking=True, error=None):
        return _Communication.SystemConnection_receive(self, blocking, error)

    def readNetworkMessage(self, blocking=True):
        return _Communication.SystemConnection_readNetworkMessage(self, blocking)

    def readLocalMessage(self):
        return _Communication.SystemConnection_readLocalMessage(self)

    def send(self, *args):
        return _Communication.SystemConnection_send(self, *args)

    def poll(self):
        return _Communication.SystemConnection_poll(self)

    def listen(self, *args):
        return _Communication.SystemConnection_listen(self, *args)

    def stopListening(self):
        return _Communication.SystemConnection_stopListening(self)

    def isListening(self):
        return _Communication.SystemConnection_isListening(self)

    def masterAddress(self):
        return _Communication.SystemConnection_masterAddress(self)

    def peerGroup(self):
        return _Communication.SystemConnection_peerGroup(self)

    def privateGroup(self):
        return _Communication.SystemConnection_privateGroup(self)

    def type(self):
        return _Communication.SystemConnection_type(self)

    def priority(self):
        return _Communication.SystemConnection_priority(self)

    def groupCount(self):
        return _Communication.SystemConnection_groupCount(self)

    def group(self, i):
        return _Communication.SystemConnection_group(self, i)

    def groups(self):
        return _Communication.SystemConnection_groups(self)

    def password(self):
        return _Communication.SystemConnection_password(self)

    def setPassword(self, password):
        return _Communication.SystemConnection_setPassword(self, password)

    def queuedMessageCount(self):
        return _Communication.SystemConnection_queuedMessageCount(self)

    def networkInterface(self):
        return _Communication.SystemConnection_networkInterface(self)

    def setSequenceNumber(self, seq):
        return _Communication.SystemConnection_setSequenceNumber(self, seq)

    def getSequenceNumber(self):
        return _Communication.SystemConnection_getSequenceNumber(self)

    def schemaVersion(self):
        return _Communication.SystemConnection_schemaVersion(self)
SystemConnection_swigregister = _Communication.SystemConnection_swigregister
SystemConnection_swigregister(SystemConnection)

BINARY_ENCODING = _Communication.BINARY_ENCODING
XML_ENCODING = _Communication.XML_ENCODING
EMessageEncodingQuantity = _Communication.EMessageEncodingQuantity
class EMessageEncodingNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMessageEncodingNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMessageEncodingNames, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Communication.new_EMessageEncodingNames()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        name = staticmethod(_Communication.EMessageEncodingNames_name)
    else:
        name = _Communication.EMessageEncodingNames_name
    __swig_destroy__ = _Communication.delete_EMessageEncodingNames
    __del__ = lambda self: None
EMessageEncodingNames_swigregister = _Communication.EMessageEncodingNames_swigregister
EMessageEncodingNames_swigregister(EMessageEncodingNames)

def EMessageEncodingNames_name(i):
    return _Communication.EMessageEncodingNames_name(i)
EMessageEncodingNames_name = _Communication.EMessageEncodingNames_name

class Connection(SystemConnection):
    __swig_setmethods__ = {}
    for _s in [SystemConnection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    for _s in [SystemConnection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SKIP_UNKNOWN = _Communication.Connection_SKIP_UNKNOWN
    READ_ALL = _Communication.Connection_READ_ALL
    RM_QUANTITY = _Communication.Connection_RM_QUANTITY
    __swig_destroy__ = _Communication.delete_Connection
    __del__ = lambda self: None

    def setEncoding(self, enc):
        return _Communication.Connection_setEncoding(self, enc)

    def encoding(self):
        return _Communication.Connection_encoding(self)

    def readMessage(self, *args):
        return _Communication.Connection_readMessage(self, *args)

    def readQueuedMessage(self, *args):
        return _Communication.Connection_readQueuedMessage(self, *args)

    def send(self, *args):
        return _Communication.Connection_send(self, *args)
    if _newclass:
        Create = staticmethod(_Communication.Connection_Create)
    else:
        Create = _Communication.Connection_Create

    def dispatch(self, arg2):
        return _Communication.Connection_dispatch(self, arg2)

    def transmittedBytes(self):
        return _Communication.Connection_transmittedBytes(self)

    def receivedBytes(self):
        return _Communication.Connection_receivedBytes(self)
Connection_swigregister = _Communication.Connection_swigregister
Connection_swigregister(Connection)

def Connection_Create(*args):
    return _Communication.Connection_Create(*args)
Connection_Create = _Communication.Connection_Create

# This file is compatible with both classic and new-style classes.


