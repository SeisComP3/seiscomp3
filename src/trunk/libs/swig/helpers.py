# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_helpers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_helpers')
    _helpers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_helpers', [dirname(__file__)])
        except ImportError:
            import _helpers
            return _helpers
        try:
            _mod = imp.load_module('_helpers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _helpers = swig_import_helper()
    del swig_import_helper
else:
    import _helpers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import seiscomp3.Communication
import seiscomp3.Core
import seiscomp3.DataModel
import seiscomp3.IO
import seiscomp3.Math

def _readobj(obj, file):
    """_readobj(BaseObject obj, char const * file) -> bool"""
    return _helpers._readobj(obj, file)

def _writeobj(obj, file):
    """_writeobj(BaseObject obj, char const * file) -> bool"""
    return _helpers._writeobj(obj, file)
class _DatabaseQuery(seiscomp3.DataModel.DatabaseQuery):
    """Proxy of C++ Seiscomp::Sc3py::_private::_DatabaseQuery class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.DataModel.DatabaseQuery]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DatabaseQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.DataModel.DatabaseQuery]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _DatabaseQuery, name)
    __repr__ = _swig_repr

    def __init__(self, dbDriver):
        """__init__(Seiscomp::Sc3py::_private::_DatabaseQuery self, DatabaseInterface dbDriver) -> _DatabaseQuery"""
        this = _helpers.new__DatabaseQuery(dbDriver)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete__DatabaseQuery
    __del__ = lambda self: None

    def getEvents(self, limit, offset, newestFirst, minTime, maxTime, minLatitude, maxLatitude, minLongitude, maxLongitude, minMagnitude, minArrivals):
        """getEvents(_DatabaseQuery self, int limit, int offset, bool newestFirst, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & minTime, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & maxTime, Seiscomp::Core::Optional< double >::Impl const & minLatitude, Seiscomp::Core::Optional< double >::Impl const & maxLatitude, Seiscomp::Core::Optional< double >::Impl const & minLongitude, Seiscomp::Core::Optional< double >::Impl const & maxLongitude, Seiscomp::Core::Optional< double >::Impl const & minMagnitude, Seiscomp::Core::Optional< int >::Impl const & minArrivals) -> DatabaseIterator"""
        return _helpers._DatabaseQuery_getEvents(self, limit, offset, newestFirst, minTime, maxTime, minLatitude, maxLatitude, minLongitude, maxLongitude, minMagnitude, minArrivals)

_DatabaseQuery_swigregister = _helpers._DatabaseQuery_swigregister
_DatabaseQuery_swigregister(_DatabaseQuery)



from seiscomp3 import Communication, DataModel, Logging, IO

class ConnectionError(Exception):
    pass

class DatabaseError(Exception):
    pass

class SerializationError(Exception):
    pass

class DatabaseQuery(_DatabaseQuery):
    def getEvents(self, limit, offset=0, newestFirst=True, minTime=None, maxTime=None,
        minLatitude=None, maxLatitude=None, minLongitude=None, maxLongitude=None,
        minMagnitude=None, minArrivals=None):

        return _DatabaseQuery.getEvents(self, limit, offset, newestFirst,
            minTime, maxTime, minLatitude, maxLatitude, minLongitude, maxLongitude,
            minMagnitude, minArrivals)

class SimpleConnection(object):
    def __init__(self, config, name, group):
        mediatorAddress = config.getString("connection.server")
        dbDriverName = config.getString("database.type")
        dbAddress = config.getString("database.parameters")

        connection = Communication.Connection.Create(mediatorAddress, name, group)
        if connection is None:
            Logging.error("Cannot connect to Mediator")
            raise ConnectionError, "connection could not be established"
        else:
            Logging.info("Connection has been established")

        dbDriver = IO.DatabaseInterface.Create(dbDriverName)
        if dbDriver is None:
            Logging.error("Cannot find database driver " + dbDriverName)
            raise DatabaseError, "driver not found"

        if not dbDriver.connect(dbAddress):
            Logging.error("Cannot connect to database at " + dbAddress)
            raise DatabaseError, "connection could not be established"

        self.__connection = connection

# This reference to dbDriver is essential, since dbQuery becomes
# invalid when dbDriver is deleted
        self.__dbDriver = dbDriver
        self.dbQuery = DatabaseQuery(dbDriver)

    def subscribe(self, group):
        r = self.__connection.subscribe(group)
        if r != Core.Status.SEISCOMP_SUCCESS:
            raise ConnectionError, "could not subscribe to " + group

        return True

    def readMessage(self, waitForNew=True):
        r = self.__connection.readMessage(waitForNew)
        if not r:
            raise ConnectionError, "could not read message"

        return r

    def send(self, *args):
        r = self.__connection.send(*args)
        if not r:
            raise ConnectionError, "could not send message"

        return r

    def disconnect(self):
        return self.__connection.disconnect()

def readobj(obj, file):
    if not _readobj(obj, file):
        raise SerializationError, "could not read object from " + file

def writeobj(obj, file):
    if not _writeobj(obj, file):
        raise SerializationError, "could not write object to " + file


# This file is compatible with both classic and new-style classes.


