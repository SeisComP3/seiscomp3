# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Codes for various seismological computations"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Seismology')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Seismology')
    _Seismology = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Seismology', [dirname(__file__)])
        except ImportError:
            import _Seismology
            return _Seismology
        try:
            _mod = imp.load_module('_Seismology', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Seismology = swig_import_helper()
    del swig_import_helper
else:
    import _Seismology
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Seismology.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Seismology.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Seismology.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Seismology.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Seismology.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Seismology.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Seismology.SwigPyIterator_copy(self)

    def next(self):
        return _Seismology.SwigPyIterator_next(self)

    def __next__(self):
        return _Seismology.SwigPyIterator___next__(self)

    def previous(self):
        return _Seismology.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Seismology.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Seismology.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Seismology.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Seismology.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Seismology.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Seismology.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Seismology.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Seismology.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import seiscomp3.IO
import seiscomp3.Math
import seiscomp3.Core
import seiscomp3.DataModel
import seiscomp3.Config
class TravelTimeList_internal(_object):
    """Proxy of C++ std::list<(Seiscomp::TravelTime)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TravelTimeList_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TravelTimeList_internal, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(TravelTimeList_internal self) -> SwigPyIterator"""
        return _Seismology.TravelTimeList_internal_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(TravelTimeList_internal self) -> bool"""
        return _Seismology.TravelTimeList_internal___nonzero__(self)


    def __bool__(self):
        """__bool__(TravelTimeList_internal self) -> bool"""
        return _Seismology.TravelTimeList_internal___bool__(self)


    def __len__(self):
        """__len__(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::size_type"""
        return _Seismology.TravelTimeList_internal___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j) -> TravelTimeList_internal"""
        return _Seismology.TravelTimeList_internal___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j)
        __setslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j, TravelTimeList_internal v)
        """
        return _Seismology.TravelTimeList_internal___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, std::list< Seiscomp::TravelTime >::difference_type j)"""
        return _Seismology.TravelTimeList_internal___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i)
        __delitem__(TravelTimeList_internal self, PySliceObject * slice)
        """
        return _Seismology.TravelTimeList_internal___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(TravelTimeList_internal self, PySliceObject * slice) -> TravelTimeList_internal
        __getitem__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i) -> TravelTime
        """
        return _Seismology.TravelTimeList_internal___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(TravelTimeList_internal self, PySliceObject * slice, TravelTimeList_internal v)
        __setitem__(TravelTimeList_internal self, PySliceObject * slice)
        __setitem__(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::difference_type i, TravelTime x)
        """
        return _Seismology.TravelTimeList_internal___setitem__(self, *args)


    def pop(self):
        """pop(TravelTimeList_internal self) -> TravelTime"""
        return _Seismology.TravelTimeList_internal_pop(self)


    def append(self, x):
        """append(TravelTimeList_internal self, TravelTime x)"""
        return _Seismology.TravelTimeList_internal_append(self, x)


    def empty(self):
        """empty(TravelTimeList_internal self) -> bool"""
        return _Seismology.TravelTimeList_internal_empty(self)


    def size(self):
        """size(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::size_type"""
        return _Seismology.TravelTimeList_internal_size(self)


    def swap(self, v):
        """swap(TravelTimeList_internal self, TravelTimeList_internal v)"""
        return _Seismology.TravelTimeList_internal_swap(self, v)


    def begin(self):
        """begin(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::iterator"""
        return _Seismology.TravelTimeList_internal_begin(self)


    def end(self):
        """end(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::iterator"""
        return _Seismology.TravelTimeList_internal_end(self)


    def rbegin(self):
        """rbegin(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::reverse_iterator"""
        return _Seismology.TravelTimeList_internal_rbegin(self)


    def rend(self):
        """rend(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::reverse_iterator"""
        return _Seismology.TravelTimeList_internal_rend(self)


    def clear(self):
        """clear(TravelTimeList_internal self)"""
        return _Seismology.TravelTimeList_internal_clear(self)


    def get_allocator(self):
        """get_allocator(TravelTimeList_internal self) -> std::list< Seiscomp::TravelTime >::allocator_type"""
        return _Seismology.TravelTimeList_internal_get_allocator(self)


    def pop_back(self):
        """pop_back(TravelTimeList_internal self)"""
        return _Seismology.TravelTimeList_internal_pop_back(self)


    def erase(self, *args):
        """
        erase(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator pos) -> std::list< Seiscomp::TravelTime >::iterator
        erase(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator first, std::list< Seiscomp::TravelTime >::iterator last) -> std::list< Seiscomp::TravelTime >::iterator
        """
        return _Seismology.TravelTimeList_internal_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(Seiscomp::TravelTime)> self) -> TravelTimeList_internal
        __init__(std::list<(Seiscomp::TravelTime)> self, TravelTimeList_internal arg2) -> TravelTimeList_internal
        __init__(std::list<(Seiscomp::TravelTime)> self, std::list< Seiscomp::TravelTime >::size_type size) -> TravelTimeList_internal
        __init__(std::list<(Seiscomp::TravelTime)> self, std::list< Seiscomp::TravelTime >::size_type size, TravelTime value) -> TravelTimeList_internal
        """
        this = _Seismology.new_TravelTimeList_internal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(TravelTimeList_internal self, TravelTime x)"""
        return _Seismology.TravelTimeList_internal_push_back(self, x)


    def front(self):
        """front(TravelTimeList_internal self) -> TravelTime"""
        return _Seismology.TravelTimeList_internal_front(self)


    def back(self):
        """back(TravelTimeList_internal self) -> TravelTime"""
        return _Seismology.TravelTimeList_internal_back(self)


    def assign(self, n, x):
        """assign(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::size_type n, TravelTime x)"""
        return _Seismology.TravelTimeList_internal_assign(self, n, x)


    def resize(self, *args):
        """
        resize(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::size_type new_size)
        resize(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::size_type new_size, TravelTime x)
        """
        return _Seismology.TravelTimeList_internal_resize(self, *args)


    def insert(self, *args):
        """
        insert(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator pos, TravelTime x) -> std::list< Seiscomp::TravelTime >::iterator
        insert(TravelTimeList_internal self, std::list< Seiscomp::TravelTime >::iterator pos, std::list< Seiscomp::TravelTime >::size_type n, TravelTime x)
        """
        return _Seismology.TravelTimeList_internal_insert(self, *args)


    def pop_front(self):
        """pop_front(TravelTimeList_internal self)"""
        return _Seismology.TravelTimeList_internal_pop_front(self)


    def push_front(self, x):
        """push_front(TravelTimeList_internal self, TravelTime x)"""
        return _Seismology.TravelTimeList_internal_push_front(self, x)


    def reverse(self):
        """reverse(TravelTimeList_internal self)"""
        return _Seismology.TravelTimeList_internal_reverse(self)

    __swig_destroy__ = _Seismology.delete_TravelTimeList_internal
    __del__ = lambda self: None
TravelTimeList_internal_swigregister = _Seismology.TravelTimeList_internal_swigregister
TravelTimeList_internal_swigregister(TravelTimeList_internal)

class Regions(_object):
    """Proxy of C++ Seiscomp::Regions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Regions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Regions, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::Regions self) -> Regions"""
        this = _Seismology.new_Regions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load():
        """load()"""
        return _Seismology.Regions_load()

    load = staticmethod(load)

    def getRegionName(lat, lon):
        """getRegionName(double lat, double lon) -> std::string"""
        return _Seismology.Regions_getRegionName(lat, lon)

    getRegionName = staticmethod(getRegionName)

    def polyRegions():
        """polyRegions() -> Seiscomp::Geo::PolyRegions &"""
        return _Seismology.Regions_polyRegions()

    polyRegions = staticmethod(polyRegions)
    __swig_destroy__ = _Seismology.delete_Regions
    __del__ = lambda self: None
Regions_swigregister = _Seismology.Regions_swigregister
Regions_swigregister(Regions)

def Regions_load():
    """Regions_load()"""
    return _Seismology.Regions_load()

def Regions_getRegionName(lat, lon):
    """Regions_getRegionName(double lat, double lon) -> std::string"""
    return _Seismology.Regions_getRegionName(lat, lon)

def Regions_polyRegions():
    """Regions_polyRegions() -> Seiscomp::Geo::PolyRegions &"""
    return _Seismology.Regions_polyRegions()

SC3_LOCATOR_INTERFACE_VERSION = _Seismology.SC3_LOCATOR_INTERFACE_VERSION
class SensorLocationDelegate(seiscomp3.Core.BaseObject):
    """Proxy of C++ Seiscomp::Seismology::SensorLocationDelegate class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorLocationDelegate, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SensorLocationDelegate, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getSensorLocation(self, pick):
        """getSensorLocation(SensorLocationDelegate self, Pick pick) -> SensorLocation"""
        return _Seismology.SensorLocationDelegate_getSensorLocation(self, pick)

    __swig_destroy__ = _Seismology.delete_SensorLocationDelegate
    __del__ = lambda self: None
SensorLocationDelegate_swigregister = _Seismology.SensorLocationDelegate_swigregister
SensorLocationDelegate_swigregister(SensorLocationDelegate)

class LocatorInterface(seiscomp3.Core.BaseObject):
    """Proxy of C++ Seiscomp::Seismology::LocatorInterface class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocatorInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocatorInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    F_NONE = _Seismology.LocatorInterface_F_NONE
    F_BACKAZIMUTH = _Seismology.LocatorInterface_F_BACKAZIMUTH
    F_SLOWNESS = _Seismology.LocatorInterface_F_SLOWNESS
    F_TIME = _Seismology.LocatorInterface_F_TIME
    F_ALL = _Seismology.LocatorInterface_F_ALL
    EFlagsQuantity = _Seismology.LocatorInterface_EFlagsQuantity
    NoCapability = _Seismology.LocatorInterface_NoCapability
    InitialLocation = _Seismology.LocatorInterface_InitialLocation
    FixedDepth = _Seismology.LocatorInterface_FixedDepth
    DistanceCutOff = _Seismology.LocatorInterface_DistanceCutOff
    IgnoreInitialLocation = _Seismology.LocatorInterface_IgnoreInitialLocation
    CapQuantity = _Seismology.LocatorInterface_CapQuantity
    Log = _Seismology.LocatorInterface_Log
    Warning = _Seismology.LocatorInterface_Warning
    __swig_destroy__ = _Seismology.delete_LocatorInterface
    __del__ = lambda self: None

    def Create(algo):
        """Create(char const * algo) -> LocatorInterface"""
        return _Seismology.LocatorInterface_Create(algo)

    Create = staticmethod(Create)

    def name(self):
        """name(LocatorInterface self) -> std::string const &"""
        return _Seismology.LocatorInterface_name(self)


    def setSensorLocationDelegate(self, delegate):
        """setSensorLocationDelegate(LocatorInterface self, SensorLocationDelegate delegate)"""
        return _Seismology.LocatorInterface_setSensorLocationDelegate(self, delegate)


    def init(self, config):
        """init(LocatorInterface self, Config config) -> bool"""
        return _Seismology.LocatorInterface_init(self, config)


    def parameters(self):
        """parameters(LocatorInterface self) -> vectorStr"""
        return _Seismology.LocatorInterface_parameters(self)


    def parameter(self, name):
        """parameter(LocatorInterface self, std::string const & name) -> std::string"""
        return _Seismology.LocatorInterface_parameter(self, name)


    def setParameter(self, name, value):
        """setParameter(LocatorInterface self, std::string const & name, std::string const & value) -> bool"""
        return _Seismology.LocatorInterface_setParameter(self, name, value)


    def profiles(self):
        """profiles(LocatorInterface self) -> vectorStr"""
        return _Seismology.LocatorInterface_profiles(self)


    def setProfile(self, name):
        """setProfile(LocatorInterface self, std::string const & name)"""
        return _Seismology.LocatorInterface_setProfile(self, name)


    def capabilities(self):
        """capabilities(LocatorInterface self) -> int"""
        return _Seismology.LocatorInterface_capabilities(self)


    def locate(self, *args):
        """
        locate(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::PickList & pickList) -> Origin
        locate(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::PickList & pickList, double initLat, double initLon, double initDepth, Time initTime) -> Origin
        """
        return _Seismology.LocatorInterface_locate(self, *args)


    def relocate(self, origin):
        """relocate(LocatorInterface self, Origin origin) -> Origin"""
        return _Seismology.LocatorInterface_relocate(self, origin)


    def lastMessage(self, arg2):
        """lastMessage(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::MessageType arg2) -> std::string"""
        return _Seismology.LocatorInterface_lastMessage(self, arg2)


    def supports(self, arg2):
        """supports(LocatorInterface self, Seiscomp::Seismology::LocatorInterface::Capability arg2) -> bool"""
        return _Seismology.LocatorInterface_supports(self, arg2)


    def setFixedDepth(self, depth, use=True):
        """
        setFixedDepth(LocatorInterface self, double depth, bool use=True)
        setFixedDepth(LocatorInterface self, double depth)
        """
        return _Seismology.LocatorInterface_setFixedDepth(self, depth, use)


    def useFixedDepth(self, use=True):
        """
        useFixedDepth(LocatorInterface self, bool use=True)
        useFixedDepth(LocatorInterface self)
        """
        return _Seismology.LocatorInterface_useFixedDepth(self, use)


    def fixedDepth(self):
        """fixedDepth(LocatorInterface self) -> double"""
        return _Seismology.LocatorInterface_fixedDepth(self)


    def usingFixedDepth(self):
        """usingFixedDepth(LocatorInterface self) -> bool"""
        return _Seismology.LocatorInterface_usingFixedDepth(self)


    def releaseDepth(self):
        """releaseDepth(LocatorInterface self)"""
        return _Seismology.LocatorInterface_releaseDepth(self)


    def setDistanceCutOff(self, distance):
        """setDistanceCutOff(LocatorInterface self, double distance)"""
        return _Seismology.LocatorInterface_setDistanceCutOff(self, distance)


    def releaseDistanceCutOff(self):
        """releaseDistanceCutOff(LocatorInterface self)"""
        return _Seismology.LocatorInterface_releaseDistanceCutOff(self)


    def isInitialLocationIgnored(self):
        """isInitialLocationIgnored(LocatorInterface self) -> bool"""
        return _Seismology.LocatorInterface_isInitialLocationIgnored(self)


    def setIgnoreInitialLocation(self, f):
        """setIgnoreInitialLocation(LocatorInterface self, bool f)"""
        return _Seismology.LocatorInterface_setIgnoreInitialLocation(self, f)


    def getPick(self, arrival):
        """getPick(LocatorInterface self, Arrival arrival) -> Pick"""
        return _Seismology.LocatorInterface_getPick(self, arrival)


    def getSensorLocation(self, pick):
        """getSensorLocation(LocatorInterface self, Pick pick) -> SensorLocation"""
        return _Seismology.LocatorInterface_getSensorLocation(self, pick)

LocatorInterface_swigregister = _Seismology.LocatorInterface_swigregister
LocatorInterface_swigregister(LocatorInterface)

def LocatorInterface_Create(algo):
    """LocatorInterface_Create(char const * algo) -> LocatorInterface"""
    return _Seismology.LocatorInterface_Create(algo)

class PickNotFoundException(seiscomp3.Core.GeneralException):
    """Proxy of C++ Seiscomp::Seismology::PickNotFoundException class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickNotFoundException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::Seismology::PickNotFoundException self) -> PickNotFoundException
        __init__(Seiscomp::Seismology::PickNotFoundException self, std::string const & str) -> PickNotFoundException
        """
        this = _Seismology.new_PickNotFoundException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_PickNotFoundException
    __del__ = lambda self: None
PickNotFoundException_swigregister = _Seismology.PickNotFoundException_swigregister
PickNotFoundException_swigregister(PickNotFoundException)

class LocatorException(seiscomp3.Core.GeneralException):
    """Proxy of C++ Seiscomp::Seismology::LocatorException class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocatorException, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocatorException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::Seismology::LocatorException self) -> LocatorException
        __init__(Seiscomp::Seismology::LocatorException self, std::string const & str) -> LocatorException
        """
        this = _Seismology.new_LocatorException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_LocatorException
    __del__ = lambda self: None
LocatorException_swigregister = _Seismology.LocatorException_swigregister
LocatorException_swigregister(LocatorException)

class StationNotFoundException(seiscomp3.Core.GeneralException):
    """Proxy of C++ Seiscomp::Seismology::StationNotFoundException class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationNotFoundException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::Seismology::StationNotFoundException self) -> StationNotFoundException
        __init__(Seiscomp::Seismology::StationNotFoundException self, std::string const & str) -> StationNotFoundException
        """
        this = _Seismology.new_StationNotFoundException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_StationNotFoundException
    __del__ = lambda self: None
StationNotFoundException_swigregister = _Seismology.StationNotFoundException_swigregister
StationNotFoundException_swigregister(StationNotFoundException)


def arrivalToFlags(arrival):
    """arrivalToFlags(Arrival arrival) -> int"""
    return _Seismology.arrivalToFlags(arrival)

def flagsToArrival(arrival, flags):
    """flagsToArrival(Arrival arrival, int flags)"""
    return _Seismology.flagsToArrival(arrival, flags)
class LocSATErrorEllipsoid(_object):
    """Proxy of C++ Seiscomp::LocSATErrorEllipsoid class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocSATErrorEllipsoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocSATErrorEllipsoid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::LocSATErrorEllipsoid self) -> LocSATErrorEllipsoid"""
        this = _Seismology.new_LocSATErrorEllipsoid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["sxx"] = _Seismology.LocSATErrorEllipsoid_sxx_set
    __swig_getmethods__["sxx"] = _Seismology.LocSATErrorEllipsoid_sxx_get
    if _newclass:
        sxx = _swig_property(_Seismology.LocSATErrorEllipsoid_sxx_get, _Seismology.LocSATErrorEllipsoid_sxx_set)
    __swig_setmethods__["syy"] = _Seismology.LocSATErrorEllipsoid_syy_set
    __swig_getmethods__["syy"] = _Seismology.LocSATErrorEllipsoid_syy_get
    if _newclass:
        syy = _swig_property(_Seismology.LocSATErrorEllipsoid_syy_get, _Seismology.LocSATErrorEllipsoid_syy_set)
    __swig_setmethods__["szz"] = _Seismology.LocSATErrorEllipsoid_szz_set
    __swig_getmethods__["szz"] = _Seismology.LocSATErrorEllipsoid_szz_get
    if _newclass:
        szz = _swig_property(_Seismology.LocSATErrorEllipsoid_szz_get, _Seismology.LocSATErrorEllipsoid_szz_set)
    __swig_setmethods__["stt"] = _Seismology.LocSATErrorEllipsoid_stt_set
    __swig_getmethods__["stt"] = _Seismology.LocSATErrorEllipsoid_stt_get
    if _newclass:
        stt = _swig_property(_Seismology.LocSATErrorEllipsoid_stt_get, _Seismology.LocSATErrorEllipsoid_stt_set)
    __swig_setmethods__["sxy"] = _Seismology.LocSATErrorEllipsoid_sxy_set
    __swig_getmethods__["sxy"] = _Seismology.LocSATErrorEllipsoid_sxy_get
    if _newclass:
        sxy = _swig_property(_Seismology.LocSATErrorEllipsoid_sxy_get, _Seismology.LocSATErrorEllipsoid_sxy_set)
    __swig_setmethods__["sxz"] = _Seismology.LocSATErrorEllipsoid_sxz_set
    __swig_getmethods__["sxz"] = _Seismology.LocSATErrorEllipsoid_sxz_get
    if _newclass:
        sxz = _swig_property(_Seismology.LocSATErrorEllipsoid_sxz_get, _Seismology.LocSATErrorEllipsoid_sxz_set)
    __swig_setmethods__["syz"] = _Seismology.LocSATErrorEllipsoid_syz_set
    __swig_getmethods__["syz"] = _Seismology.LocSATErrorEllipsoid_syz_get
    if _newclass:
        syz = _swig_property(_Seismology.LocSATErrorEllipsoid_syz_get, _Seismology.LocSATErrorEllipsoid_syz_set)
    __swig_setmethods__["stx"] = _Seismology.LocSATErrorEllipsoid_stx_set
    __swig_getmethods__["stx"] = _Seismology.LocSATErrorEllipsoid_stx_get
    if _newclass:
        stx = _swig_property(_Seismology.LocSATErrorEllipsoid_stx_get, _Seismology.LocSATErrorEllipsoid_stx_set)
    __swig_setmethods__["sty"] = _Seismology.LocSATErrorEllipsoid_sty_set
    __swig_getmethods__["sty"] = _Seismology.LocSATErrorEllipsoid_sty_get
    if _newclass:
        sty = _swig_property(_Seismology.LocSATErrorEllipsoid_sty_get, _Seismology.LocSATErrorEllipsoid_sty_set)
    __swig_setmethods__["stz"] = _Seismology.LocSATErrorEllipsoid_stz_set
    __swig_getmethods__["stz"] = _Seismology.LocSATErrorEllipsoid_stz_get
    if _newclass:
        stz = _swig_property(_Seismology.LocSATErrorEllipsoid_stz_get, _Seismology.LocSATErrorEllipsoid_stz_set)
    __swig_setmethods__["sdobs"] = _Seismology.LocSATErrorEllipsoid_sdobs_set
    __swig_getmethods__["sdobs"] = _Seismology.LocSATErrorEllipsoid_sdobs_get
    if _newclass:
        sdobs = _swig_property(_Seismology.LocSATErrorEllipsoid_sdobs_get, _Seismology.LocSATErrorEllipsoid_sdobs_set)
    __swig_setmethods__["smajax"] = _Seismology.LocSATErrorEllipsoid_smajax_set
    __swig_getmethods__["smajax"] = _Seismology.LocSATErrorEllipsoid_smajax_get
    if _newclass:
        smajax = _swig_property(_Seismology.LocSATErrorEllipsoid_smajax_get, _Seismology.LocSATErrorEllipsoid_smajax_set)
    __swig_setmethods__["sminax"] = _Seismology.LocSATErrorEllipsoid_sminax_set
    __swig_getmethods__["sminax"] = _Seismology.LocSATErrorEllipsoid_sminax_get
    if _newclass:
        sminax = _swig_property(_Seismology.LocSATErrorEllipsoid_sminax_get, _Seismology.LocSATErrorEllipsoid_sminax_set)
    __swig_setmethods__["strike"] = _Seismology.LocSATErrorEllipsoid_strike_set
    __swig_getmethods__["strike"] = _Seismology.LocSATErrorEllipsoid_strike_get
    if _newclass:
        strike = _swig_property(_Seismology.LocSATErrorEllipsoid_strike_get, _Seismology.LocSATErrorEllipsoid_strike_set)
    __swig_setmethods__["sdepth"] = _Seismology.LocSATErrorEllipsoid_sdepth_set
    __swig_getmethods__["sdepth"] = _Seismology.LocSATErrorEllipsoid_sdepth_get
    if _newclass:
        sdepth = _swig_property(_Seismology.LocSATErrorEllipsoid_sdepth_get, _Seismology.LocSATErrorEllipsoid_sdepth_set)
    __swig_setmethods__["stime"] = _Seismology.LocSATErrorEllipsoid_stime_set
    __swig_getmethods__["stime"] = _Seismology.LocSATErrorEllipsoid_stime_get
    if _newclass:
        stime = _swig_property(_Seismology.LocSATErrorEllipsoid_stime_get, _Seismology.LocSATErrorEllipsoid_stime_set)
    __swig_setmethods__["conf"] = _Seismology.LocSATErrorEllipsoid_conf_set
    __swig_getmethods__["conf"] = _Seismology.LocSATErrorEllipsoid_conf_get
    if _newclass:
        conf = _swig_property(_Seismology.LocSATErrorEllipsoid_conf_get, _Seismology.LocSATErrorEllipsoid_conf_set)
    __swig_destroy__ = _Seismology.delete_LocSATErrorEllipsoid
    __del__ = lambda self: None
LocSATErrorEllipsoid_swigregister = _Seismology.LocSATErrorEllipsoid_swigregister
LocSATErrorEllipsoid_swigregister(LocSATErrorEllipsoid)

class LocSAT(LocatorInterface):
    """Proxy of C++ Seiscomp::LocSAT class."""

    __swig_setmethods__ = {}
    for _s in [LocatorInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocSAT, name, value)
    __swig_getmethods__ = {}
    for _s in [LocatorInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocSAT, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::LocSAT self) -> LocSAT"""
        this = _Seismology.new_LocSAT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_LocSAT
    __del__ = lambda self: None

    def init(self, config):
        """init(LocSAT self, Config config) -> bool"""
        return _Seismology.LocSAT_init(self, config)


    def parameters(self):
        """parameters(LocSAT self) -> vectorStr"""
        return _Seismology.LocSAT_parameters(self)


    def parameter(self, name):
        """parameter(LocSAT self, std::string const & name) -> std::string"""
        return _Seismology.LocSAT_parameter(self, name)


    def setParameter(self, name, value):
        """setParameter(LocSAT self, std::string const & name, std::string const & value) -> bool"""
        return _Seismology.LocSAT_setParameter(self, name, value)


    def profiles(self):
        """profiles(LocSAT self) -> vectorStr"""
        return _Seismology.LocSAT_profiles(self)


    def setProfile(self, name):
        """setProfile(LocSAT self, std::string const & name)"""
        return _Seismology.LocSAT_setProfile(self, name)


    def setDefaultProfile(name):
        """setDefaultProfile(std::string const & name)"""
        return _Seismology.LocSAT_setDefaultProfile(name)

    setDefaultProfile = staticmethod(setDefaultProfile)

    def currentDefaultProfile():
        """currentDefaultProfile() -> std::string"""
        return _Seismology.LocSAT_currentDefaultProfile()

    currentDefaultProfile = staticmethod(currentDefaultProfile)

    def setNewOriginID(self, newOriginID):
        """setNewOriginID(LocSAT self, std::string const & newOriginID)"""
        return _Seismology.LocSAT_setNewOriginID(self, newOriginID)


    def capabilities(self):
        """capabilities(LocSAT self) -> int"""
        return _Seismology.LocSAT_capabilities(self)


    def locate(self, *args):
        """
        locate(LocSAT self, Seiscomp::Seismology::LocatorInterface::PickList & pickList) -> Origin
        locate(LocSAT self, Seiscomp::Seismology::LocatorInterface::PickList & pickList, double initLat, double initLon, double initDepth, Time initTime) -> Origin
        """
        return _Seismology.LocSAT_locate(self, *args)


    def relocate(self, origin):
        """relocate(LocSAT self, Origin origin) -> Origin"""
        return _Seismology.LocSAT_relocate(self, origin)


    def errorEllipsoid(self):
        """errorEllipsoid(LocSAT self) -> LocSATErrorEllipsoid"""
        return _Seismology.LocSAT_errorEllipsoid(self)

LocSAT_swigregister = _Seismology.LocSAT_swigregister
LocSAT_swigregister(LocSAT)

def LocSAT_setDefaultProfile(name):
    """LocSAT_setDefaultProfile(std::string const & name)"""
    return _Seismology.LocSAT_setDefaultProfile(name)

def LocSAT_currentDefaultProfile():
    """LocSAT_currentDefaultProfile() -> std::string"""
    return _Seismology.LocSAT_currentDefaultProfile()

class FileNotFoundError(seiscomp3.Core.GeneralException):
    """Proxy of C++ Seiscomp::FileNotFoundError class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNotFoundError, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileNotFoundError, name)
    __repr__ = _swig_repr

    def __init__(self, filename):
        """__init__(Seiscomp::FileNotFoundError self, std::string const & filename) -> FileNotFoundError"""
        this = _Seismology.new_FileNotFoundError(filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_FileNotFoundError
    __del__ = lambda self: None
FileNotFoundError_swigregister = _Seismology.FileNotFoundError_swigregister
FileNotFoundError_swigregister(FileNotFoundError)

class MultipleModelsError(seiscomp3.Core.GeneralException):
    """Proxy of C++ Seiscomp::MultipleModelsError class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultipleModelsError, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultipleModelsError, name)
    __repr__ = _swig_repr

    def __init__(self, model):
        """__init__(Seiscomp::MultipleModelsError self, std::string const & model) -> MultipleModelsError"""
        this = _Seismology.new_MultipleModelsError(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_MultipleModelsError
    __del__ = lambda self: None
MultipleModelsError_swigregister = _Seismology.MultipleModelsError_swigregister
MultipleModelsError_swigregister(MultipleModelsError)

class NoPhaseError(seiscomp3.Core.GeneralException):
    """Proxy of C++ Seiscomp::NoPhaseError class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPhaseError, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.GeneralException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPhaseError, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::NoPhaseError self) -> NoPhaseError"""
        this = _Seismology.new_NoPhaseError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_NoPhaseError
    __del__ = lambda self: None
NoPhaseError_swigregister = _Seismology.NoPhaseError_swigregister
NoPhaseError_swigregister(NoPhaseError)

class TravelTime(_object):
    """Proxy of C++ Seiscomp::TravelTime class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TravelTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TravelTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::TravelTime self) -> TravelTime
        __init__(Seiscomp::TravelTime self, std::string const & _phase, double _time, double _dtdd, double _dtdh, double _dddp, double _takeoff) -> TravelTime
        """
        this = _Seismology.new_TravelTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(TravelTime self, TravelTime other) -> bool"""
        return _Seismology.TravelTime___eq__(self, other)


    def __lt__(self, other):
        """__lt__(TravelTime self, TravelTime other) -> bool"""
        return _Seismology.TravelTime___lt__(self, other)

    __swig_setmethods__["phase"] = _Seismology.TravelTime_phase_set
    __swig_getmethods__["phase"] = _Seismology.TravelTime_phase_get
    if _newclass:
        phase = _swig_property(_Seismology.TravelTime_phase_get, _Seismology.TravelTime_phase_set)
    __swig_setmethods__["time"] = _Seismology.TravelTime_time_set
    __swig_getmethods__["time"] = _Seismology.TravelTime_time_get
    if _newclass:
        time = _swig_property(_Seismology.TravelTime_time_get, _Seismology.TravelTime_time_set)
    __swig_setmethods__["dtdd"] = _Seismology.TravelTime_dtdd_set
    __swig_getmethods__["dtdd"] = _Seismology.TravelTime_dtdd_get
    if _newclass:
        dtdd = _swig_property(_Seismology.TravelTime_dtdd_get, _Seismology.TravelTime_dtdd_set)
    __swig_setmethods__["dtdh"] = _Seismology.TravelTime_dtdh_set
    __swig_getmethods__["dtdh"] = _Seismology.TravelTime_dtdh_get
    if _newclass:
        dtdh = _swig_property(_Seismology.TravelTime_dtdh_get, _Seismology.TravelTime_dtdh_set)
    __swig_setmethods__["dddp"] = _Seismology.TravelTime_dddp_set
    __swig_getmethods__["dddp"] = _Seismology.TravelTime_dddp_get
    if _newclass:
        dddp = _swig_property(_Seismology.TravelTime_dddp_get, _Seismology.TravelTime_dddp_set)
    __swig_setmethods__["takeoff"] = _Seismology.TravelTime_takeoff_set
    __swig_getmethods__["takeoff"] = _Seismology.TravelTime_takeoff_get
    if _newclass:
        takeoff = _swig_property(_Seismology.TravelTime_takeoff_get, _Seismology.TravelTime_takeoff_set)
    __swig_destroy__ = _Seismology.delete_TravelTime
    __del__ = lambda self: None
TravelTime_swigregister = _Seismology.TravelTime_swigregister
TravelTime_swigregister(TravelTime)

class TravelTimeList(TravelTimeList_internal):
    """Proxy of C++ Seiscomp::TravelTimeList class."""

    __swig_setmethods__ = {}
    for _s in [TravelTimeList_internal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TravelTimeList, name, value)
    __swig_getmethods__ = {}
    for _s in [TravelTimeList_internal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TravelTimeList, name)
    __repr__ = _swig_repr

    def isEmpty(self):
        """isEmpty(TravelTimeList self) -> bool"""
        return _Seismology.TravelTimeList_isEmpty(self)


    def sortByTime(self):
        """sortByTime(TravelTimeList self)"""
        return _Seismology.TravelTimeList_sortByTime(self)

    __swig_setmethods__["depth"] = _Seismology.TravelTimeList_depth_set
    __swig_getmethods__["depth"] = _Seismology.TravelTimeList_depth_get
    if _newclass:
        depth = _swig_property(_Seismology.TravelTimeList_depth_get, _Seismology.TravelTimeList_depth_set)
    __swig_setmethods__["delta"] = _Seismology.TravelTimeList_delta_set
    __swig_getmethods__["delta"] = _Seismology.TravelTimeList_delta_get
    if _newclass:
        delta = _swig_property(_Seismology.TravelTimeList_delta_get, _Seismology.TravelTimeList_delta_set)

    def __init__(self):
        """__init__(Seiscomp::TravelTimeList self) -> TravelTimeList"""
        this = _Seismology.new_TravelTimeList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Seismology.delete_TravelTimeList
    __del__ = lambda self: None
TravelTimeList_swigregister = _Seismology.TravelTimeList_swigregister
TravelTimeList_swigregister(TravelTimeList)

class TravelTimeTableInterface(seiscomp3.Core.BaseObject):
    """Proxy of C++ Seiscomp::TravelTimeTableInterface class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TravelTimeTableInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TravelTimeTableInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Seismology.delete_TravelTimeTableInterface
    __del__ = lambda self: None

    def Create(name):
        """Create(char const * name) -> TravelTimeTableInterface"""
        return _Seismology.TravelTimeTableInterface_Create(name)

    Create = staticmethod(Create)

    def setModel(self, model):
        """setModel(TravelTimeTableInterface self, std::string const & model) -> bool"""
        return _Seismology.TravelTimeTableInterface_setModel(self, model)


    def model(self):
        """model(TravelTimeTableInterface self) -> std::string const &"""
        return _Seismology.TravelTimeTableInterface_model(self)


    def compute(self, *args):
        """
        compute(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0., int ellc=0) -> TravelTimeList
        compute(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0.) -> TravelTimeList
        compute(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2) -> TravelTimeList
        compute(TravelTimeTableInterface self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0., int ellc=0) -> TravelTime
        compute(TravelTimeTableInterface self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0.) -> TravelTime
        compute(TravelTimeTableInterface self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2) -> TravelTime
        """
        return _Seismology.TravelTimeTableInterface_compute(self, *args)


    def computeFirst(self, lat1, lon1, dep1, lat2, lon2, alt2=0., ellc=0):
        """
        computeFirst(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0., int ellc=0) -> TravelTime
        computeFirst(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0.) -> TravelTime
        computeFirst(TravelTimeTableInterface self, double lat1, double lon1, double dep1, double lat2, double lon2) -> TravelTime
        """
        return _Seismology.TravelTimeTableInterface_computeFirst(self, lat1, lon1, dep1, lat2, lon2, alt2, ellc)

TravelTimeTableInterface_swigregister = _Seismology.TravelTimeTableInterface_swigregister
TravelTimeTableInterface_swigregister(TravelTimeTableInterface)

def TravelTimeTableInterface_Create(name):
    """TravelTimeTableInterface_Create(char const * name) -> TravelTimeTableInterface"""
    return _Seismology.TravelTimeTableInterface_Create(name)

class TravelTimeTable(TravelTimeTableInterface):
    """Proxy of C++ Seiscomp::TravelTimeTable class."""

    __swig_setmethods__ = {}
    for _s in [TravelTimeTableInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TravelTimeTable, name, value)
    __swig_getmethods__ = {}
    for _s in [TravelTimeTableInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TravelTimeTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::TravelTimeTable self) -> TravelTimeTable"""
        this = _Seismology.new_TravelTimeTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setModel(self, model):
        """setModel(TravelTimeTable self, std::string const & model) -> bool"""
        return _Seismology.TravelTimeTable_setModel(self, model)


    def model(self):
        """model(TravelTimeTable self) -> std::string const &"""
        return _Seismology.TravelTimeTable_model(self)


    def compute(self, *args):
        """
        compute(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0., int ellc=1) -> TravelTimeList
        compute(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0.) -> TravelTimeList
        compute(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2) -> TravelTimeList
        compute(TravelTimeTable self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0., int ellc=1) -> TravelTime
        compute(TravelTimeTable self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0.) -> TravelTime
        compute(TravelTimeTable self, char const * phase, double lat1, double lon1, double dep1, double lat2, double lon2) -> TravelTime
        """
        return _Seismology.TravelTimeTable_compute(self, *args)


    def computeFirst(self, lat1, lon1, dep1, lat2, lon2, alt2=0., ellc=1):
        """
        computeFirst(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0., int ellc=1) -> TravelTime
        computeFirst(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2, double alt2=0.) -> TravelTime
        computeFirst(TravelTimeTable self, double lat1, double lon1, double dep1, double lat2, double lon2) -> TravelTime
        """
        return _Seismology.TravelTimeTable_computeFirst(self, lat1, lon1, dep1, lat2, lon2, alt2, ellc)

    __swig_destroy__ = _Seismology.delete_TravelTimeTable
    __del__ = lambda self: None
TravelTimeTable_swigregister = _Seismology.TravelTimeTable_swigregister
TravelTimeTable_swigregister(TravelTimeTable)


def ellipcorr(phase, lat1, lon1, lat2, lon2, depth, corr):
    """ellipcorr(std::string const & phase, double lat1, double lon1, double lat2, double lon2, double depth, double & corr) -> bool"""
    return _Seismology.ellipcorr(phase, lat1, lon1, lat2, lon2, depth, corr)

def getPhase(arg1, phaseCode):
    """getPhase(TravelTimeList arg1, std::string const & phaseCode) -> TravelTime"""
    return _Seismology.getPhase(arg1, phaseCode)

def firstArrivalP(arg1):
    """firstArrivalP(TravelTimeList arg1) -> TravelTime"""
    return _Seismology.firstArrivalP(arg1)
# This file is compatible with both classic and new-style classes.


