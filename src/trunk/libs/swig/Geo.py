# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Codes for working with geo features (e.g. polygons)"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geo')
    _Geo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geo', [dirname(__file__)])
        except ImportError:
            import _Geo
            return _Geo
        try:
            _mod = imp.load_module('_Geo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geo = swig_import_helper()
    del swig_import_helper
else:
    import _Geo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Geo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geo.SwigPyIterator_copy(self)

    def next(self):
        return _Geo.SwigPyIterator_next(self)

    def __next__(self):
        return _Geo.SwigPyIterator___next__(self)

    def previous(self):
        return _Geo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Geo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import seiscomp3.Math
import seiscomp3.Core
class GeoCoordinate(_object):
    """Proxy of C++ Seiscomp::Geo::GeoCoordinate class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoCoordinate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::Geo::GeoCoordinate self) -> GeoCoordinate
        __init__(Seiscomp::Geo::GeoCoordinate self, Seiscomp::Geo::GeoCoordinate::ValueType lat_, Seiscomp::Geo::GeoCoordinate::ValueType lon_) -> GeoCoordinate
        """
        this = _Geo.new_GeoCoordinate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, lat, lon):
        """set(GeoCoordinate self, Seiscomp::Geo::GeoCoordinate::ValueType lat, Seiscomp::Geo::GeoCoordinate::ValueType lon)"""
        return _Geo.GeoCoordinate_set(self, lat, lon)


    def latitude(self):
        """latitude(GeoCoordinate self) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_latitude(self)


    def longitude(self):
        """longitude(GeoCoordinate self) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_longitude(self)


    def __eq__(self, other):
        """__eq__(GeoCoordinate self, GeoCoordinate other) -> bool"""
        return _Geo.GeoCoordinate___eq__(self, other)


    def __ne__(self, other):
        """__ne__(GeoCoordinate self, GeoCoordinate other) -> bool"""
        return _Geo.GeoCoordinate___ne__(self, other)


    def normalize(self):
        """normalize(GeoCoordinate self) -> GeoCoordinate"""
        return _Geo.GeoCoordinate_normalize(self)


    def width(lon0, lon1):
        """width(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_width(lon0, lon1)

    width = staticmethod(width)

    def normalizeLat(lat):
        """normalizeLat(Seiscomp::Geo::GeoCoordinate::ValueType lat) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_normalizeLat(lat)

    normalizeLat = staticmethod(normalizeLat)

    def normalizeLon(lon):
        """normalizeLon(Seiscomp::Geo::GeoCoordinate::ValueType lon) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_normalizeLon(lon)

    normalizeLon = staticmethod(normalizeLon)

    def normalizeLatLon(lat, lon):
        """normalizeLatLon(Seiscomp::Geo::GeoCoordinate::ValueType & lat, Seiscomp::Geo::GeoCoordinate::ValueType & lon)"""
        return _Geo.GeoCoordinate_normalizeLatLon(lat, lon)

    normalizeLatLon = staticmethod(normalizeLatLon)

    def distanceLon(lon0, lon1):
        """distanceLon(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
        return _Geo.GeoCoordinate_distanceLon(lon0, lon1)

    distanceLon = staticmethod(distanceLon)
    __swig_setmethods__["lat"] = _Geo.GeoCoordinate_lat_set
    __swig_getmethods__["lat"] = _Geo.GeoCoordinate_lat_get
    if _newclass:
        lat = _swig_property(_Geo.GeoCoordinate_lat_get, _Geo.GeoCoordinate_lat_set)
    __swig_setmethods__["lon"] = _Geo.GeoCoordinate_lon_set
    __swig_getmethods__["lon"] = _Geo.GeoCoordinate_lon_get
    if _newclass:
        lon = _swig_property(_Geo.GeoCoordinate_lon_get, _Geo.GeoCoordinate_lon_set)
    __swig_destroy__ = _Geo.delete_GeoCoordinate
    __del__ = lambda self: None
GeoCoordinate_swigregister = _Geo.GeoCoordinate_swigregister
GeoCoordinate_swigregister(GeoCoordinate)

def GeoCoordinate_width(lon0, lon1):
    """GeoCoordinate_width(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_width(lon0, lon1)

def GeoCoordinate_normalizeLat(lat):
    """GeoCoordinate_normalizeLat(Seiscomp::Geo::GeoCoordinate::ValueType lat) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_normalizeLat(lat)

def GeoCoordinate_normalizeLon(lon):
    """GeoCoordinate_normalizeLon(Seiscomp::Geo::GeoCoordinate::ValueType lon) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_normalizeLon(lon)

def GeoCoordinate_normalizeLatLon(lat, lon):
    """GeoCoordinate_normalizeLatLon(Seiscomp::Geo::GeoCoordinate::ValueType & lat, Seiscomp::Geo::GeoCoordinate::ValueType & lon)"""
    return _Geo.GeoCoordinate_normalizeLatLon(lat, lon)

def GeoCoordinate_distanceLon(lon0, lon1):
    """GeoCoordinate_distanceLon(Seiscomp::Geo::GeoCoordinate::ValueType lon0, Seiscomp::Geo::GeoCoordinate::ValueType lon1) -> Seiscomp::Geo::GeoCoordinate::ValueType"""
    return _Geo.GeoCoordinate_distanceLon(lon0, lon1)

class formatted_lat(_object):
    """Proxy of C++ Seiscomp::Geo::formatted_lat class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formatted_lat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formatted_lat, name)
    __repr__ = _swig_repr

    def __init__(self, lat):
        """__init__(Seiscomp::Geo::formatted_lat self, double lat) -> formatted_lat"""
        this = _Geo.new_formatted_lat(lat)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["v"] = _Geo.formatted_lat_v_set
    __swig_getmethods__["v"] = _Geo.formatted_lat_v_get
    if _newclass:
        v = _swig_property(_Geo.formatted_lat_v_get, _Geo.formatted_lat_v_set)
    __swig_destroy__ = _Geo.delete_formatted_lat
    __del__ = lambda self: None
formatted_lat_swigregister = _Geo.formatted_lat_swigregister
formatted_lat_swigregister(formatted_lat)

class formatted_lon(_object):
    """Proxy of C++ Seiscomp::Geo::formatted_lon class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formatted_lon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formatted_lon, name)
    __repr__ = _swig_repr

    def __init__(self, lon):
        """__init__(Seiscomp::Geo::formatted_lon self, double lon) -> formatted_lon"""
        this = _Geo.new_formatted_lon(lon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["v"] = _Geo.formatted_lon_v_set
    __swig_getmethods__["v"] = _Geo.formatted_lon_v_get
    if _newclass:
        v = _swig_property(_Geo.formatted_lon_v_get, _Geo.formatted_lon_v_set)
    __swig_destroy__ = _Geo.delete_formatted_lon
    __del__ = lambda self: None
formatted_lon_swigregister = _Geo.formatted_lon_swigregister
formatted_lon_swigregister(formatted_lon)

class GeoBoundingBox(_object):
    """Proxy of C++ Seiscomp::Geo::GeoBoundingBox class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoBoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoBoundingBox, name)
    __repr__ = _swig_repr
    Disjunct = _Geo.GeoBoundingBox_Disjunct
    Contains = _Geo.GeoBoundingBox_Contains
    Intersects = _Geo.GeoBoundingBox_Intersects

    def __init__(self, *args):
        """
        __init__(Seiscomp::Geo::GeoBoundingBox self) -> GeoBoundingBox
        __init__(Seiscomp::Geo::GeoBoundingBox self, Seiscomp::Geo::GeoBoundingBox::ValueType south, Seiscomp::Geo::GeoBoundingBox::ValueType west, Seiscomp::Geo::GeoBoundingBox::ValueType north, Seiscomp::Geo::GeoBoundingBox::ValueType east) -> GeoBoundingBox
        """
        this = _Geo.new_GeoBoundingBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """__eq__(GeoBoundingBox self, GeoBoundingBox other) -> bool"""
        return _Geo.GeoBoundingBox___eq__(self, other)


    def __iadd__(self, other):
        """__iadd__(GeoBoundingBox self, GeoBoundingBox other) -> GeoBoundingBox"""
        return _Geo.GeoBoundingBox___iadd__(self, other)


    def __add__(self, other):
        """__add__(GeoBoundingBox self, GeoBoundingBox other) -> GeoBoundingBox"""
        return _Geo.GeoBoundingBox___add__(self, other)


    def __and__(self, other):
        """__and__(GeoBoundingBox self, GeoBoundingBox other) -> bool"""
        return _Geo.GeoBoundingBox___and__(self, other)


    def normalize(self):
        """normalize(GeoBoundingBox self) -> GeoBoundingBox"""
        return _Geo.GeoBoundingBox_normalize(self)


    def isEmpty(self):
        """isEmpty(GeoBoundingBox self) -> bool"""
        return _Geo.GeoBoundingBox_isEmpty(self)


    def isNull(self):
        """isNull(GeoBoundingBox self) -> bool"""
        return _Geo.GeoBoundingBox_isNull(self)


    def reset(self):
        """reset(GeoBoundingBox self)"""
        return _Geo.GeoBoundingBox_reset(self)


    def coversFullLongitude(self):
        """coversFullLongitude(GeoBoundingBox self) -> bool"""
        return _Geo.GeoBoundingBox_coversFullLongitude(self)


    def width(self):
        """width(GeoBoundingBox self) -> Seiscomp::Geo::GeoBoundingBox::ValueType"""
        return _Geo.GeoBoundingBox_width(self)


    def height(self):
        """height(GeoBoundingBox self) -> Seiscomp::Geo::GeoBoundingBox::ValueType"""
        return _Geo.GeoBoundingBox_height(self)


    def crossesDateLine(*args):
        """
        crossesDateLine() -> bool
        crossesDateLine(Seiscomp::Geo::GeoBoundingBox::ValueType east, Seiscomp::Geo::GeoBoundingBox::ValueType west) -> bool
        """
        return _Geo.GeoBoundingBox_crossesDateLine(*args)

    crossesDateLine = staticmethod(crossesDateLine)

    def center(self):
        """center(GeoBoundingBox self) -> GeoCoordinate"""
        return _Geo.GeoBoundingBox_center(self)


    def contains(self, *args):
        """
        contains(GeoBoundingBox self, GeoCoordinate v) -> bool
        contains(GeoBoundingBox self, GeoBoundingBox other) -> bool
        """
        return _Geo.GeoBoundingBox_contains(self, *args)


    def relation(self, other):
        """relation(GeoBoundingBox self, GeoBoundingBox other) -> Seiscomp::Geo::GeoBoundingBox::Relation"""
        return _Geo.GeoBoundingBox_relation(self, other)


    def merge(self, other):
        """merge(GeoBoundingBox self, GeoBoundingBox other)"""
        return _Geo.GeoBoundingBox_merge(self, other)


    def intersects(self, other):
        """intersects(GeoBoundingBox self, GeoBoundingBox other) -> bool"""
        return _Geo.GeoBoundingBox_intersects(self, other)


    def fromPolygon(self, n, coords, isClosed=True):
        """
        fromPolygon(GeoBoundingBox self, size_t n, GeoCoordinate coords, bool isClosed=True)
        fromPolygon(GeoBoundingBox self, size_t n, GeoCoordinate coords)
        """
        return _Geo.GeoBoundingBox_fromPolygon(self, n, coords, isClosed)

    __swig_setmethods__["Empty"] = _Geo.GeoBoundingBox_Empty_set
    __swig_getmethods__["Empty"] = _Geo.GeoBoundingBox_Empty_get
    if _newclass:
        Empty = _swig_property(_Geo.GeoBoundingBox_Empty_get, _Geo.GeoBoundingBox_Empty_set)
    __swig_destroy__ = _Geo.delete_GeoBoundingBox
    __del__ = lambda self: None
GeoBoundingBox_swigregister = _Geo.GeoBoundingBox_swigregister
GeoBoundingBox_swigregister(GeoBoundingBox)

def GeoBoundingBox_crossesDateLine(*args):
    """
    crossesDateLine() -> bool
    GeoBoundingBox_crossesDateLine(Seiscomp::Geo::GeoBoundingBox::ValueType east, Seiscomp::Geo::GeoBoundingBox::ValueType west) -> bool
    """
    return _Geo.GeoBoundingBox_crossesDateLine(*args)
cvar = _Geo.cvar


def __lshift__(*args):
    """
    __lshift__(std::ostream & os, GeoCoordinate arg2) -> std::ostream
    __lshift__(std::ostream & os, formatted_lat arg2) -> std::ostream
    __lshift__(std::ostream & os, formatted_lon arg2) -> std::ostream
    __lshift__(std::ostream & os, GeoBoundingBox box) -> std::ostream &
    """
    return _Geo.__lshift__(*args)
class Category(_object):
    """Proxy of C++ Seiscomp::Geo::Category class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Category, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Category, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _Geo.Category_id_set
    __swig_getmethods__["id"] = _Geo.Category_id_get
    if _newclass:
        id = _swig_property(_Geo.Category_id_get, _Geo.Category_id_set)
    __swig_setmethods__["name"] = _Geo.Category_name_set
    __swig_getmethods__["name"] = _Geo.Category_name_get
    if _newclass:
        name = _swig_property(_Geo.Category_name_get, _Geo.Category_name_set)
    __swig_setmethods__["localName"] = _Geo.Category_localName_set
    __swig_getmethods__["localName"] = _Geo.Category_localName_get
    if _newclass:
        localName = _swig_property(_Geo.Category_localName_get, _Geo.Category_localName_set)
    __swig_setmethods__["parent"] = _Geo.Category_parent_set
    __swig_getmethods__["parent"] = _Geo.Category_parent_get
    if _newclass:
        parent = _swig_property(_Geo.Category_parent_get, _Geo.Category_parent_set)
    __swig_setmethods__["dataDir"] = _Geo.Category_dataDir_set
    __swig_getmethods__["dataDir"] = _Geo.Category_dataDir_get
    if _newclass:
        dataDir = _swig_property(_Geo.Category_dataDir_get, _Geo.Category_dataDir_set)

    def __init__(self, *args):
        """
        __init__(Seiscomp::Geo::Category self, unsigned int id, std::string name, Category parent=None) -> Category
        __init__(Seiscomp::Geo::Category self, unsigned int id, std::string name) -> Category
        __init__(Seiscomp::Geo::Category self, unsigned int id) -> Category
        """
        this = _Geo.new_Category(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geo.delete_Category
    __del__ = lambda self: None
Category_swigregister = _Geo.Category_swigregister
Category_swigregister(Category)

class GeoFeature(seiscomp3.Core.BaseObject):
    """Proxy of C++ Seiscomp::Geo::GeoFeature class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Seiscomp::Geo::GeoFeature self, Category category=None, unsigned int rank=1) -> GeoFeature
        __init__(Seiscomp::Geo::GeoFeature self, Category category=None) -> GeoFeature
        __init__(Seiscomp::Geo::GeoFeature self) -> GeoFeature
        __init__(Seiscomp::Geo::GeoFeature self, std::string const & name, Category category, unsigned int rank) -> GeoFeature
        __init__(Seiscomp::Geo::GeoFeature self, std::string const & name, Category category, unsigned int rank, Seiscomp::Geo::GeoFeature::Attributes const & attributes) -> GeoFeature
        """
        this = _Geo.new_GeoFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geo.delete_GeoFeature
    __del__ = lambda self: None

    def setName(self, name):
        """setName(GeoFeature self, std::string const & name)"""
        return _Geo.GeoFeature_setName(self, name)


    def name(self):
        """name(GeoFeature self) -> std::string const &"""
        return _Geo.GeoFeature_name(self)


    def category(self):
        """category(GeoFeature self) -> Category"""
        return _Geo.GeoFeature_category(self)


    def rank(self):
        """rank(GeoFeature self) -> unsigned int"""
        return _Geo.GeoFeature_rank(self)


    def attributes(self):
        """attributes(GeoFeature self) -> Seiscomp::Geo::GeoFeature::Attributes const &"""
        return _Geo.GeoFeature_attributes(self)


    def addVertex(self, *args):
        """
        addVertex(GeoFeature self, GeoCoordinate vertex, bool newSubFeature=False)
        addVertex(GeoFeature self, GeoCoordinate vertex)
        addVertex(GeoFeature self, float lat, float lon, bool newSubFeature=False)
        addVertex(GeoFeature self, float lat, float lon)
        """
        return _Geo.GeoFeature_addVertex(self, *args)


    def closedPolygon(self):
        """closedPolygon(GeoFeature self) -> bool"""
        return _Geo.GeoFeature_closedPolygon(self)


    def setClosedPolygon(self, closed):
        """setClosedPolygon(GeoFeature self, bool closed)"""
        return _Geo.GeoFeature_setClosedPolygon(self, closed)


    def updateBoundingBox(self):
        """updateBoundingBox(GeoFeature self)"""
        return _Geo.GeoFeature_updateBoundingBox(self)


    def invertOrder(self):
        """invertOrder(GeoFeature self)"""
        return _Geo.GeoFeature_invertOrder(self)


    def sort(self):
        """sort(GeoFeature self)"""
        return _Geo.GeoFeature_sort(self)


    def setUserData(self, arg2):
        """setUserData(GeoFeature self, void * arg2)"""
        return _Geo.GeoFeature_setUserData(self, arg2)


    def userData(self):
        """userData(GeoFeature self) -> void *"""
        return _Geo.GeoFeature_userData(self)


    def vertices(self):
        """vertices(GeoFeature self) -> Vertices"""
        return _Geo.GeoFeature_vertices(self)


    def bbox(self):
        """bbox(GeoFeature self) -> GeoBoundingBox"""
        return _Geo.GeoFeature_bbox(self)


    def subFeatures(self):
        """subFeatures(GeoFeature self) -> Indexes"""
        return _Geo.GeoFeature_subFeatures(self)


    def contains(self, v):
        """contains(GeoFeature self, GeoCoordinate v) -> bool"""
        return _Geo.GeoFeature_contains(self, v)


    def area(*args):
        """
        area() -> double
        area(GeoCoordinate polygon, size_t sides) -> double
        """
        return _Geo.GeoFeature_area(*args)

    area = staticmethod(area)
GeoFeature_swigregister = _Geo.GeoFeature_swigregister
GeoFeature_swigregister(GeoFeature)

def GeoFeature_area(*args):
    """
    area() -> double
    GeoFeature_area(GeoCoordinate polygon, size_t sides) -> double
    """
    return _Geo.GeoFeature_area(*args)

class GeoFeatureSetObserver(_object):
    """Proxy of C++ Seiscomp::Geo::GeoFeatureSetObserver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoFeatureSetObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoFeatureSetObserver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geo.delete_GeoFeatureSetObserver
    __del__ = lambda self: None

    def geoFeatureSetUpdated(self):
        """geoFeatureSetUpdated(GeoFeatureSetObserver self)"""
        return _Geo.GeoFeatureSetObserver_geoFeatureSetUpdated(self)

GeoFeatureSetObserver_swigregister = _Geo.GeoFeatureSetObserver_swigregister
GeoFeatureSetObserver_swigregister(GeoFeatureSetObserver)

class GeoFeatureSet(seiscomp3.Core.BaseObject):
    """Proxy of C++ Seiscomp::Geo::GeoFeatureSet class."""

    __swig_setmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoFeatureSet, name, value)
    __swig_getmethods__ = {}
    for _s in [seiscomp3.Core.BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoFeatureSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Seiscomp::Geo::GeoFeatureSet self) -> GeoFeatureSet"""
        this = _Geo.new_GeoFeatureSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geo.delete_GeoFeatureSet
    __del__ = lambda self: None

    def registerObserver(self, arg2):
        """registerObserver(GeoFeatureSet self, GeoFeatureSetObserver arg2) -> bool"""
        return _Geo.GeoFeatureSet_registerObserver(self, arg2)


    def unregisterObserver(self, arg2):
        """unregisterObserver(GeoFeatureSet self, GeoFeatureSetObserver arg2) -> bool"""
        return _Geo.GeoFeatureSet_unregisterObserver(self, arg2)


    def clear(self):
        """clear(GeoFeatureSet self)"""
        return _Geo.GeoFeatureSet_clear(self)


    def load(self):
        """load(GeoFeatureSet self)"""
        return _Geo.GeoFeatureSet_load(self)


    def readBNADir(self, dirPath):
        """readBNADir(GeoFeatureSet self, std::string const & dirPath) -> size_t"""
        return _Geo.GeoFeatureSet_readBNADir(self, dirPath)


    def readBNAFile(self, filename, category):
        """readBNAFile(GeoFeatureSet self, std::string const & filename, Category category) -> bool"""
        return _Geo.GeoFeatureSet_readBNAFile(self, filename, category)


    def addFeature(self, feature):
        """addFeature(GeoFeatureSet self, GeoFeature feature) -> bool"""
        return _Geo.GeoFeatureSet_addFeature(self, feature)


    def features(self):
        """features(GeoFeatureSet self) -> GeoFeatures"""
        return _Geo.GeoFeatureSet_features(self)


    def categories(self):
        """categories(GeoFeatureSet self) -> Categories"""
        return _Geo.GeoFeatureSet_categories(self)

GeoFeatureSet_swigregister = _Geo.GeoFeatureSet_swigregister
GeoFeatureSet_swigregister(GeoFeatureSet)

class GeoFeatureSetSingleton(_object):
    """Proxy of C++ Seiscomp::Geo::GeoFeatureSetSingleton class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoFeatureSetSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoFeatureSetSingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getInstance():
        """getInstance() -> GeoFeatureSet"""
        return _Geo.GeoFeatureSetSingleton_getInstance()

    getInstance = staticmethod(getInstance)
    __swig_destroy__ = _Geo.delete_GeoFeatureSetSingleton
    __del__ = lambda self: None
GeoFeatureSetSingleton_swigregister = _Geo.GeoFeatureSetSingleton_swigregister
GeoFeatureSetSingleton_swigregister(GeoFeatureSetSingleton)

def GeoFeatureSetSingleton_getInstance():
    """GeoFeatureSetSingleton_getInstance() -> GeoFeatureSet"""
    return _Geo.GeoFeatureSetSingleton_getInstance()

class Categories(_object):
    """Proxy of C++ std::vector<(p.Seiscomp::Geo::Category)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Categories, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Categories, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(Categories self) -> SwigPyIterator"""
        return _Geo.Categories_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Categories self) -> bool"""
        return _Geo.Categories___nonzero__(self)


    def __bool__(self):
        """__bool__(Categories self) -> bool"""
        return _Geo.Categories___bool__(self)


    def __len__(self):
        """__len__(Categories self) -> std::vector< Seiscomp::Geo::Category * >::size_type"""
        return _Geo.Categories___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j) -> Categories"""
        return _Geo.Categories___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j)
        __setslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j, Categories v)
        """
        return _Geo.Categories___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, std::vector< Seiscomp::Geo::Category * >::difference_type j)"""
        return _Geo.Categories___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i)
        __delitem__(Categories self, PySliceObject * slice)
        """
        return _Geo.Categories___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Categories self, PySliceObject * slice) -> Categories
        __getitem__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i) -> Category
        """
        return _Geo.Categories___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Categories self, PySliceObject * slice, Categories v)
        __setitem__(Categories self, PySliceObject * slice)
        __setitem__(Categories self, std::vector< Seiscomp::Geo::Category * >::difference_type i, Category x)
        """
        return _Geo.Categories___setitem__(self, *args)


    def pop(self):
        """pop(Categories self) -> Category"""
        return _Geo.Categories_pop(self)


    def append(self, x):
        """append(Categories self, Category x)"""
        return _Geo.Categories_append(self, x)


    def empty(self):
        """empty(Categories self) -> bool"""
        return _Geo.Categories_empty(self)


    def size(self):
        """size(Categories self) -> std::vector< Seiscomp::Geo::Category * >::size_type"""
        return _Geo.Categories_size(self)


    def swap(self, v):
        """swap(Categories self, Categories v)"""
        return _Geo.Categories_swap(self, v)


    def begin(self):
        """begin(Categories self) -> std::vector< Seiscomp::Geo::Category * >::iterator"""
        return _Geo.Categories_begin(self)


    def end(self):
        """end(Categories self) -> std::vector< Seiscomp::Geo::Category * >::iterator"""
        return _Geo.Categories_end(self)


    def rbegin(self):
        """rbegin(Categories self) -> std::vector< Seiscomp::Geo::Category * >::reverse_iterator"""
        return _Geo.Categories_rbegin(self)


    def rend(self):
        """rend(Categories self) -> std::vector< Seiscomp::Geo::Category * >::reverse_iterator"""
        return _Geo.Categories_rend(self)


    def clear(self):
        """clear(Categories self)"""
        return _Geo.Categories_clear(self)


    def get_allocator(self):
        """get_allocator(Categories self) -> std::vector< Seiscomp::Geo::Category * >::allocator_type"""
        return _Geo.Categories_get_allocator(self)


    def pop_back(self):
        """pop_back(Categories self)"""
        return _Geo.Categories_pop_back(self)


    def erase(self, *args):
        """
        erase(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator pos) -> std::vector< Seiscomp::Geo::Category * >::iterator
        erase(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator first, std::vector< Seiscomp::Geo::Category * >::iterator last) -> std::vector< Seiscomp::Geo::Category * >::iterator
        """
        return _Geo.Categories_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.Seiscomp::Geo::Category)> self) -> Categories
        __init__(std::vector<(p.Seiscomp::Geo::Category)> self, Categories arg2) -> Categories
        __init__(std::vector<(p.Seiscomp::Geo::Category)> self, std::vector< Seiscomp::Geo::Category * >::size_type size) -> Categories
        __init__(std::vector<(p.Seiscomp::Geo::Category)> self, std::vector< Seiscomp::Geo::Category * >::size_type size, Category value) -> Categories
        """
        this = _Geo.new_Categories(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Categories self, Category x)"""
        return _Geo.Categories_push_back(self, x)


    def front(self):
        """front(Categories self) -> Category"""
        return _Geo.Categories_front(self)


    def back(self):
        """back(Categories self) -> Category"""
        return _Geo.Categories_back(self)


    def assign(self, n, x):
        """assign(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type n, Category x)"""
        return _Geo.Categories_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type new_size)
        resize(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type new_size, Category x)
        """
        return _Geo.Categories_resize(self, *args)


    def insert(self, *args):
        """
        insert(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator pos, Category x) -> std::vector< Seiscomp::Geo::Category * >::iterator
        insert(Categories self, std::vector< Seiscomp::Geo::Category * >::iterator pos, std::vector< Seiscomp::Geo::Category * >::size_type n, Category x)
        """
        return _Geo.Categories_insert(self, *args)


    def reserve(self, n):
        """reserve(Categories self, std::vector< Seiscomp::Geo::Category * >::size_type n)"""
        return _Geo.Categories_reserve(self, n)


    def capacity(self):
        """capacity(Categories self) -> std::vector< Seiscomp::Geo::Category * >::size_type"""
        return _Geo.Categories_capacity(self)

    __swig_destroy__ = _Geo.delete_Categories
    __del__ = lambda self: None
Categories_swigregister = _Geo.Categories_swigregister
Categories_swigregister(Categories)

class GeoFeatures(_object):
    """Proxy of C++ std::vector<(p.Seiscomp::Geo::GeoFeature)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoFeatures, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoFeatures, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(GeoFeatures self) -> SwigPyIterator"""
        return _Geo.GeoFeatures_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(GeoFeatures self) -> bool"""
        return _Geo.GeoFeatures___nonzero__(self)


    def __bool__(self):
        """__bool__(GeoFeatures self) -> bool"""
        return _Geo.GeoFeatures___bool__(self)


    def __len__(self):
        """__len__(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::size_type"""
        return _Geo.GeoFeatures___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j) -> GeoFeatures"""
        return _Geo.GeoFeatures___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j)
        __setslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j, GeoFeatures v)
        """
        return _Geo.GeoFeatures___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type j)"""
        return _Geo.GeoFeatures___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i)
        __delitem__(GeoFeatures self, PySliceObject * slice)
        """
        return _Geo.GeoFeatures___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(GeoFeatures self, PySliceObject * slice) -> GeoFeatures
        __getitem__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i) -> GeoFeature
        """
        return _Geo.GeoFeatures___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(GeoFeatures self, PySliceObject * slice, GeoFeatures v)
        __setitem__(GeoFeatures self, PySliceObject * slice)
        __setitem__(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::difference_type i, GeoFeature x)
        """
        return _Geo.GeoFeatures___setitem__(self, *args)


    def pop(self):
        """pop(GeoFeatures self) -> GeoFeature"""
        return _Geo.GeoFeatures_pop(self)


    def append(self, x):
        """append(GeoFeatures self, GeoFeature x)"""
        return _Geo.GeoFeatures_append(self, x)


    def empty(self):
        """empty(GeoFeatures self) -> bool"""
        return _Geo.GeoFeatures_empty(self)


    def size(self):
        """size(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::size_type"""
        return _Geo.GeoFeatures_size(self)


    def swap(self, v):
        """swap(GeoFeatures self, GeoFeatures v)"""
        return _Geo.GeoFeatures_swap(self, v)


    def begin(self):
        """begin(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator"""
        return _Geo.GeoFeatures_begin(self)


    def end(self):
        """end(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator"""
        return _Geo.GeoFeatures_end(self)


    def rbegin(self):
        """rbegin(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::reverse_iterator"""
        return _Geo.GeoFeatures_rbegin(self)


    def rend(self):
        """rend(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::reverse_iterator"""
        return _Geo.GeoFeatures_rend(self)


    def clear(self):
        """clear(GeoFeatures self)"""
        return _Geo.GeoFeatures_clear(self)


    def get_allocator(self):
        """get_allocator(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::allocator_type"""
        return _Geo.GeoFeatures_get_allocator(self)


    def pop_back(self):
        """pop_back(GeoFeatures self)"""
        return _Geo.GeoFeatures_pop_back(self)


    def erase(self, *args):
        """
        erase(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator pos) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator
        erase(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator first, std::vector< Seiscomp::Geo::GeoFeature * >::iterator last) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator
        """
        return _Geo.GeoFeatures_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.Seiscomp::Geo::GeoFeature)> self) -> GeoFeatures
        __init__(std::vector<(p.Seiscomp::Geo::GeoFeature)> self, GeoFeatures arg2) -> GeoFeatures
        __init__(std::vector<(p.Seiscomp::Geo::GeoFeature)> self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type size) -> GeoFeatures
        __init__(std::vector<(p.Seiscomp::Geo::GeoFeature)> self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type size, GeoFeature value) -> GeoFeatures
        """
        this = _Geo.new_GeoFeatures(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(GeoFeatures self, GeoFeature x)"""
        return _Geo.GeoFeatures_push_back(self, x)


    def front(self):
        """front(GeoFeatures self) -> GeoFeature"""
        return _Geo.GeoFeatures_front(self)


    def back(self):
        """back(GeoFeatures self) -> GeoFeature"""
        return _Geo.GeoFeatures_back(self)


    def assign(self, n, x):
        """assign(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type n, GeoFeature x)"""
        return _Geo.GeoFeatures_assign(self, n, x)


    def resize(self, *args):
        """
        resize(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type new_size)
        resize(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type new_size, GeoFeature x)
        """
        return _Geo.GeoFeatures_resize(self, *args)


    def insert(self, *args):
        """
        insert(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator pos, GeoFeature x) -> std::vector< Seiscomp::Geo::GeoFeature * >::iterator
        insert(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::iterator pos, std::vector< Seiscomp::Geo::GeoFeature * >::size_type n, GeoFeature x)
        """
        return _Geo.GeoFeatures_insert(self, *args)


    def reserve(self, n):
        """reserve(GeoFeatures self, std::vector< Seiscomp::Geo::GeoFeature * >::size_type n)"""
        return _Geo.GeoFeatures_reserve(self, n)


    def capacity(self):
        """capacity(GeoFeatures self) -> std::vector< Seiscomp::Geo::GeoFeature * >::size_type"""
        return _Geo.GeoFeatures_capacity(self)

    __swig_destroy__ = _Geo.delete_GeoFeatures
    __del__ = lambda self: None
GeoFeatures_swigregister = _Geo.GeoFeatures_swigregister
GeoFeatures_swigregister(GeoFeatures)

class Vertices(_object):
    """Proxy of C++ std::vector<(Seiscomp::Geo::GeoCoordinate)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertices, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(Vertices self) -> SwigPyIterator"""
        return _Geo.Vertices_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vertices self) -> bool"""
        return _Geo.Vertices___nonzero__(self)


    def __bool__(self):
        """__bool__(Vertices self) -> bool"""
        return _Geo.Vertices___bool__(self)


    def __len__(self):
        """__len__(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::size_type"""
        return _Geo.Vertices___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j) -> Vertices"""
        return _Geo.Vertices___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j)
        __setslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j, Vertices v)
        """
        return _Geo.Vertices___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type j)"""
        return _Geo.Vertices___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i)
        __delitem__(Vertices self, PySliceObject * slice)
        """
        return _Geo.Vertices___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vertices self, PySliceObject * slice) -> Vertices
        __getitem__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i) -> GeoCoordinate
        """
        return _Geo.Vertices___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vertices self, PySliceObject * slice, Vertices v)
        __setitem__(Vertices self, PySliceObject * slice)
        __setitem__(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::difference_type i, GeoCoordinate x)
        """
        return _Geo.Vertices___setitem__(self, *args)


    def pop(self):
        """pop(Vertices self) -> GeoCoordinate"""
        return _Geo.Vertices_pop(self)


    def append(self, x):
        """append(Vertices self, GeoCoordinate x)"""
        return _Geo.Vertices_append(self, x)


    def empty(self):
        """empty(Vertices self) -> bool"""
        return _Geo.Vertices_empty(self)


    def size(self):
        """size(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::size_type"""
        return _Geo.Vertices_size(self)


    def swap(self, v):
        """swap(Vertices self, Vertices v)"""
        return _Geo.Vertices_swap(self, v)


    def begin(self):
        """begin(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator"""
        return _Geo.Vertices_begin(self)


    def end(self):
        """end(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator"""
        return _Geo.Vertices_end(self)


    def rbegin(self):
        """rbegin(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::reverse_iterator"""
        return _Geo.Vertices_rbegin(self)


    def rend(self):
        """rend(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::reverse_iterator"""
        return _Geo.Vertices_rend(self)


    def clear(self):
        """clear(Vertices self)"""
        return _Geo.Vertices_clear(self)


    def get_allocator(self):
        """get_allocator(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::allocator_type"""
        return _Geo.Vertices_get_allocator(self)


    def pop_back(self):
        """pop_back(Vertices self)"""
        return _Geo.Vertices_pop_back(self)


    def erase(self, *args):
        """
        erase(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator pos) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator
        erase(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator first, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator last) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator
        """
        return _Geo.Vertices_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(Seiscomp::Geo::GeoCoordinate)> self) -> Vertices
        __init__(std::vector<(Seiscomp::Geo::GeoCoordinate)> self, Vertices arg2) -> Vertices
        __init__(std::vector<(Seiscomp::Geo::GeoCoordinate)> self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type size) -> Vertices
        __init__(std::vector<(Seiscomp::Geo::GeoCoordinate)> self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type size, GeoCoordinate value) -> Vertices
        """
        this = _Geo.new_Vertices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vertices self, GeoCoordinate x)"""
        return _Geo.Vertices_push_back(self, x)


    def front(self):
        """front(Vertices self) -> GeoCoordinate"""
        return _Geo.Vertices_front(self)


    def back(self):
        """back(Vertices self) -> GeoCoordinate"""
        return _Geo.Vertices_back(self)


    def assign(self, n, x):
        """assign(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type n, GeoCoordinate x)"""
        return _Geo.Vertices_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type new_size)
        resize(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type new_size, GeoCoordinate x)
        """
        return _Geo.Vertices_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator pos, GeoCoordinate x) -> std::vector< Seiscomp::Geo::GeoCoordinate >::iterator
        insert(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::iterator pos, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type n, GeoCoordinate x)
        """
        return _Geo.Vertices_insert(self, *args)


    def reserve(self, n):
        """reserve(Vertices self, std::vector< Seiscomp::Geo::GeoCoordinate >::size_type n)"""
        return _Geo.Vertices_reserve(self, n)


    def capacity(self):
        """capacity(Vertices self) -> std::vector< Seiscomp::Geo::GeoCoordinate >::size_type"""
        return _Geo.Vertices_capacity(self)

    __swig_destroy__ = _Geo.delete_Vertices
    __del__ = lambda self: None
Vertices_swigregister = _Geo.Vertices_swigregister
Vertices_swigregister(Vertices)

class Indexes(_object):
    """Proxy of C++ std::vector<(size_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Indexes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Indexes, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(Indexes self) -> SwigPyIterator"""
        return _Geo.Indexes_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Indexes self) -> bool"""
        return _Geo.Indexes___nonzero__(self)


    def __bool__(self):
        """__bool__(Indexes self) -> bool"""
        return _Geo.Indexes___bool__(self)


    def __len__(self):
        """__len__(Indexes self) -> std::vector< size_t >::size_type"""
        return _Geo.Indexes___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> Indexes"""
        return _Geo.Indexes___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
        __setslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, Indexes v)
        """
        return _Geo.Indexes___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
        return _Geo.Indexes___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Indexes self, std::vector< size_t >::difference_type i)
        __delitem__(Indexes self, PySliceObject * slice)
        """
        return _Geo.Indexes___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Indexes self, PySliceObject * slice) -> Indexes
        __getitem__(Indexes self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
        """
        return _Geo.Indexes___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Indexes self, PySliceObject * slice, Indexes v)
        __setitem__(Indexes self, PySliceObject * slice)
        __setitem__(Indexes self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
        """
        return _Geo.Indexes___setitem__(self, *args)


    def pop(self):
        """pop(Indexes self) -> std::vector< size_t >::value_type"""
        return _Geo.Indexes_pop(self)


    def append(self, x):
        """append(Indexes self, std::vector< size_t >::value_type const & x)"""
        return _Geo.Indexes_append(self, x)


    def empty(self):
        """empty(Indexes self) -> bool"""
        return _Geo.Indexes_empty(self)


    def size(self):
        """size(Indexes self) -> std::vector< size_t >::size_type"""
        return _Geo.Indexes_size(self)


    def swap(self, v):
        """swap(Indexes self, Indexes v)"""
        return _Geo.Indexes_swap(self, v)


    def begin(self):
        """begin(Indexes self) -> std::vector< size_t >::iterator"""
        return _Geo.Indexes_begin(self)


    def end(self):
        """end(Indexes self) -> std::vector< size_t >::iterator"""
        return _Geo.Indexes_end(self)


    def rbegin(self):
        """rbegin(Indexes self) -> std::vector< size_t >::reverse_iterator"""
        return _Geo.Indexes_rbegin(self)


    def rend(self):
        """rend(Indexes self) -> std::vector< size_t >::reverse_iterator"""
        return _Geo.Indexes_rend(self)


    def clear(self):
        """clear(Indexes self)"""
        return _Geo.Indexes_clear(self)


    def get_allocator(self):
        """get_allocator(Indexes self) -> std::vector< size_t >::allocator_type"""
        return _Geo.Indexes_get_allocator(self)


    def pop_back(self):
        """pop_back(Indexes self)"""
        return _Geo.Indexes_pop_back(self)


    def erase(self, *args):
        """
        erase(Indexes self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
        erase(Indexes self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
        """
        return _Geo.Indexes_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(size_t)> self) -> Indexes
        __init__(std::vector<(size_t)> self, Indexes arg2) -> Indexes
        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size) -> Indexes
        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> Indexes
        """
        this = _Geo.new_Indexes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Indexes self, std::vector< size_t >::value_type const & x)"""
        return _Geo.Indexes_push_back(self, x)


    def front(self):
        """front(Indexes self) -> std::vector< size_t >::value_type const &"""
        return _Geo.Indexes_front(self)


    def back(self):
        """back(Indexes self) -> std::vector< size_t >::value_type const &"""
        return _Geo.Indexes_back(self)


    def assign(self, n, x):
        """assign(Indexes self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
        return _Geo.Indexes_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Indexes self, std::vector< size_t >::size_type new_size)
        resize(Indexes self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
        """
        return _Geo.Indexes_resize(self, *args)


    def insert(self, *args):
        """
        insert(Indexes self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
        insert(Indexes self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
        """
        return _Geo.Indexes_insert(self, *args)


    def reserve(self, n):
        """reserve(Indexes self, std::vector< size_t >::size_type n)"""
        return _Geo.Indexes_reserve(self, n)


    def capacity(self):
        """capacity(Indexes self) -> std::vector< size_t >::size_type"""
        return _Geo.Indexes_capacity(self)

    __swig_destroy__ = _Geo.delete_Indexes
    __del__ = lambda self: None
Indexes_swigregister = _Geo.Indexes_swigregister
Indexes_swigregister(Indexes)

# This file is compatible with both classic and new-style classes.


