# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DataModel', [dirname(__file__)])
        except ImportError:
            import _DataModel
            return _DataModel
        if fp is not None:
            try:
                _mod = imp.load_module('_DataModel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _DataModel = swig_import_helper()
    del swig_import_helper
else:
    import _DataModel
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DataModel.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _DataModel.SwigPyIterator_value(self)
    def incr(self, n=1): return _DataModel.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _DataModel.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _DataModel.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _DataModel.SwigPyIterator_equal(self, *args)
    def copy(self): return _DataModel.SwigPyIterator_copy(self)
    def next(self): return _DataModel.SwigPyIterator_next(self)
    def __next__(self): return _DataModel.SwigPyIterator___next__(self)
    def previous(self): return _DataModel.SwigPyIterator_previous(self)
    def advance(self, *args): return _DataModel.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _DataModel.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _DataModel.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _DataModel.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _DataModel.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _DataModel.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _DataModel.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _DataModel.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import IO
import Math
import Core
class NotifierMessageBase(Core.Message):
    """Proxy of C++ Seiscomp::Core::GenericMessage<(Seiscomp::DataModel::Notifier)> class"""
    __swig_setmethods__ = {}
    for _s in [Core.Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierMessageBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierMessageBase, name)
    __repr__ = _swig_repr
    def serialize(self, *args):
        """serialize(NotifierMessageBase self, GenericArchive ar)"""
        return _DataModel.NotifierMessageBase_serialize(self, *args)

    def __init__(self): 
        """__init__(Seiscomp::Core::GenericMessage<(Seiscomp::DataModel::Notifier)> self) -> NotifierMessageBase"""
        this = _DataModel.new_NotifierMessageBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NotifierMessageBase
    __del__ = lambda self : None;
    def attach(self, *args):
        """
        attach(NotifierMessageBase self, Notifier attachment) -> bool
        attach(NotifierMessageBase self, Seiscomp::Core::SmartPointer< Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::AttachementType >::Impl & attachment) -> bool
        """
        return _DataModel.NotifierMessageBase_attach(self, *args)

    def detach(self, *args):
        """
        detach(NotifierMessageBase self, Notifier attachment) -> bool
        detach(NotifierMessageBase self, Seiscomp::Core::SmartPointer< Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::AttachementType >::Impl & attachment) -> bool
        detach(NotifierMessageBase self, Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::iterator it) -> Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::iterator
        """
        return _DataModel.NotifierMessageBase_detach(self, *args)

    def clear(self):
        """clear(NotifierMessageBase self)"""
        return _DataModel.NotifierMessageBase_clear(self)

    def begin(self, *args):
        """
        begin(NotifierMessageBase self) -> Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::iterator
        begin(NotifierMessageBase self) -> Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::const_iterator
        """
        return _DataModel.NotifierMessageBase_begin(self, *args)

    def end(self, *args):
        """
        end(NotifierMessageBase self) -> Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::iterator
        end(NotifierMessageBase self) -> Seiscomp::Core::GenericMessage< Seiscomp::DataModel::Notifier >::const_iterator
        """
        return _DataModel.NotifierMessageBase_end(self, *args)

    def empty(self):
        """empty(NotifierMessageBase self) -> bool"""
        return _DataModel.NotifierMessageBase_empty(self)

    def size(self):
        """size(NotifierMessageBase self) -> int"""
        return _DataModel.NotifierMessageBase_size(self)

NotifierMessageBase_swigregister = _DataModel.NotifierMessageBase_swigregister
NotifierMessageBase_swigregister(NotifierMessageBase)

class Observer(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Observer class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Observer_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Observer_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Observer self) -> char const *"""
        return _DataModel.Observer_className(self)

    def typeInfo(self):
        """typeInfo(Observer self) -> RTTI"""
        return _DataModel.Observer_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Observer
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Observer
        """
        return _DataModel.Observer_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Observer
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Observer
        """
        return _DataModel.Observer_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    __swig_destroy__ = _DataModel.delete_Observer
    __del__ = lambda self : None;
    def onObjectAdded(self, *args):
        """onObjectAdded(Observer self, Object parent, Object newChild)"""
        return _DataModel.Observer_onObjectAdded(self, *args)

    def onObjectRemoved(self, *args):
        """onObjectRemoved(Observer self, Object parent, Object oldChild)"""
        return _DataModel.Observer_onObjectRemoved(self, *args)

    def onObjectModified(self, *args):
        """onObjectModified(Observer self, Object object)"""
        return _DataModel.Observer_onObjectModified(self, *args)

    def onObjectDestroyed(self, *args):
        """onObjectDestroyed(Observer self, Object object)"""
        return _DataModel.Observer_onObjectDestroyed(self, *args)

Observer_swigregister = _DataModel.Observer_swigregister
Observer_swigregister(Observer)

def Observer_ClassName():
  """Observer_ClassName() -> char const *"""
  return _DataModel.Observer_ClassName()

def Observer_TypeInfo():
  """Observer_TypeInfo() -> RTTI"""
  return _DataModel.Observer_TypeInfo()

def Observer_Cast(*args):
  """
    Cast(BaseObject o) -> Observer
    Observer_Cast(Seiscomp::Core::BaseObjectPtr o) -> Observer
    """
  return _DataModel.Observer_Cast(*args)

def Observer_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Observer
    Observer_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Observer
    """
  return _DataModel.Observer_ConstCast(*args)

class Visitor(_object):
    """Proxy of C++ Seiscomp::DataModel::Visitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Visitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    TM_TOPDOWN = _DataModel.Visitor_TM_TOPDOWN
    TM_BOTTOMUP = _DataModel.Visitor_TM_BOTTOMUP
    TM_QUANTITY = _DataModel.Visitor_TM_QUANTITY
    __swig_destroy__ = _DataModel.delete_Visitor
    __del__ = lambda self : None;
    def traversal(self):
        """traversal(Visitor self) -> Seiscomp::DataModel::Visitor::TraversalMode"""
        return _DataModel.Visitor_traversal(self)

    def visit(self, *args):
        """
        visit(Visitor self, PublicObject arg2) -> bool
        visit(Visitor self, Object arg2)
        """
        return _DataModel.Visitor_visit(self, *args)

    def finished(self):
        """finished(Visitor self)"""
        return _DataModel.Visitor_finished(self)

Visitor_swigregister = _DataModel.Visitor_swigregister
Visitor_swigregister(Visitor)

OP_UNDEFINED = _DataModel.OP_UNDEFINED
OP_ADD = _DataModel.OP_ADD
OP_REMOVE = _DataModel.OP_REMOVE
OP_UPDATE = _DataModel.OP_UPDATE
EOperationQuantity = _DataModel.EOperationQuantity
class EOperationNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EOperationNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOperationNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOperationNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EOperationNames self) -> EOperationNames"""
        this = _DataModel.new_EOperationNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EOperationNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EOperationNames
    __del__ = lambda self : None;
EOperationNames_swigregister = _DataModel.EOperationNames_swigregister
EOperationNames_swigregister(EOperationNames)

def EOperationNames_name(*args):
  """EOperationNames_name(int i) -> char const *"""
  return _DataModel.EOperationNames_name(*args)

class Object(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Object class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Object_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Object_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Object self) -> char const *"""
        return _DataModel.Object_className(self)

    def typeInfo(self):
        """typeInfo(Object self) -> RTTI"""
        return _DataModel.Object_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Object
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Object
        """
        return _DataModel.Object_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Object
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Object
        """
        return _DataModel.Object_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    __swig_destroy__ = _DataModel.delete_Object
    __del__ = lambda self : None;
    def parent(self):
        """parent(Object self) -> PublicObject"""
        return _DataModel.Object_parent(self)

    def setParent(self, *args):
        """setParent(Object self, PublicObject parent) -> bool"""
        return _DataModel.Object_setParent(self, *args)

    def RegisterObserver(*args):
        """RegisterObserver(Observer arg1) -> bool"""
        return _DataModel.Object_RegisterObserver(*args)

    if _newclass:RegisterObserver = staticmethod(RegisterObserver)
    __swig_getmethods__["RegisterObserver"] = lambda x: RegisterObserver
    def UnregisterObserver(*args):
        """UnregisterObserver(Observer arg1) -> bool"""
        return _DataModel.Object_UnregisterObserver(*args)

    if _newclass:UnregisterObserver = staticmethod(UnregisterObserver)
    __swig_getmethods__["UnregisterObserver"] = lambda x: UnregisterObserver
    def update(self):
        """update(Object self)"""
        return _DataModel.Object_update(self)

    def setLastModifiedInArchive(self, *args):
        """setLastModifiedInArchive(Object self, Time t)"""
        return _DataModel.Object_setLastModifiedInArchive(self, *args)

    def lastModifiedInArchive(self):
        """lastModifiedInArchive(Object self) -> Time"""
        return _DataModel.Object_lastModifiedInArchive(self)

    def assign(self, *args):
        """assign(Object self, Object other) -> bool"""
        return _DataModel.Object_assign(self, *args)

    def clone(self):
        """clone(Object self) -> Object"""
        return _DataModel.Object_clone(self)

    def attachTo(self, *args):
        """attachTo(Object self, PublicObject parent) -> bool"""
        return _DataModel.Object_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Object self, PublicObject parent) -> bool"""
        return _DataModel.Object_detachFrom(self, *args)

    def detach(self):
        """detach(Object self) -> bool"""
        return _DataModel.Object_detach(self)

    def accept(self, *args):
        """accept(Object self, Visitor arg2)"""
        return _DataModel.Object_accept(self, *args)

Object_swigregister = _DataModel.Object_swigregister
Object_swigregister(Object)

def Object_ClassName():
  """Object_ClassName() -> char const *"""
  return _DataModel.Object_ClassName()

def Object_TypeInfo():
  """Object_TypeInfo() -> RTTI"""
  return _DataModel.Object_TypeInfo()

def Object_Cast(*args):
  """
    Cast(BaseObject o) -> Object
    Object_Cast(Seiscomp::Core::BaseObjectPtr o) -> Object
    """
  return _DataModel.Object_Cast(*args)

def Object_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Object
    Object_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Object
    """
  return _DataModel.Object_ConstCast(*args)

def Object_RegisterObserver(*args):
  """Object_RegisterObserver(Observer arg1) -> bool"""
  return _DataModel.Object_RegisterObserver(*args)

def Object_UnregisterObserver(*args):
  """Object_UnregisterObserver(Observer arg1) -> bool"""
  return _DataModel.Object_UnregisterObserver(*args)

class PublicObject(Object):
    """Proxy of C++ Seiscomp::DataModel::PublicObject class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.PublicObject_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.PublicObject_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(PublicObject self) -> char const *"""
        return _DataModel.PublicObject_className(self)

    def typeInfo(self):
        """typeInfo(PublicObject self) -> RTTI"""
        return _DataModel.PublicObject_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> PublicObject
        Cast(Seiscomp::Core::BaseObjectPtr o) -> PublicObject
        """
        return _DataModel.PublicObject_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> PublicObject
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> PublicObject
        """
        return _DataModel.PublicObject_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(PublicObject self, GenericArchive ar)"""
        return _DataModel.PublicObject_serialize(self, *args)

    __swig_destroy__ = _DataModel.delete_PublicObject
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(PublicObject self, PublicObject arg2) -> bool"""
        return _DataModel.PublicObject___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(PublicObject self, PublicObject arg2) -> bool"""
        return _DataModel.PublicObject___ne__(self, *args)

    def publicID(self):
        """publicID(PublicObject self) -> std::string const &"""
        return _DataModel.PublicObject_publicID(self)

    def setPublicID(self, *args):
        """setPublicID(PublicObject self, std::string const & arg2) -> bool"""
        return _DataModel.PublicObject_setPublicID(self, *args)

    def registered(self):
        """registered(PublicObject self) -> bool"""
        return _DataModel.PublicObject_registered(self)

    def validId(self):
        """validId(PublicObject self) -> bool"""
        return _DataModel.PublicObject_validId(self)

    def Find(*args):
        """Find(std::string const & publicID) -> PublicObject"""
        return _DataModel.PublicObject_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def ObjectCount():
        """ObjectCount() -> size_t"""
        return _DataModel.PublicObject_ObjectCount()

    if _newclass:ObjectCount = staticmethod(ObjectCount)
    __swig_getmethods__["ObjectCount"] = lambda x: ObjectCount
    def Begin():
        """Begin() -> Seiscomp::DataModel::PublicObject::Iterator"""
        return _DataModel.PublicObject_Begin()

    if _newclass:Begin = staticmethod(Begin)
    __swig_getmethods__["Begin"] = lambda x: Begin
    def End():
        """End() -> Seiscomp::DataModel::PublicObject::Iterator"""
        return _DataModel.PublicObject_End()

    if _newclass:End = staticmethod(End)
    __swig_getmethods__["End"] = lambda x: End
    def SetIdGeneration(*args):
        """SetIdGeneration(bool arg1)"""
        return _DataModel.PublicObject_SetIdGeneration(*args)

    if _newclass:SetIdGeneration = staticmethod(SetIdGeneration)
    __swig_getmethods__["SetIdGeneration"] = lambda x: SetIdGeneration
    def SetIdPattern(*args):
        """SetIdPattern(std::string const & pattern)"""
        return _DataModel.PublicObject_SetIdPattern(*args)

    if _newclass:SetIdPattern = staticmethod(SetIdPattern)
    __swig_getmethods__["SetIdPattern"] = lambda x: SetIdPattern
    def GenerateId(*args):
        """
        GenerateId(PublicObject object) -> PublicObject
        GenerateId(PublicObject object, std::string const & pattern) -> PublicObject
        """
        return _DataModel.PublicObject_GenerateId(*args)

    if _newclass:GenerateId = staticmethod(GenerateId)
    __swig_getmethods__["GenerateId"] = lambda x: GenerateId
    def SetRegistrationEnabled(*args):
        """SetRegistrationEnabled(bool enable)"""
        return _DataModel.PublicObject_SetRegistrationEnabled(*args)

    if _newclass:SetRegistrationEnabled = staticmethod(SetRegistrationEnabled)
    __swig_getmethods__["SetRegistrationEnabled"] = lambda x: SetRegistrationEnabled
    def IsRegistrationEnabled():
        """IsRegistrationEnabled() -> bool"""
        return _DataModel.PublicObject_IsRegistrationEnabled()

    if _newclass:IsRegistrationEnabled = staticmethod(IsRegistrationEnabled)
    __swig_getmethods__["IsRegistrationEnabled"] = lambda x: IsRegistrationEnabled
    def updateChild(self, *args):
        """updateChild(PublicObject self, Object arg2) -> bool"""
        return _DataModel.PublicObject_updateChild(self, *args)

    def accept(self, *args):
        """accept(PublicObject self, Visitor arg2)"""
        return _DataModel.PublicObject_accept(self, *args)

PublicObject_swigregister = _DataModel.PublicObject_swigregister
PublicObject_swigregister(PublicObject)

def PublicObject_ClassName():
  """PublicObject_ClassName() -> char const *"""
  return _DataModel.PublicObject_ClassName()

def PublicObject_TypeInfo():
  """PublicObject_TypeInfo() -> RTTI"""
  return _DataModel.PublicObject_TypeInfo()

def PublicObject_Cast(*args):
  """
    Cast(BaseObject o) -> PublicObject
    PublicObject_Cast(Seiscomp::Core::BaseObjectPtr o) -> PublicObject
    """
  return _DataModel.PublicObject_Cast(*args)

def PublicObject_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> PublicObject
    PublicObject_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> PublicObject
    """
  return _DataModel.PublicObject_ConstCast(*args)

def PublicObject_Find(*args):
  """PublicObject_Find(std::string const & publicID) -> PublicObject"""
  return _DataModel.PublicObject_Find(*args)

def PublicObject_ObjectCount():
  """PublicObject_ObjectCount() -> size_t"""
  return _DataModel.PublicObject_ObjectCount()

def PublicObject_Begin():
  """PublicObject_Begin() -> Seiscomp::DataModel::PublicObject::Iterator"""
  return _DataModel.PublicObject_Begin()

def PublicObject_End():
  """PublicObject_End() -> Seiscomp::DataModel::PublicObject::Iterator"""
  return _DataModel.PublicObject_End()

def PublicObject_SetIdGeneration(*args):
  """PublicObject_SetIdGeneration(bool arg1)"""
  return _DataModel.PublicObject_SetIdGeneration(*args)

def PublicObject_SetIdPattern(*args):
  """PublicObject_SetIdPattern(std::string const & pattern)"""
  return _DataModel.PublicObject_SetIdPattern(*args)

def PublicObject_GenerateId(*args):
  """
    GenerateId(PublicObject object) -> PublicObject
    PublicObject_GenerateId(PublicObject object, std::string const & pattern) -> PublicObject
    """
  return _DataModel.PublicObject_GenerateId(*args)

def PublicObject_SetRegistrationEnabled(*args):
  """PublicObject_SetRegistrationEnabled(bool enable)"""
  return _DataModel.PublicObject_SetRegistrationEnabled(*args)

def PublicObject_IsRegistrationEnabled():
  """PublicObject_IsRegistrationEnabled() -> bool"""
  return _DataModel.PublicObject_IsRegistrationEnabled()

class DatabaseIterator(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::DatabaseIterator class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DatabaseIterator self) -> DatabaseIterator
        __init__(Seiscomp::DataModel::DatabaseIterator self, DatabaseIterator iter) -> DatabaseIterator
        """
        this = _DataModel.new_DatabaseIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseIterator
    __del__ = lambda self : None;
    def get(self):
        """get(DatabaseIterator self) -> Object"""
        return _DataModel.DatabaseIterator_get(self)

    def fieldCount(self):
        """fieldCount(DatabaseIterator self) -> size_t"""
        return _DataModel.DatabaseIterator_fieldCount(self)

    def field(self, *args):
        """field(DatabaseIterator self, size_t index) -> char const *"""
        return _DataModel.DatabaseIterator_field(self, *args)

    def __ref__(self):
        """__ref__(DatabaseIterator self) -> Object"""
        return _DataModel.DatabaseIterator___ref__(self)

    def valid(self):
        """valid(DatabaseIterator self) -> bool"""
        return _DataModel.DatabaseIterator_valid(self)

    def next(self):
        """next(DatabaseIterator self) -> bool"""
        return _DataModel.DatabaseIterator_next(self)

    def close(self):
        """close(DatabaseIterator self)"""
        return _DataModel.DatabaseIterator_close(self)

    def count(self):
        """count(DatabaseIterator self) -> size_t"""
        return _DataModel.DatabaseIterator_count(self)

    def lastModified(self):
        """lastModified(DatabaseIterator self) -> Time"""
        return _DataModel.DatabaseIterator_lastModified(self)

    def oid(self):
        """oid(DatabaseIterator self) -> int"""
        return _DataModel.DatabaseIterator_oid(self)

    def parentOid(self):
        """parentOid(DatabaseIterator self) -> int"""
        return _DataModel.DatabaseIterator_parentOid(self)

    def cached(self):
        """cached(DatabaseIterator self) -> bool"""
        return _DataModel.DatabaseIterator_cached(self)

    def step(self):
        """step(DatabaseIterator self)"""
        return _DataModel.DatabaseIterator_step(self)

    def __iter__(self):
        return self

    def next(self):
        o = self.get()
        if not o:
            raise StopIteration

        self.step()
        return o

DatabaseIterator_swigregister = _DataModel.DatabaseIterator_swigregister
DatabaseIterator_swigregister(DatabaseIterator)

class DatabaseObjectWriter(_object):
    """Proxy of C++ Seiscomp::DataModel::DatabaseObjectWriter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseObjectWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseObjectWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DatabaseObjectWriter self, DatabaseArchive archive, bool addToDatabase=True, int batchSize=1) -> DatabaseObjectWriter
        __init__(Seiscomp::DataModel::DatabaseObjectWriter self, DatabaseArchive archive, bool addToDatabase=True) -> DatabaseObjectWriter
        __init__(Seiscomp::DataModel::DatabaseObjectWriter self, DatabaseArchive archive) -> DatabaseObjectWriter
        """
        this = _DataModel.new_DatabaseObjectWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(DatabaseObjectWriter self, Object object) -> bool
        __call__(DatabaseObjectWriter self, Object object, std::string const & parentID) -> bool
        """
        return _DataModel.DatabaseObjectWriter___call__(self, *args)

    def count(self):
        """count(DatabaseObjectWriter self) -> int"""
        return _DataModel.DatabaseObjectWriter_count(self)

    def errors(self):
        """errors(DatabaseObjectWriter self) -> int"""
        return _DataModel.DatabaseObjectWriter_errors(self)

    __swig_destroy__ = _DataModel.delete_DatabaseObjectWriter
    __del__ = lambda self : None;
DatabaseObjectWriter_swigregister = _DataModel.DatabaseObjectWriter_swigregister
DatabaseObjectWriter_swigregister(DatabaseObjectWriter)

class DatabaseArchive(Observer):
    """Proxy of C++ Seiscomp::DataModel::DatabaseArchive class"""
    __swig_setmethods__ = {}
    for _s in [Observer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Observer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Seiscomp::DataModel::DatabaseArchive self, DatabaseInterface dbDriver) -> DatabaseArchive"""
        this = _DataModel.new_DatabaseArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseArchive
    __del__ = lambda self : None;
    def open(self, *args):
        """open(DatabaseArchive self, char const * dataSource) -> bool"""
        return _DataModel.DatabaseArchive_open(self, *args)

    def close(self):
        """close(DatabaseArchive self)"""
        return _DataModel.DatabaseArchive_close(self)

    def driver(self):
        """driver(DatabaseArchive self) -> DatabaseInterface"""
        return _DataModel.DatabaseArchive_driver(self)

    def setDriver(self, *args):
        """setDriver(DatabaseArchive self, DatabaseInterface arg2)"""
        return _DataModel.DatabaseArchive_setDriver(self, *args)

    def setPublicObjectCacheLookupEnabled(self, *args):
        """setPublicObjectCacheLookupEnabled(DatabaseArchive self, bool e)"""
        return _DataModel.DatabaseArchive_setPublicObjectCacheLookupEnabled(self, *args)

    def isPublicObjectCacheLookupEnabled(self):
        """isPublicObjectCacheLookupEnabled(DatabaseArchive self) -> bool"""
        return _DataModel.DatabaseArchive_isPublicObjectCacheLookupEnabled(self)

    def hasError(self):
        """hasError(DatabaseArchive self) -> bool"""
        return _DataModel.DatabaseArchive_hasError(self)

    def errorMsg(self):
        """errorMsg(DatabaseArchive self) -> std::string const"""
        return _DataModel.DatabaseArchive_errorMsg(self)

    def benchmarkQueries(self, *args):
        """benchmarkQueries(DatabaseArchive self, int count)"""
        return _DataModel.DatabaseArchive_benchmarkQueries(self, *args)

    def getObject(self, *args):
        """getObject(DatabaseArchive self, RTTI classType, std::string const & publicID) -> PublicObject"""
        return _DataModel.DatabaseArchive_getObject(self, *args)

    def getObjects(self, *args):
        """
        getObjects(DatabaseArchive self, std::string const & parentID, RTTI classType) -> DatabaseIterator
        getObjects(DatabaseArchive self, PublicObject parent, RTTI classType) -> DatabaseIterator
        """
        return _DataModel.DatabaseArchive_getObjects(self, *args)

    def getObjectCount(self, *args):
        """
        getObjectCount(DatabaseArchive self, std::string const & parentID, RTTI classType) -> size_t
        getObjectCount(DatabaseArchive self, PublicObject parent, RTTI classType) -> size_t
        """
        return _DataModel.DatabaseArchive_getObjectCount(self, *args)

    def parentPublicID(self, *args):
        """parentPublicID(DatabaseArchive self, PublicObject object) -> std::string"""
        return _DataModel.DatabaseArchive_parentPublicID(self, *args)

    def write(self, *args):
        """
        write(DatabaseArchive self, Object object, std::string const & parentID="") -> bool
        write(DatabaseArchive self, Object object) -> bool
        """
        return _DataModel.DatabaseArchive_write(self, *args)

    def update(self, *args):
        """
        update(DatabaseArchive self, Object object, std::string const & parentID="") -> bool
        update(DatabaseArchive self, Object object) -> bool
        """
        return _DataModel.DatabaseArchive_update(self, *args)

    def remove(self, *args):
        """
        remove(DatabaseArchive self, Object object, std::string const & parentID="") -> bool
        remove(DatabaseArchive self, Object object) -> bool
        """
        return _DataModel.DatabaseArchive_remove(self, *args)

    def addTree(self, *args):
        """
        addTree(DatabaseArchive self, Object object, std::string const & parentID="", int * objectsHandled=None) -> bool
        addTree(DatabaseArchive self, Object object, std::string const & parentID="") -> bool
        addTree(DatabaseArchive self, Object object) -> bool
        """
        return _DataModel.DatabaseArchive_addTree(self, *args)

    def removeTree(self, *args):
        """
        removeTree(DatabaseArchive self, Object object, std::string const & parentID="", int * objectsHandled=None) -> bool
        removeTree(DatabaseArchive self, Object object, std::string const & parentID="") -> bool
        removeTree(DatabaseArchive self, Object object) -> bool
        """
        return _DataModel.DatabaseArchive_removeTree(self, *args)

    def getObjectIterator(self, *args):
        """
        getObjectIterator(DatabaseArchive self, std::string const & query, RTTI classType) -> DatabaseIterator
        getObjectIterator(DatabaseArchive self, std::string const & query, RTTI classType) -> DatabaseIterator
        """
        return _DataModel.DatabaseArchive_getObjectIterator(self, *args)

DatabaseArchive_swigregister = _DataModel.DatabaseArchive_swigregister
DatabaseArchive_swigregister(DatabaseArchive)

class CachePopCallback(_object):
    """Proxy of C++ Seiscomp::DataModel::CachePopCallback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CachePopCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CachePopCallback, name)
    __repr__ = _swig_repr
    def handle(self, *args):
        """handle(CachePopCallback self, PublicObject obj)"""
        return _DataModel.CachePopCallback_handle(self, *args)

    __swig_destroy__ = _DataModel.delete_CachePopCallback
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(Seiscomp::DataModel::CachePopCallback self) -> CachePopCallback"""
        if self.__class__ == CachePopCallback:
            _self = None
        else:
            _self = self
        this = _DataModel.new_CachePopCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _DataModel.disown_CachePopCallback(self)
        return weakref_proxy(self)
CachePopCallback_swigregister = _DataModel.CachePopCallback_swigregister
CachePopCallback_swigregister(CachePopCallback)

class PublicObjectCache(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::PublicObjectCache class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObjectCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObjectCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DataModel.delete_PublicObjectCache
    __del__ = lambda self : None;
    def setDatabaseArchive(self, *args):
        """setDatabaseArchive(PublicObjectCache self, DatabaseArchive arg2)"""
        return _DataModel.PublicObjectCache_setDatabaseArchive(self, *args)

    def setPopCallback(self, *args):
        """
        setPopCallback(PublicObjectCache self, Seiscomp::DataModel::PublicObjectCache::PopCallback const & arg2)
        setPopCallback(PublicObjectCache self, CachePopCallback arg2)
        """
        return _DataModel.PublicObjectCache_setPopCallback(self, *args)

    def removePopCallback(self):
        """removePopCallback(PublicObjectCache self)"""
        return _DataModel.PublicObjectCache_removePopCallback(self)

    def feed(self, *args):
        """feed(PublicObjectCache self, PublicObject po) -> bool"""
        return _DataModel.PublicObjectCache_feed(self, *args)

    def remove(self, *args):
        """remove(PublicObjectCache self, PublicObject po) -> bool"""
        return _DataModel.PublicObjectCache_remove(self, *args)

    def clear(self):
        """clear(PublicObjectCache self)"""
        return _DataModel.PublicObjectCache_clear(self)

    def find(self, *args):
        """find(PublicObjectCache self, RTTI classType, std::string const & publicID) -> PublicObject"""
        return _DataModel.PublicObjectCache_find(self, *args)

    def cached(self):
        """cached(PublicObjectCache self) -> bool"""
        return _DataModel.PublicObjectCache_cached(self)

    def timeWindow(self):
        """timeWindow(PublicObjectCache self) -> Seiscomp::Core::TimeWindow"""
        return _DataModel.PublicObjectCache_timeWindow(self)

    def oldest(self):
        """oldest(PublicObjectCache self) -> Time"""
        return _DataModel.PublicObjectCache_oldest(self)

    def empty(self):
        """empty(PublicObjectCache self) -> bool"""
        return _DataModel.PublicObjectCache_empty(self)

    def size(self):
        """size(PublicObjectCache self) -> size_t"""
        return _DataModel.PublicObjectCache_size(self)

    def get(self, klass, publicID):
        o = self.find(klass.TypeInfo(), publicID)
        return klass.Cast(o)

PublicObjectCache_swigregister = _DataModel.PublicObjectCache_swigregister
PublicObjectCache_swigregister(PublicObjectCache)

class PublicObjectRingBuffer(PublicObjectCache):
    """Proxy of C++ Seiscomp::DataModel::PublicObjectRingBuffer class"""
    __swig_setmethods__ = {}
    for _s in [PublicObjectCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObjectRingBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObjectCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObjectRingBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::PublicObjectRingBuffer self) -> PublicObjectRingBuffer
        __init__(Seiscomp::DataModel::PublicObjectRingBuffer self, DatabaseArchive ar, size_t bufferSize) -> PublicObjectRingBuffer
        """
        this = _DataModel.new_PublicObjectRingBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def setBufferSize(self, *args):
        """setBufferSize(PublicObjectRingBuffer self, size_t bufferSize) -> bool"""
        return _DataModel.PublicObjectRingBuffer_setBufferSize(self, *args)

    def feed(self, *args):
        """feed(PublicObjectRingBuffer self, PublicObject po) -> bool"""
        return _DataModel.PublicObjectRingBuffer_feed(self, *args)

    __swig_destroy__ = _DataModel.delete_PublicObjectRingBuffer
    __del__ = lambda self : None;
PublicObjectRingBuffer_swigregister = _DataModel.PublicObjectRingBuffer_swigregister
PublicObjectRingBuffer_swigregister(PublicObjectRingBuffer)

class PublicObjectTimeSpanBuffer(PublicObjectCache):
    """Proxy of C++ Seiscomp::DataModel::PublicObjectTimeSpanBuffer class"""
    __swig_setmethods__ = {}
    for _s in [PublicObjectCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicObjectTimeSpanBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObjectCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicObjectTimeSpanBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::PublicObjectTimeSpanBuffer self) -> PublicObjectTimeSpanBuffer
        __init__(Seiscomp::DataModel::PublicObjectTimeSpanBuffer self, DatabaseArchive ar, TimeSpan length) -> PublicObjectTimeSpanBuffer
        """
        this = _DataModel.new_PublicObjectTimeSpanBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTimeSpan(self, *args):
        """setTimeSpan(PublicObjectTimeSpanBuffer self, TimeSpan arg2) -> bool"""
        return _DataModel.PublicObjectTimeSpanBuffer_setTimeSpan(self, *args)

    def feed(self, *args):
        """feed(PublicObjectTimeSpanBuffer self, PublicObject po) -> bool"""
        return _DataModel.PublicObjectTimeSpanBuffer_feed(self, *args)

    __swig_destroy__ = _DataModel.delete_PublicObjectTimeSpanBuffer
    __del__ = lambda self : None;
PublicObjectTimeSpanBuffer_swigregister = _DataModel.PublicObjectTimeSpanBuffer_swigregister
PublicObjectTimeSpanBuffer_swigregister(PublicObjectTimeSpanBuffer)

class NotifierMessage(NotifierMessageBase):
    """Proxy of C++ Seiscomp::DataModel::NotifierMessage class"""
    __swig_setmethods__ = {}
    for _s in [NotifierMessageBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [NotifierMessageBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierMessage, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.NotifierMessage_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.NotifierMessage_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(NotifierMessage self) -> char const *"""
        return _DataModel.NotifierMessage_className(self)

    def typeInfo(self):
        """typeInfo(NotifierMessage self) -> RTTI"""
        return _DataModel.NotifierMessage_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> NotifierMessage
        Cast(Seiscomp::Core::BaseObjectPtr o) -> NotifierMessage
        """
        return _DataModel.NotifierMessage_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> NotifierMessage
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> NotifierMessage
        """
        return _DataModel.NotifierMessage_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def __init__(self): 
        """__init__(Seiscomp::DataModel::NotifierMessage self) -> NotifierMessage"""
        this = _DataModel.new_NotifierMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NotifierMessage
    __del__ = lambda self : None;
NotifierMessage_swigregister = _DataModel.NotifierMessage_swigregister
NotifierMessage_swigregister(NotifierMessage)

def NotifierMessage_ClassName():
  """NotifierMessage_ClassName() -> char const *"""
  return _DataModel.NotifierMessage_ClassName()

def NotifierMessage_TypeInfo():
  """NotifierMessage_TypeInfo() -> RTTI"""
  return _DataModel.NotifierMessage_TypeInfo()

def NotifierMessage_Cast(*args):
  """
    Cast(BaseObject o) -> NotifierMessage
    NotifierMessage_Cast(Seiscomp::Core::BaseObjectPtr o) -> NotifierMessage
    """
  return _DataModel.NotifierMessage_Cast(*args)

def NotifierMessage_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> NotifierMessage
    NotifierMessage_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> NotifierMessage
    """
  return _DataModel.NotifierMessage_ConstCast(*args)

class Notifier(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Notifier class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Notifier, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Notifier, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Notifier_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Notifier_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Notifier self) -> char const *"""
        return _DataModel.Notifier_className(self)

    def typeInfo(self):
        """typeInfo(Notifier self) -> RTTI"""
        return _DataModel.Notifier_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Notifier
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Notifier
        """
        return _DataModel.Notifier_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Notifier
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Notifier
        """
        return _DataModel.Notifier_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Notifier self, GenericArchive ar)"""
        return _DataModel.Notifier_serialize(self, *args)

    CR_DIFFERENT = _DataModel.Notifier_CR_DIFFERENT
    CR_EQUAL = _DataModel.Notifier_CR_EQUAL
    CR_OPPOSITE = _DataModel.Notifier_CR_OPPOSITE
    CR_OVERRIDE = _DataModel.Notifier_CR_OVERRIDE
    CR_QUANTITY = _DataModel.Notifier_CR_QUANTITY
    def __init__(self, *args): 
        """__init__(Seiscomp::DataModel::Notifier self, std::string const & parentID, Seiscomp::DataModel::Operation arg3, Object object) -> Notifier"""
        this = _DataModel.new_Notifier(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Notifier
    __del__ = lambda self : None;
    def Enable():
        """Enable()"""
        return _DataModel.Notifier_Enable()

    if _newclass:Enable = staticmethod(Enable)
    __swig_getmethods__["Enable"] = lambda x: Enable
    def Disable():
        """Disable()"""
        return _DataModel.Notifier_Disable()

    if _newclass:Disable = staticmethod(Disable)
    __swig_getmethods__["Disable"] = lambda x: Disable
    def SetEnabled(*args):
        """SetEnabled(bool arg1)"""
        return _DataModel.Notifier_SetEnabled(*args)

    if _newclass:SetEnabled = staticmethod(SetEnabled)
    __swig_getmethods__["SetEnabled"] = lambda x: SetEnabled
    def IsEnabled():
        """IsEnabled() -> bool"""
        return _DataModel.Notifier_IsEnabled()

    if _newclass:IsEnabled = staticmethod(IsEnabled)
    __swig_getmethods__["IsEnabled"] = lambda x: IsEnabled
    def SetCheckEnabled(*args):
        """SetCheckEnabled(bool arg1)"""
        return _DataModel.Notifier_SetCheckEnabled(*args)

    if _newclass:SetCheckEnabled = staticmethod(SetCheckEnabled)
    __swig_getmethods__["SetCheckEnabled"] = lambda x: SetCheckEnabled
    def IsCheckEnabled():
        """IsCheckEnabled() -> bool"""
        return _DataModel.Notifier_IsCheckEnabled()

    if _newclass:IsCheckEnabled = staticmethod(IsCheckEnabled)
    __swig_getmethods__["IsCheckEnabled"] = lambda x: IsCheckEnabled
    def GetMessage(allNotifier=True):
        """
        GetMessage(bool allNotifier=True) -> NotifierMessage
        GetMessage() -> NotifierMessage
        """
        return _DataModel.Notifier_GetMessage(allNotifier)

    if _newclass:GetMessage = staticmethod(GetMessage)
    __swig_getmethods__["GetMessage"] = lambda x: GetMessage
    def Size():
        """Size() -> size_t"""
        return _DataModel.Notifier_Size()

    if _newclass:Size = staticmethod(Size)
    __swig_getmethods__["Size"] = lambda x: Size
    def Clear():
        """Clear()"""
        return _DataModel.Notifier_Clear()

    if _newclass:Clear = staticmethod(Clear)
    __swig_getmethods__["Clear"] = lambda x: Clear
    def Create(*args):
        """
        Create(std::string const & parentID, Seiscomp::DataModel::Operation op, Object object) -> Notifier
        Create(PublicObject parent, Seiscomp::DataModel::Operation op, Object object) -> Notifier
        """
        return _DataModel.Notifier_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def apply(self):
        """apply(Notifier self) -> bool"""
        return _DataModel.Notifier_apply(self)

    def setParentID(self, *args):
        """setParentID(Notifier self, std::string const & arg2)"""
        return _DataModel.Notifier_setParentID(self, *args)

    def parentID(self):
        """parentID(Notifier self) -> std::string const &"""
        return _DataModel.Notifier_parentID(self)

    def setOperation(self, *args):
        """setOperation(Notifier self, Seiscomp::DataModel::Operation arg2)"""
        return _DataModel.Notifier_setOperation(self, *args)

    def operation(self):
        """operation(Notifier self) -> Seiscomp::DataModel::Operation"""
        return _DataModel.Notifier_operation(self)

    def setObject(self, *args):
        """setObject(Notifier self, Object object)"""
        return _DataModel.Notifier_setObject(self, *args)

    def object(self):
        """object(Notifier self) -> Object"""
        return _DataModel.Notifier_object(self)

    def cmp(self, *args):
        """
        cmp(Notifier self, Notifier arg2) -> Seiscomp::DataModel::Notifier::CompareResult
        cmp(Notifier self, Notifier arg2) -> Seiscomp::DataModel::Notifier::CompareResult
        """
        return _DataModel.Notifier_cmp(self, *args)

Notifier_swigregister = _DataModel.Notifier_swigregister
Notifier_swigregister(Notifier)

def Notifier_ClassName():
  """Notifier_ClassName() -> char const *"""
  return _DataModel.Notifier_ClassName()

def Notifier_TypeInfo():
  """Notifier_TypeInfo() -> RTTI"""
  return _DataModel.Notifier_TypeInfo()

def Notifier_Cast(*args):
  """
    Cast(BaseObject o) -> Notifier
    Notifier_Cast(Seiscomp::Core::BaseObjectPtr o) -> Notifier
    """
  return _DataModel.Notifier_Cast(*args)

def Notifier_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Notifier
    Notifier_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Notifier
    """
  return _DataModel.Notifier_ConstCast(*args)

def Notifier_Enable():
  """Notifier_Enable()"""
  return _DataModel.Notifier_Enable()

def Notifier_Disable():
  """Notifier_Disable()"""
  return _DataModel.Notifier_Disable()

def Notifier_SetEnabled(*args):
  """Notifier_SetEnabled(bool arg1)"""
  return _DataModel.Notifier_SetEnabled(*args)

def Notifier_IsEnabled():
  """Notifier_IsEnabled() -> bool"""
  return _DataModel.Notifier_IsEnabled()

def Notifier_SetCheckEnabled(*args):
  """Notifier_SetCheckEnabled(bool arg1)"""
  return _DataModel.Notifier_SetCheckEnabled(*args)

def Notifier_IsCheckEnabled():
  """Notifier_IsCheckEnabled() -> bool"""
  return _DataModel.Notifier_IsCheckEnabled()

def Notifier_GetMessage(allNotifier=True):
  """
    GetMessage(bool allNotifier=True) -> NotifierMessage
    Notifier_GetMessage() -> NotifierMessage
    """
  return _DataModel.Notifier_GetMessage(allNotifier)

def Notifier_Size():
  """Notifier_Size() -> size_t"""
  return _DataModel.Notifier_Size()

def Notifier_Clear():
  """Notifier_Clear()"""
  return _DataModel.Notifier_Clear()

def Notifier_Create(*args):
  """
    Create(std::string const & parentID, Seiscomp::DataModel::Operation op, Object object) -> Notifier
    Notifier_Create(PublicObject parent, Seiscomp::DataModel::Operation op, Object object) -> Notifier
    """
  return _DataModel.Notifier_Create(*args)

class NotifierCreator(Visitor):
    """Proxy of C++ Seiscomp::DataModel::NotifierCreator class"""
    __swig_setmethods__ = {}
    for _s in [Visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifierCreator, name, value)
    __swig_getmethods__ = {}
    for _s in [Visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifierCreator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Seiscomp::DataModel::NotifierCreator self, Seiscomp::DataModel::Operation op) -> NotifierCreator"""
        this = _DataModel.new_NotifierCreator(*args)
        try: self.this.append(this)
        except: self.this = this
    def visit(self, *args):
        """
        visit(NotifierCreator self, PublicObject arg2) -> bool
        visit(NotifierCreator self, Object arg2)
        """
        return _DataModel.NotifierCreator_visit(self, *args)

    __swig_destroy__ = _DataModel.delete_NotifierCreator
    __del__ = lambda self : None;
NotifierCreator_swigregister = _DataModel.NotifierCreator_swigregister
NotifierCreator_swigregister(NotifierCreator)

class ArtificialOriginMessage(Core.Message):
    """Proxy of C++ Seiscomp::DataModel::ArtificialOriginMessage class"""
    __swig_setmethods__ = {}
    for _s in [Core.Message]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArtificialOriginMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.Message]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArtificialOriginMessage, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArtificialOriginMessage_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArtificialOriginMessage_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArtificialOriginMessage self) -> char const *"""
        return _DataModel.ArtificialOriginMessage_className(self)

    def typeInfo(self):
        """typeInfo(ArtificialOriginMessage self) -> RTTI"""
        return _DataModel.ArtificialOriginMessage_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArtificialOriginMessage
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArtificialOriginMessage
        """
        return _DataModel.ArtificialOriginMessage_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArtificialOriginMessage
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArtificialOriginMessage
        """
        return _DataModel.ArtificialOriginMessage_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArtificialOriginMessage self, GenericArchive ar)"""
        return _DataModel.ArtificialOriginMessage_serialize(self, *args)

    def __init__(self, *args): 
        """__init__(Seiscomp::DataModel::ArtificialOriginMessage self, Origin origin) -> ArtificialOriginMessage"""
        this = _DataModel.new_ArtificialOriginMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    def origin(self):
        """origin(ArtificialOriginMessage self) -> Origin"""
        return _DataModel.ArtificialOriginMessage_origin(self)

    def setOrigin(self, *args):
        """setOrigin(ArtificialOriginMessage self, Origin origin)"""
        return _DataModel.ArtificialOriginMessage_setOrigin(self, *args)

    def empty(self):
        """empty(ArtificialOriginMessage self) -> bool"""
        return _DataModel.ArtificialOriginMessage_empty(self)

    __swig_destroy__ = _DataModel.delete_ArtificialOriginMessage
    __del__ = lambda self : None;
ArtificialOriginMessage_swigregister = _DataModel.ArtificialOriginMessage_swigregister
ArtificialOriginMessage_swigregister(ArtificialOriginMessage)

def ArtificialOriginMessage_ClassName():
  """ArtificialOriginMessage_ClassName() -> char const *"""
  return _DataModel.ArtificialOriginMessage_ClassName()

def ArtificialOriginMessage_TypeInfo():
  """ArtificialOriginMessage_TypeInfo() -> RTTI"""
  return _DataModel.ArtificialOriginMessage_TypeInfo()

def ArtificialOriginMessage_Cast(*args):
  """
    Cast(BaseObject o) -> ArtificialOriginMessage
    ArtificialOriginMessage_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArtificialOriginMessage
    """
  return _DataModel.ArtificialOriginMessage_Cast(*args)

def ArtificialOriginMessage_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArtificialOriginMessage
    ArtificialOriginMessage_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArtificialOriginMessage
    """
  return _DataModel.ArtificialOriginMessage_ConstCast(*args)


def eventRegion(*args):
  """eventRegion(Event arg1) -> std::string"""
  return _DataModel.eventRegion(*args)
NETWORK_CODE_NOT_FOUND = _DataModel.NETWORK_CODE_NOT_FOUND
NETWORK_EPOCH_NOT_FOUND = _DataModel.NETWORK_EPOCH_NOT_FOUND
STATION_CODE_NOT_FOUND = _DataModel.STATION_CODE_NOT_FOUND
STATION_EPOCH_NOT_FOUND = _DataModel.STATION_EPOCH_NOT_FOUND
SENSOR_CODE_NOT_FOUND = _DataModel.SENSOR_CODE_NOT_FOUND
SENSOR_EPOCH_NOT_FOUND = _DataModel.SENSOR_EPOCH_NOT_FOUND
STREAM_CODE_NOT_FOUND = _DataModel.STREAM_CODE_NOT_FOUND
STREAM_EPOCH_NOT_FOUND = _DataModel.STREAM_EPOCH_NOT_FOUND
EInventoryErrorQuantity = _DataModel.EInventoryErrorQuantity
class EInventoryErrorNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EInventoryErrorNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EInventoryErrorNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EInventoryErrorNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EInventoryErrorNames self) -> EInventoryErrorNames"""
        this = _DataModel.new_EInventoryErrorNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EInventoryErrorNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EInventoryErrorNames
    __del__ = lambda self : None;
EInventoryErrorNames_swigregister = _DataModel.EInventoryErrorNames_swigregister
EInventoryErrorNames_swigregister(EInventoryErrorNames)

def EInventoryErrorNames_name(*args):
  """EInventoryErrorNames_name(int i) -> char const *"""
  return _DataModel.EInventoryErrorNames_name(*args)


def getStation(*args):
  """
    getStation(Inventory inventory, std::string const & networkCode, std::string const & stationCode, 
        Time arg4, Seiscomp::DataModel::InventoryError * error=None) -> Station
    getStation(Inventory inventory, std::string const & networkCode, std::string const & stationCode, 
        Time arg4) -> Station
    getStation(Inventory inventory, Pick pick) -> Station
    """
  return _DataModel.getStation(*args)

def getSensorLocation(*args):
  """
    getSensorLocation(Inventory inventory, std::string const & networkCode, std::string const & stationCode, 
        std::string const & locationCode, Time arg5, Seiscomp::DataModel::InventoryError * error=None) -> SensorLocation
    getSensorLocation(Inventory inventory, std::string const & networkCode, std::string const & stationCode, 
        std::string const & locationCode, Time arg5) -> SensorLocation
    getSensorLocation(Inventory inventory, Pick pick) -> SensorLocation
    """
  return _DataModel.getSensorLocation(*args)

def getStream(*args):
  """
    getStream(Inventory inventory, std::string const & networkCode, std::string const & stationCode, 
        std::string const & locationCode, std::string const & channelCode, Time arg6, 
        Seiscomp::DataModel::InventoryError * error=None) -> Stream
    getStream(Inventory inventory, std::string const & networkCode, std::string const & stationCode, 
        std::string const & locationCode, std::string const & channelCode, Time arg6) -> Stream
    getStream(Inventory inventory, Pick pick) -> Stream
    """
  return _DataModel.getStream(*args)
class ThreeComponents(_object):
    """Proxy of C++ Seiscomp::DataModel::ThreeComponents class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeComponents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeComponents, name)
    __repr__ = _swig_repr
    Vertical = _DataModel.ThreeComponents_Vertical
    FirstHorizontal = _DataModel.ThreeComponents_FirstHorizontal
    SecondHorizontal = _DataModel.ThreeComponents_SecondHorizontal
    def vertical(self):
        """vertical(ThreeComponents self) -> Stream"""
        return _DataModel.ThreeComponents_vertical(self)

    def firstHorizontal(self):
        """firstHorizontal(ThreeComponents self) -> Stream"""
        return _DataModel.ThreeComponents_firstHorizontal(self)

    def secondHorizontal(self):
        """secondHorizontal(ThreeComponents self) -> Stream"""
        return _DataModel.ThreeComponents_secondHorizontal(self)

    def __init__(self): 
        """__init__(Seiscomp::DataModel::ThreeComponents self) -> ThreeComponents"""
        this = _DataModel.new_ThreeComponents()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["comps"] = _DataModel.ThreeComponents_comps_set
    __swig_getmethods__["comps"] = _DataModel.ThreeComponents_comps_get
    if _newclass:comps = _swig_property(_DataModel.ThreeComponents_comps_get, _DataModel.ThreeComponents_comps_set)
    __swig_destroy__ = _DataModel.delete_ThreeComponents
    __del__ = lambda self : None;
ThreeComponents_swigregister = _DataModel.ThreeComponents_swigregister
ThreeComponents_swigregister(ThreeComponents)


def getVerticalComponent(*args):
  """getVerticalComponent(SensorLocation loc, char const * streamCode, Time time) -> Stream"""
  return _DataModel.getVerticalComponent(*args)

def getThreeComponents(*args):
  """getThreeComponents(ThreeComponents res, SensorLocation loc, char const * streamCode, Time time) -> bool"""
  return _DataModel.getThreeComponents(*args)

def findSetup(*args):
  """
    findSetup(ConfigStation configStation, std::string const & setupName, bool allowGlobal=True) -> Setup
    findSetup(ConfigStation configStation, std::string const & setupName) -> Setup
    """
  return _DataModel.findSetup(*args)

def copy(*args):
  """copy(Object obj) -> Object"""
  return _DataModel.copy(*args)
class DiffMerge(_object):
    """Proxy of C++ Seiscomp::DataModel::DiffMerge class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffMerge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiffMerge, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::DiffMerge self) -> DiffMerge"""
        this = _DataModel.new_DiffMerge()
        try: self.this.append(this)
        except: self.this = this
    def setLoggingLevel(self, *args):
        """setLoggingLevel(DiffMerge self, int level)"""
        return _DataModel.DiffMerge_setLoggingLevel(self, *args)

    def showLog(self, *args):
        """
        showLog(DiffMerge self, std::ostream & os=std::cerr, int padding=0, int indent=1, bool ignoreFirstPad=False)
        showLog(DiffMerge self, std::ostream & os=std::cerr, int padding=0, int indent=1)
        showLog(DiffMerge self, std::ostream & os=std::cerr, int padding=0)
        showLog(DiffMerge self, std::ostream & os=std::cerr)
        showLog(DiffMerge self)
        """
        return _DataModel.DiffMerge_showLog(self, *args)

    def find(self, *args):
        """find(DiffMerge self, Object tree, Object node) -> Object"""
        return _DataModel.DiffMerge_find(self, *args)

    def diff(self, *args):
        """diff(DiffMerge self, Object o1, Object o2, std::vector< Seiscomp::DataModel::NotifierPtr,std::allocator< Seiscomp::DataModel::NotifierPtr > > & diffList) -> bool"""
        return _DataModel.DiffMerge_diff(self, *args)

    def diff2Message(self, *args):
        """diff2Message(DiffMerge self, Object o1, Object o2) -> NotifierMessage"""
        return _DataModel.DiffMerge_diff2Message(self, *args)

    def merge(self, *args):
        """
        merge(DiffMerge self, Object tree, Object node, std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > & idMap) -> bool
        merge(DiffMerge self, Object mergeResult, std::vector< Seiscomp::DataModel::Object *,std::allocator< Seiscomp::DataModel::Object * > > const & objects) -> bool
        """
        return _DataModel.DiffMerge_merge(self, *args)

    def validateReferences(self, *args):
        """validateReferences(DiffMerge self, Object o) -> bool"""
        return _DataModel.DiffMerge_validateReferences(self, *args)

    def mapReferences(self, *args):
        """mapReferences(DiffMerge self, Object o, std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const & publicIDMap) -> size_t"""
        return _DataModel.DiffMerge_mapReferences(self, *args)

    def compareObjects(self, *args):
        """compareObjects(DiffMerge self, Object o1, Object o2) -> bool"""
        return _DataModel.DiffMerge_compareObjects(self, *args)

    __swig_destroy__ = _DataModel.delete_DiffMerge
    __del__ = lambda self : None;
DiffMerge_swigregister = _DataModel.DiffMerge_swigregister
DiffMerge_swigregister(DiffMerge)

class Diff2(_object):
    """Proxy of C++ Seiscomp::DataModel::Diff2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Diff2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Diff2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::Diff2 self) -> Diff2"""
        this = _DataModel.new_Diff2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Diff2
    __del__ = lambda self : None;
    def diff2Message(self, *args):
        """
        diff2Message(Diff2 self, Object o1, Object o2, std::string const & o1ParentID, Seiscomp::DataModel::Diff2::LogNode * logNode=None) -> NotifierMessage
        diff2Message(Diff2 self, Object o1, Object o2, std::string const & o1ParentID) -> NotifierMessage
        """
        return _DataModel.Diff2_diff2Message(self, *args)

Diff2_swigregister = _DataModel.Diff2_swigregister
Diff2_swigregister(Diff2)

HORIZONTAL = _DataModel.HORIZONTAL
ELLIPSE = _DataModel.ELLIPSE
ELLIPSOID = _DataModel.ELLIPSOID
PDF = _DataModel.PDF
EOriginUncertaintyDescriptionQuantity = _DataModel.EOriginUncertaintyDescriptionQuantity
class EOriginUncertaintyDescriptionNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EOriginUncertaintyDescriptionNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOriginUncertaintyDescriptionNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOriginUncertaintyDescriptionNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EOriginUncertaintyDescriptionNames self) -> EOriginUncertaintyDescriptionNames"""
        this = _DataModel.new_EOriginUncertaintyDescriptionNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EOriginUncertaintyDescriptionNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EOriginUncertaintyDescriptionNames
    __del__ = lambda self : None;
EOriginUncertaintyDescriptionNames_swigregister = _DataModel.EOriginUncertaintyDescriptionNames_swigregister
EOriginUncertaintyDescriptionNames_swigregister(EOriginUncertaintyDescriptionNames)

def EOriginUncertaintyDescriptionNames_name(*args):
  """EOriginUncertaintyDescriptionNames_name(int i) -> char const *"""
  return _DataModel.EOriginUncertaintyDescriptionNames_name(*args)

CMT_S = _DataModel.CMT_S
CMT_Q = _DataModel.CMT_Q
EMomentTensorStatusQuantity = _DataModel.EMomentTensorStatusQuantity
class EMomentTensorStatusNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EMomentTensorStatusNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMomentTensorStatusNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMomentTensorStatusNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EMomentTensorStatusNames self) -> EMomentTensorStatusNames"""
        this = _DataModel.new_EMomentTensorStatusNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EMomentTensorStatusNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EMomentTensorStatusNames
    __del__ = lambda self : None;
EMomentTensorStatusNames_swigregister = _DataModel.EMomentTensorStatusNames_swigregister
EMomentTensorStatusNames_swigregister(EMomentTensorStatusNames)

def EMomentTensorStatusNames_name(*args):
  """EMomentTensorStatusNames_name(int i) -> char const *"""
  return _DataModel.EMomentTensorStatusNames_name(*args)

FROM_LOCATION = _DataModel.FROM_LOCATION
FROM_MOMENT_TENSOR_INVERSION = _DataModel.FROM_MOMENT_TENSOR_INVERSION
BROAD_BAND_P_WAVEFORMS = _DataModel.BROAD_BAND_P_WAVEFORMS
CONSTRAINED_BY_DEPTH_PHASES = _DataModel.CONSTRAINED_BY_DEPTH_PHASES
CONSTRAINED_BY_DIRECT_PHASES = _DataModel.CONSTRAINED_BY_DIRECT_PHASES
OPERATOR_ASSIGNED = _DataModel.OPERATOR_ASSIGNED
OTHER_ORIGIN_DEPTH = _DataModel.OTHER_ORIGIN_DEPTH
EOriginDepthTypeQuantity = _DataModel.EOriginDepthTypeQuantity
class EOriginDepthTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EOriginDepthTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOriginDepthTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOriginDepthTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EOriginDepthTypeNames self) -> EOriginDepthTypeNames"""
        this = _DataModel.new_EOriginDepthTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EOriginDepthTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EOriginDepthTypeNames
    __del__ = lambda self : None;
EOriginDepthTypeNames_swigregister = _DataModel.EOriginDepthTypeNames_swigregister
EOriginDepthTypeNames_swigregister(EOriginDepthTypeNames)

def EOriginDepthTypeNames_name(*args):
  """EOriginDepthTypeNames_name(int i) -> char const *"""
  return _DataModel.EOriginDepthTypeNames_name(*args)

HYPOCENTER = _DataModel.HYPOCENTER
CENTROID = _DataModel.CENTROID
AMPLITUDE = _DataModel.AMPLITUDE
MACROSEISMIC = _DataModel.MACROSEISMIC
RUPTURE_START = _DataModel.RUPTURE_START
RUPTURE_END = _DataModel.RUPTURE_END
EOriginTypeQuantity = _DataModel.EOriginTypeQuantity
class EOriginTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EOriginTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EOriginTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EOriginTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EOriginTypeNames self) -> EOriginTypeNames"""
        this = _DataModel.new_EOriginTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EOriginTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EOriginTypeNames
    __del__ = lambda self : None;
EOriginTypeNames_swigregister = _DataModel.EOriginTypeNames_swigregister
EOriginTypeNames_swigregister(EOriginTypeNames)

def EOriginTypeNames_name(*args):
  """EOriginTypeNames_name(int i) -> char const *"""
  return _DataModel.EOriginTypeNames_name(*args)

MANUAL = _DataModel.MANUAL
AUTOMATIC = _DataModel.AUTOMATIC
EEvaluationModeQuantity = _DataModel.EEvaluationModeQuantity
class EEvaluationModeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EEvaluationModeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEvaluationModeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEvaluationModeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EEvaluationModeNames self) -> EEvaluationModeNames"""
        this = _DataModel.new_EEvaluationModeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EEvaluationModeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EEvaluationModeNames
    __del__ = lambda self : None;
EEvaluationModeNames_swigregister = _DataModel.EEvaluationModeNames_swigregister
EEvaluationModeNames_swigregister(EEvaluationModeNames)

def EEvaluationModeNames_name(*args):
  """EEvaluationModeNames_name(int i) -> char const *"""
  return _DataModel.EEvaluationModeNames_name(*args)

PRELIMINARY = _DataModel.PRELIMINARY
CONFIRMED = _DataModel.CONFIRMED
REVIEWED = _DataModel.REVIEWED
FINAL = _DataModel.FINAL
REJECTED = _DataModel.REJECTED
REPORTED = _DataModel.REPORTED
EEvaluationStatusQuantity = _DataModel.EEvaluationStatusQuantity
class EEvaluationStatusNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EEvaluationStatusNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEvaluationStatusNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEvaluationStatusNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EEvaluationStatusNames self) -> EEvaluationStatusNames"""
        this = _DataModel.new_EEvaluationStatusNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EEvaluationStatusNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EEvaluationStatusNames
    __del__ = lambda self : None;
EEvaluationStatusNames_swigregister = _DataModel.EEvaluationStatusNames_swigregister
EEvaluationStatusNames_swigregister(EEvaluationStatusNames)

def EEvaluationStatusNames_name(*args):
  """EEvaluationStatusNames_name(int i) -> char const *"""
  return _DataModel.EEvaluationStatusNames_name(*args)

EMERGENT = _DataModel.EMERGENT
IMPULSIVE = _DataModel.IMPULSIVE
QUESTIONABLE = _DataModel.QUESTIONABLE
EPickOnsetQuantity = _DataModel.EPickOnsetQuantity
class EPickOnsetNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EPickOnsetNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPickOnsetNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPickOnsetNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EPickOnsetNames self) -> EPickOnsetNames"""
        this = _DataModel.new_EPickOnsetNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EPickOnsetNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EPickOnsetNames
    __del__ = lambda self : None;
EPickOnsetNames_swigregister = _DataModel.EPickOnsetNames_swigregister
EPickOnsetNames_swigregister(EPickOnsetNames)

def EPickOnsetNames_name(*args):
  """EPickOnsetNames_name(int i) -> char const *"""
  return _DataModel.EPickOnsetNames_name(*args)

CMT_0 = _DataModel.CMT_0
CMT_1 = _DataModel.CMT_1
CMT_2 = _DataModel.CMT_2
TELESEISMIC = _DataModel.TELESEISMIC
REGIONAL = _DataModel.REGIONAL
EMomentTensorMethodQuantity = _DataModel.EMomentTensorMethodQuantity
class EMomentTensorMethodNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EMomentTensorMethodNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMomentTensorMethodNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMomentTensorMethodNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EMomentTensorMethodNames self) -> EMomentTensorMethodNames"""
        this = _DataModel.new_EMomentTensorMethodNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EMomentTensorMethodNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EMomentTensorMethodNames
    __del__ = lambda self : None;
EMomentTensorMethodNames_swigregister = _DataModel.EMomentTensorMethodNames_swigregister
EMomentTensorMethodNames_swigregister(EMomentTensorMethodNames)

def EMomentTensorMethodNames_name(*args):
  """EMomentTensorMethodNames_name(int i) -> char const *"""
  return _DataModel.EMomentTensorMethodNames_name(*args)

BODY_WAVES = _DataModel.BODY_WAVES
P_BODY_WAVES = _DataModel.P_BODY_WAVES
LONG_PERIOD_BODY_WAVES = _DataModel.LONG_PERIOD_BODY_WAVES
SURFACE_WAVES = _DataModel.SURFACE_WAVES
INTERMEDIATE_PERIOD_SURFACE_WAVES = _DataModel.INTERMEDIATE_PERIOD_SURFACE_WAVES
LONG_PERIOD_MANTLE_WAVES = _DataModel.LONG_PERIOD_MANTLE_WAVES
UNKNOWN_WAVETYPE = _DataModel.UNKNOWN_WAVETYPE
EDataUsedWaveTypeQuantity = _DataModel.EDataUsedWaveTypeQuantity
class EDataUsedWaveTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EDataUsedWaveTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EDataUsedWaveTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EDataUsedWaveTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EDataUsedWaveTypeNames self) -> EDataUsedWaveTypeNames"""
        this = _DataModel.new_EDataUsedWaveTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EDataUsedWaveTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EDataUsedWaveTypeNames
    __del__ = lambda self : None;
EDataUsedWaveTypeNames_swigregister = _DataModel.EDataUsedWaveTypeNames_swigregister
EDataUsedWaveTypeNames_swigregister(EDataUsedWaveTypeNames)

def EDataUsedWaveTypeNames_name(*args):
  """EDataUsedWaveTypeNames_name(int i) -> char const *"""
  return _DataModel.EDataUsedWaveTypeNames_name(*args)

FELT_REPORT = _DataModel.FELT_REPORT
FLINN_ENGDAHL_REGION = _DataModel.FLINN_ENGDAHL_REGION
LOCAL_TIME = _DataModel.LOCAL_TIME
TECTONIC_SUMMARY = _DataModel.TECTONIC_SUMMARY
NEAREST_CITIES = _DataModel.NEAREST_CITIES
EARTHQUAKE_NAME = _DataModel.EARTHQUAKE_NAME
REGION_NAME = _DataModel.REGION_NAME
EEventDescriptionTypeQuantity = _DataModel.EEventDescriptionTypeQuantity
class EEventDescriptionTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EEventDescriptionTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEventDescriptionTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEventDescriptionTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EEventDescriptionTypeNames self) -> EEventDescriptionTypeNames"""
        this = _DataModel.new_EEventDescriptionTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EEventDescriptionTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EEventDescriptionTypeNames
    __del__ = lambda self : None;
EEventDescriptionTypeNames_swigregister = _DataModel.EEventDescriptionTypeNames_swigregister
EEventDescriptionTypeNames_swigregister(EEventDescriptionTypeNames)

def EEventDescriptionTypeNames_name(*args):
  """EEventDescriptionTypeNames_name(int i) -> char const *"""
  return _DataModel.EEventDescriptionTypeNames_name(*args)

NOT_EXISTING = _DataModel.NOT_EXISTING
NOT_LOCATABLE = _DataModel.NOT_LOCATABLE
OUTSIDE_OF_NETWORK_INTEREST = _DataModel.OUTSIDE_OF_NETWORK_INTEREST
EARTHQUAKE = _DataModel.EARTHQUAKE
INDUCED_EARTHQUAKE = _DataModel.INDUCED_EARTHQUAKE
QUARRY_BLAST = _DataModel.QUARRY_BLAST
EXPLOSION = _DataModel.EXPLOSION
CHEMICAL_EXPLOSION = _DataModel.CHEMICAL_EXPLOSION
NUCLEAR_EXPLOSION = _DataModel.NUCLEAR_EXPLOSION
LANDSLIDE = _DataModel.LANDSLIDE
ROCKSLIDE = _DataModel.ROCKSLIDE
SNOW_AVALANCHE = _DataModel.SNOW_AVALANCHE
DEBRIS_AVALANCHE = _DataModel.DEBRIS_AVALANCHE
MINE_COLLAPSE = _DataModel.MINE_COLLAPSE
BUILDING_COLLAPSE = _DataModel.BUILDING_COLLAPSE
VOLCANIC_ERUPTION = _DataModel.VOLCANIC_ERUPTION
METEOR_IMPACT = _DataModel.METEOR_IMPACT
PLANE_CRASH = _DataModel.PLANE_CRASH
SONIC_BOOM = _DataModel.SONIC_BOOM
DUPLICATE = _DataModel.DUPLICATE
OTHER_EVENT = _DataModel.OTHER_EVENT
EEventTypeQuantity = _DataModel.EEventTypeQuantity
class EEventTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EEventTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEventTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEventTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EEventTypeNames self) -> EEventTypeNames"""
        this = _DataModel.new_EEventTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EEventTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EEventTypeNames
    __del__ = lambda self : None;
EEventTypeNames_swigregister = _DataModel.EEventTypeNames_swigregister
EEventTypeNames_swigregister(EEventTypeNames)

def EEventTypeNames_name(*args):
  """EEventTypeNames_name(int i) -> char const *"""
  return _DataModel.EEventTypeNames_name(*args)

KNOWN = _DataModel.KNOWN
SUSPECTED = _DataModel.SUSPECTED
EEventTypeCertaintyQuantity = _DataModel.EEventTypeCertaintyQuantity
class EEventTypeCertaintyNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EEventTypeCertaintyNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEventTypeCertaintyNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEventTypeCertaintyNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EEventTypeCertaintyNames self) -> EEventTypeCertaintyNames"""
        this = _DataModel.new_EEventTypeCertaintyNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EEventTypeCertaintyNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EEventTypeCertaintyNames
    __del__ = lambda self : None;
EEventTypeCertaintyNames_swigregister = _DataModel.EEventTypeCertaintyNames_swigregister
EEventTypeCertaintyNames_swigregister(EEventTypeCertaintyNames)

def EEventTypeCertaintyNames_name(*args):
  """EEventTypeCertaintyNames_name(int i) -> char const *"""
  return _DataModel.EEventTypeCertaintyNames_name(*args)

BOX_CAR = _DataModel.BOX_CAR
TRIANGLE = _DataModel.TRIANGLE
TRAPEZOID = _DataModel.TRAPEZOID
UNKNOWN_FUNCTION = _DataModel.UNKNOWN_FUNCTION
ESourceTimeFunctionTypeQuantity = _DataModel.ESourceTimeFunctionTypeQuantity
class ESourceTimeFunctionTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::ESourceTimeFunctionTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ESourceTimeFunctionTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ESourceTimeFunctionTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::ESourceTimeFunctionTypeNames self) -> ESourceTimeFunctionTypeNames"""
        this = _DataModel.new_ESourceTimeFunctionTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.ESourceTimeFunctionTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_ESourceTimeFunctionTypeNames
    __del__ = lambda self : None;
ESourceTimeFunctionTypeNames_swigregister = _DataModel.ESourceTimeFunctionTypeNames_swigregister
ESourceTimeFunctionTypeNames_swigregister(ESourceTimeFunctionTypeNames)

def ESourceTimeFunctionTypeNames_name(*args):
  """ESourceTimeFunctionTypeNames_name(int i) -> char const *"""
  return _DataModel.ESourceTimeFunctionTypeNames_name(*args)

POSITIVE = _DataModel.POSITIVE
NEGATIVE = _DataModel.NEGATIVE
UNDECIDABLE = _DataModel.UNDECIDABLE
EPickPolarityQuantity = _DataModel.EPickPolarityQuantity
class EPickPolarityNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EPickPolarityNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPickPolarityNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPickPolarityNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EPickPolarityNames self) -> EPickPolarityNames"""
        this = _DataModel.new_EPickPolarityNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EPickPolarityNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EPickPolarityNames
    __del__ = lambda self : None;
EPickPolarityNames_swigregister = _DataModel.EPickPolarityNames_swigregister
EPickPolarityNames_swigregister(EPickPolarityNames)

def EPickPolarityNames_name(*args):
  """EPickPolarityNames_name(int i) -> char const *"""
  return _DataModel.EPickPolarityNames_name(*args)

DEPLOYMENT = _DataModel.DEPLOYMENT
ARRAY = _DataModel.ARRAY
EStationGroupTypeQuantity = _DataModel.EStationGroupTypeQuantity
class EStationGroupTypeNames(_object):
    """Proxy of C++ Seiscomp::DataModel::EStationGroupTypeNames class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EStationGroupTypeNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EStationGroupTypeNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Seiscomp::DataModel::EStationGroupTypeNames self) -> EStationGroupTypeNames"""
        this = _DataModel.new_EStationGroupTypeNames()
        try: self.this.append(this)
        except: self.this = this
    def name(*args):
        """name(int i) -> char const *"""
        return _DataModel.EStationGroupTypeNames_name(*args)

    if _newclass:name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name
    __swig_destroy__ = _DataModel.delete_EStationGroupTypeNames
    __del__ = lambda self : None;
EStationGroupTypeNames_swigregister = _DataModel.EStationGroupTypeNames_swigregister
EStationGroupTypeNames_swigregister(EStationGroupTypeNames)

def EStationGroupTypeNames_name(*args):
  """EStationGroupTypeNames_name(int i) -> char const *"""
  return _DataModel.EStationGroupTypeNames_name(*args)

class TimeQuantity(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::TimeQuantity class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeQuantity, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.TimeQuantity_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.TimeQuantity_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(TimeQuantity self) -> char const *"""
        return _DataModel.TimeQuantity_className(self)

    def typeInfo(self):
        """typeInfo(TimeQuantity self) -> RTTI"""
        return _DataModel.TimeQuantity_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> TimeQuantity
        Cast(Seiscomp::Core::BaseObjectPtr o) -> TimeQuantity
        """
        return _DataModel.TimeQuantity_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> TimeQuantity
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> TimeQuantity
        """
        return _DataModel.TimeQuantity_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(TimeQuantity self, GenericArchive ar)"""
        return _DataModel.TimeQuantity_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::TimeQuantity self) -> TimeQuantity
        __init__(Seiscomp::DataModel::TimeQuantity self, TimeQuantity other) -> TimeQuantity
        __init__(Seiscomp::DataModel::TimeQuantity self, Time value) -> TimeQuantity
        __init__(Seiscomp::DataModel::TimeQuantity self, Time value, Seiscomp::Core::Optional< double >::Impl const & uncertainty, Seiscomp::Core::Optional< double >::Impl const & lowerUncertainty, 
            Seiscomp::Core::Optional< double >::Impl const & upperUncertainty, 
            Seiscomp::Core::Optional< double >::Impl const & confidenceLevel) -> TimeQuantity
        """
        this = _DataModel.new_TimeQuantity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_TimeQuantity
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(TimeQuantity self, TimeQuantity other) -> bool"""
        return _DataModel.TimeQuantity___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(TimeQuantity self, TimeQuantity other) -> bool"""
        return _DataModel.TimeQuantity___ne__(self, *args)

    def equal(self, *args):
        """equal(TimeQuantity self, TimeQuantity other) -> bool"""
        return _DataModel.TimeQuantity_equal(self, *args)

    def setValue(self, *args):
        """setValue(TimeQuantity self, Time value)"""
        return _DataModel.TimeQuantity_setValue(self, *args)

    def value(self):
        """value(TimeQuantity self) -> Time"""
        return _DataModel.TimeQuantity_value(self)

    def setUncertainty(self, *args):
        """setUncertainty(TimeQuantity self, Seiscomp::Core::Optional< double >::Impl const & uncertainty)"""
        return _DataModel.TimeQuantity_setUncertainty(self, *args)

    def uncertainty(self):
        """uncertainty(TimeQuantity self) -> double"""
        return _DataModel.TimeQuantity_uncertainty(self)

    def setLowerUncertainty(self, *args):
        """setLowerUncertainty(TimeQuantity self, Seiscomp::Core::Optional< double >::Impl const & lowerUncertainty)"""
        return _DataModel.TimeQuantity_setLowerUncertainty(self, *args)

    def lowerUncertainty(self):
        """lowerUncertainty(TimeQuantity self) -> double"""
        return _DataModel.TimeQuantity_lowerUncertainty(self)

    def setUpperUncertainty(self, *args):
        """setUpperUncertainty(TimeQuantity self, Seiscomp::Core::Optional< double >::Impl const & upperUncertainty)"""
        return _DataModel.TimeQuantity_setUpperUncertainty(self, *args)

    def upperUncertainty(self):
        """upperUncertainty(TimeQuantity self) -> double"""
        return _DataModel.TimeQuantity_upperUncertainty(self)

    def setConfidenceLevel(self, *args):
        """setConfidenceLevel(TimeQuantity self, Seiscomp::Core::Optional< double >::Impl const & confidenceLevel)"""
        return _DataModel.TimeQuantity_setConfidenceLevel(self, *args)

    def confidenceLevel(self):
        """confidenceLevel(TimeQuantity self) -> double"""
        return _DataModel.TimeQuantity_confidenceLevel(self)

TimeQuantity_swigregister = _DataModel.TimeQuantity_swigregister
TimeQuantity_swigregister(TimeQuantity)

def TimeQuantity_ClassName():
  """TimeQuantity_ClassName() -> char const *"""
  return _DataModel.TimeQuantity_ClassName()

def TimeQuantity_TypeInfo():
  """TimeQuantity_TypeInfo() -> RTTI"""
  return _DataModel.TimeQuantity_TypeInfo()

def TimeQuantity_Cast(*args):
  """
    Cast(BaseObject o) -> TimeQuantity
    TimeQuantity_Cast(Seiscomp::Core::BaseObjectPtr o) -> TimeQuantity
    """
  return _DataModel.TimeQuantity_Cast(*args)

def TimeQuantity_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> TimeQuantity
    TimeQuantity_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> TimeQuantity
    """
  return _DataModel.TimeQuantity_ConstCast(*args)

class CreationInfo(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::CreationInfo class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreationInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreationInfo, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.CreationInfo_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.CreationInfo_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(CreationInfo self) -> char const *"""
        return _DataModel.CreationInfo_className(self)

    def typeInfo(self):
        """typeInfo(CreationInfo self) -> RTTI"""
        return _DataModel.CreationInfo_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> CreationInfo
        Cast(Seiscomp::Core::BaseObjectPtr o) -> CreationInfo
        """
        return _DataModel.CreationInfo_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> CreationInfo
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> CreationInfo
        """
        return _DataModel.CreationInfo_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(CreationInfo self, GenericArchive ar)"""
        return _DataModel.CreationInfo_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::CreationInfo self) -> CreationInfo
        __init__(Seiscomp::DataModel::CreationInfo self, CreationInfo other) -> CreationInfo
        """
        this = _DataModel.new_CreationInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_CreationInfo
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(CreationInfo self, CreationInfo other) -> bool"""
        return _DataModel.CreationInfo___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(CreationInfo self, CreationInfo other) -> bool"""
        return _DataModel.CreationInfo___ne__(self, *args)

    def equal(self, *args):
        """equal(CreationInfo self, CreationInfo other) -> bool"""
        return _DataModel.CreationInfo_equal(self, *args)

    def setAgencyID(self, *args):
        """setAgencyID(CreationInfo self, std::string const & agencyID)"""
        return _DataModel.CreationInfo_setAgencyID(self, *args)

    def agencyID(self):
        """agencyID(CreationInfo self) -> std::string const &"""
        return _DataModel.CreationInfo_agencyID(self)

    def setAgencyURI(self, *args):
        """setAgencyURI(CreationInfo self, std::string const & agencyURI)"""
        return _DataModel.CreationInfo_setAgencyURI(self, *args)

    def agencyURI(self):
        """agencyURI(CreationInfo self) -> std::string const &"""
        return _DataModel.CreationInfo_agencyURI(self)

    def setAuthor(self, *args):
        """setAuthor(CreationInfo self, std::string const & author)"""
        return _DataModel.CreationInfo_setAuthor(self, *args)

    def author(self):
        """author(CreationInfo self) -> std::string const &"""
        return _DataModel.CreationInfo_author(self)

    def setAuthorURI(self, *args):
        """setAuthorURI(CreationInfo self, std::string const & authorURI)"""
        return _DataModel.CreationInfo_setAuthorURI(self, *args)

    def authorURI(self):
        """authorURI(CreationInfo self) -> std::string const &"""
        return _DataModel.CreationInfo_authorURI(self)

    def setCreationTime(self, *args):
        """setCreationTime(CreationInfo self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & creationTime)"""
        return _DataModel.CreationInfo_setCreationTime(self, *args)

    def creationTime(self):
        """creationTime(CreationInfo self) -> Time"""
        return _DataModel.CreationInfo_creationTime(self)

    def setModificationTime(self, *args):
        """setModificationTime(CreationInfo self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & modificationTime)"""
        return _DataModel.CreationInfo_setModificationTime(self, *args)

    def modificationTime(self):
        """modificationTime(CreationInfo self) -> Time"""
        return _DataModel.CreationInfo_modificationTime(self)

    def setVersion(self, *args):
        """setVersion(CreationInfo self, std::string const & version)"""
        return _DataModel.CreationInfo_setVersion(self, *args)

    def version(self):
        """version(CreationInfo self) -> std::string const &"""
        return _DataModel.CreationInfo_version(self)

CreationInfo_swigregister = _DataModel.CreationInfo_swigregister
CreationInfo_swigregister(CreationInfo)

def CreationInfo_ClassName():
  """CreationInfo_ClassName() -> char const *"""
  return _DataModel.CreationInfo_ClassName()

def CreationInfo_TypeInfo():
  """CreationInfo_TypeInfo() -> RTTI"""
  return _DataModel.CreationInfo_TypeInfo()

def CreationInfo_Cast(*args):
  """
    Cast(BaseObject o) -> CreationInfo
    CreationInfo_Cast(Seiscomp::Core::BaseObjectPtr o) -> CreationInfo
    """
  return _DataModel.CreationInfo_Cast(*args)

def CreationInfo_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> CreationInfo
    CreationInfo_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> CreationInfo
    """
  return _DataModel.CreationInfo_ConstCast(*args)

class Phase(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Phase class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Phase, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Phase, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Phase_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Phase_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Phase self) -> char const *"""
        return _DataModel.Phase_className(self)

    def typeInfo(self):
        """typeInfo(Phase self) -> RTTI"""
        return _DataModel.Phase_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Phase
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Phase
        """
        return _DataModel.Phase_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Phase
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Phase
        """
        return _DataModel.Phase_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Phase self, GenericArchive ar)"""
        return _DataModel.Phase_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Phase self) -> Phase
        __init__(Seiscomp::DataModel::Phase self, Phase other) -> Phase
        __init__(Seiscomp::DataModel::Phase self, std::string const & code) -> Phase
        """
        this = _DataModel.new_Phase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Phase
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Phase self, Phase other) -> bool"""
        return _DataModel.Phase___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Phase self, Phase other) -> bool"""
        return _DataModel.Phase___ne__(self, *args)

    def equal(self, *args):
        """equal(Phase self, Phase other) -> bool"""
        return _DataModel.Phase_equal(self, *args)

    def setCode(self, *args):
        """setCode(Phase self, std::string const & code)"""
        return _DataModel.Phase_setCode(self, *args)

    def code(self):
        """code(Phase self) -> std::string const &"""
        return _DataModel.Phase_code(self)

Phase_swigregister = _DataModel.Phase_swigregister
Phase_swigregister(Phase)

def Phase_ClassName():
  """Phase_ClassName() -> char const *"""
  return _DataModel.Phase_ClassName()

def Phase_TypeInfo():
  """Phase_TypeInfo() -> RTTI"""
  return _DataModel.Phase_TypeInfo()

def Phase_Cast(*args):
  """
    Cast(BaseObject o) -> Phase
    Phase_Cast(Seiscomp::Core::BaseObjectPtr o) -> Phase
    """
  return _DataModel.Phase_Cast(*args)

def Phase_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Phase
    Phase_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Phase
    """
  return _DataModel.Phase_ConstCast(*args)

class CommentIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::CommentIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommentIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommentIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::CommentIndex self) -> CommentIndex
        __init__(Seiscomp::DataModel::CommentIndex self, std::string const & id) -> CommentIndex
        __init__(Seiscomp::DataModel::CommentIndex self, CommentIndex arg2) -> CommentIndex
        """
        this = _DataModel.new_CommentIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(CommentIndex self, CommentIndex arg2) -> bool"""
        return _DataModel.CommentIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(CommentIndex self, CommentIndex arg2) -> bool"""
        return _DataModel.CommentIndex___ne__(self, *args)

    __swig_setmethods__["id"] = _DataModel.CommentIndex_id_set
    __swig_getmethods__["id"] = _DataModel.CommentIndex_id_get
    if _newclass:id = _swig_property(_DataModel.CommentIndex_id_get, _DataModel.CommentIndex_id_set)
    __swig_destroy__ = _DataModel.delete_CommentIndex
    __del__ = lambda self : None;
CommentIndex_swigregister = _DataModel.CommentIndex_swigregister
CommentIndex_swigregister(CommentIndex)

class Comment(Object):
    """Proxy of C++ Seiscomp::DataModel::Comment class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comment, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Comment, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Comment_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Comment_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Comment self) -> char const *"""
        return _DataModel.Comment_className(self)

    def typeInfo(self):
        """typeInfo(Comment self) -> RTTI"""
        return _DataModel.Comment_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Comment
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Comment
        """
        return _DataModel.Comment_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Comment
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Comment
        """
        return _DataModel.Comment_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Comment self, GenericArchive ar)"""
        return _DataModel.Comment_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Comment self) -> Comment
        __init__(Seiscomp::DataModel::Comment self, Comment other) -> Comment
        """
        this = _DataModel.new_Comment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Comment
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Comment self, Comment other) -> bool"""
        return _DataModel.Comment___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Comment self, Comment other) -> bool"""
        return _DataModel.Comment___ne__(self, *args)

    def equal(self, *args):
        """equal(Comment self, Comment other) -> bool"""
        return _DataModel.Comment_equal(self, *args)

    def setText(self, *args):
        """setText(Comment self, std::string const & text)"""
        return _DataModel.Comment_setText(self, *args)

    def text(self):
        """text(Comment self) -> std::string const &"""
        return _DataModel.Comment_text(self)

    def setId(self, *args):
        """setId(Comment self, std::string const & id)"""
        return _DataModel.Comment_setId(self, *args)

    def id(self):
        """id(Comment self) -> std::string const &"""
        return _DataModel.Comment_id(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Comment self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Comment_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Comment self) -> CreationInfo
        creationInfo(Comment self) -> CreationInfo
        """
        return _DataModel.Comment_creationInfo(self, *args)

    def index(self):
        """index(Comment self) -> CommentIndex"""
        return _DataModel.Comment_index(self)

    def equalIndex(self, *args):
        """equalIndex(Comment self, Comment lhs) -> bool"""
        return _DataModel.Comment_equalIndex(self, *args)

    def momentTensor(self):
        """momentTensor(Comment self) -> MomentTensor"""
        return _DataModel.Comment_momentTensor(self)

    def focalMechanism(self):
        """focalMechanism(Comment self) -> FocalMechanism"""
        return _DataModel.Comment_focalMechanism(self)

    def amplitude(self):
        """amplitude(Comment self) -> Amplitude"""
        return _DataModel.Comment_amplitude(self)

    def magnitude(self):
        """magnitude(Comment self) -> Magnitude"""
        return _DataModel.Comment_magnitude(self)

    def stationMagnitude(self):
        """stationMagnitude(Comment self) -> StationMagnitude"""
        return _DataModel.Comment_stationMagnitude(self)

    def pick(self):
        """pick(Comment self) -> Pick"""
        return _DataModel.Comment_pick(self)

    def event(self):
        """event(Comment self) -> Event"""
        return _DataModel.Comment_event(self)

    def origin(self):
        """origin(Comment self) -> Origin"""
        return _DataModel.Comment_origin(self)

    def parameter(self):
        """parameter(Comment self) -> Parameter"""
        return _DataModel.Comment_parameter(self)

    def parameterSet(self):
        """parameterSet(Comment self) -> ParameterSet"""
        return _DataModel.Comment_parameterSet(self)

    def assign(self, *args):
        """assign(Comment self, Object other) -> bool"""
        return _DataModel.Comment_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Comment self, PublicObject parent) -> bool"""
        return _DataModel.Comment_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Comment self, PublicObject parent) -> bool"""
        return _DataModel.Comment_detachFrom(self, *args)

    def detach(self):
        """detach(Comment self) -> bool"""
        return _DataModel.Comment_detach(self)

    def clone(self):
        """clone(Comment self) -> Object"""
        return _DataModel.Comment_clone(self)

    def accept(self, *args):
        """accept(Comment self, Visitor arg2)"""
        return _DataModel.Comment_accept(self, *args)

Comment_swigregister = _DataModel.Comment_swigregister
Comment_swigregister(Comment)

def Comment_ClassName():
  """Comment_ClassName() -> char const *"""
  return _DataModel.Comment_ClassName()

def Comment_TypeInfo():
  """Comment_TypeInfo() -> RTTI"""
  return _DataModel.Comment_TypeInfo()

def Comment_Cast(*args):
  """
    Cast(BaseObject o) -> Comment
    Comment_Cast(Seiscomp::Core::BaseObjectPtr o) -> Comment
    """
  return _DataModel.Comment_Cast(*args)

def Comment_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Comment
    Comment_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Comment
    """
  return _DataModel.Comment_ConstCast(*args)

class RealQuantity(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::RealQuantity class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealQuantity, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.RealQuantity_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.RealQuantity_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(RealQuantity self) -> char const *"""
        return _DataModel.RealQuantity_className(self)

    def typeInfo(self):
        """typeInfo(RealQuantity self) -> RTTI"""
        return _DataModel.RealQuantity_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> RealQuantity
        Cast(Seiscomp::Core::BaseObjectPtr o) -> RealQuantity
        """
        return _DataModel.RealQuantity_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> RealQuantity
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RealQuantity
        """
        return _DataModel.RealQuantity_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(RealQuantity self, GenericArchive ar)"""
        return _DataModel.RealQuantity_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RealQuantity self) -> RealQuantity
        __init__(Seiscomp::DataModel::RealQuantity self, RealQuantity other) -> RealQuantity
        __init__(Seiscomp::DataModel::RealQuantity self, double value) -> RealQuantity
        __init__(Seiscomp::DataModel::RealQuantity self, double value, Seiscomp::Core::Optional< double >::Impl const & uncertainty, Seiscomp::Core::Optional< double >::Impl const & lowerUncertainty, 
            Seiscomp::Core::Optional< double >::Impl const & upperUncertainty, 
            Seiscomp::Core::Optional< double >::Impl const & confidenceLevel) -> RealQuantity
        """
        this = _DataModel.new_RealQuantity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RealQuantity
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(RealQuantity self, RealQuantity other) -> bool"""
        return _DataModel.RealQuantity___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RealQuantity self, RealQuantity other) -> bool"""
        return _DataModel.RealQuantity___ne__(self, *args)

    def equal(self, *args):
        """equal(RealQuantity self, RealQuantity other) -> bool"""
        return _DataModel.RealQuantity_equal(self, *args)

    def setValue(self, *args):
        """setValue(RealQuantity self, double value)"""
        return _DataModel.RealQuantity_setValue(self, *args)

    def value(self):
        """value(RealQuantity self) -> double"""
        return _DataModel.RealQuantity_value(self)

    def setUncertainty(self, *args):
        """setUncertainty(RealQuantity self, Seiscomp::Core::Optional< double >::Impl const & uncertainty)"""
        return _DataModel.RealQuantity_setUncertainty(self, *args)

    def uncertainty(self):
        """uncertainty(RealQuantity self) -> double"""
        return _DataModel.RealQuantity_uncertainty(self)

    def setLowerUncertainty(self, *args):
        """setLowerUncertainty(RealQuantity self, Seiscomp::Core::Optional< double >::Impl const & lowerUncertainty)"""
        return _DataModel.RealQuantity_setLowerUncertainty(self, *args)

    def lowerUncertainty(self):
        """lowerUncertainty(RealQuantity self) -> double"""
        return _DataModel.RealQuantity_lowerUncertainty(self)

    def setUpperUncertainty(self, *args):
        """setUpperUncertainty(RealQuantity self, Seiscomp::Core::Optional< double >::Impl const & upperUncertainty)"""
        return _DataModel.RealQuantity_setUpperUncertainty(self, *args)

    def upperUncertainty(self):
        """upperUncertainty(RealQuantity self) -> double"""
        return _DataModel.RealQuantity_upperUncertainty(self)

    def setConfidenceLevel(self, *args):
        """setConfidenceLevel(RealQuantity self, Seiscomp::Core::Optional< double >::Impl const & confidenceLevel)"""
        return _DataModel.RealQuantity_setConfidenceLevel(self, *args)

    def confidenceLevel(self):
        """confidenceLevel(RealQuantity self) -> double"""
        return _DataModel.RealQuantity_confidenceLevel(self)

RealQuantity_swigregister = _DataModel.RealQuantity_swigregister
RealQuantity_swigregister(RealQuantity)

def RealQuantity_ClassName():
  """RealQuantity_ClassName() -> char const *"""
  return _DataModel.RealQuantity_ClassName()

def RealQuantity_TypeInfo():
  """RealQuantity_TypeInfo() -> RTTI"""
  return _DataModel.RealQuantity_TypeInfo()

def RealQuantity_Cast(*args):
  """
    Cast(BaseObject o) -> RealQuantity
    RealQuantity_Cast(Seiscomp::Core::BaseObjectPtr o) -> RealQuantity
    """
  return _DataModel.RealQuantity_Cast(*args)

def RealQuantity_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> RealQuantity
    RealQuantity_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RealQuantity
    """
  return _DataModel.RealQuantity_ConstCast(*args)

class IntegerQuantity(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::IntegerQuantity class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerQuantity, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.IntegerQuantity_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.IntegerQuantity_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(IntegerQuantity self) -> char const *"""
        return _DataModel.IntegerQuantity_className(self)

    def typeInfo(self):
        """typeInfo(IntegerQuantity self) -> RTTI"""
        return _DataModel.IntegerQuantity_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> IntegerQuantity
        Cast(Seiscomp::Core::BaseObjectPtr o) -> IntegerQuantity
        """
        return _DataModel.IntegerQuantity_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> IntegerQuantity
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> IntegerQuantity
        """
        return _DataModel.IntegerQuantity_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(IntegerQuantity self, GenericArchive ar)"""
        return _DataModel.IntegerQuantity_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::IntegerQuantity self) -> IntegerQuantity
        __init__(Seiscomp::DataModel::IntegerQuantity self, IntegerQuantity other) -> IntegerQuantity
        __init__(Seiscomp::DataModel::IntegerQuantity self, int value) -> IntegerQuantity
        __init__(Seiscomp::DataModel::IntegerQuantity self, int value, Seiscomp::Core::Optional< int >::Impl const & uncertainty, Seiscomp::Core::Optional< int >::Impl const & lowerUncertainty, 
            Seiscomp::Core::Optional< int >::Impl const & upperUncertainty, 
            Seiscomp::Core::Optional< double >::Impl const & confidenceLevel) -> IntegerQuantity
        """
        this = _DataModel.new_IntegerQuantity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_IntegerQuantity
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(IntegerQuantity self, IntegerQuantity other) -> bool"""
        return _DataModel.IntegerQuantity___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(IntegerQuantity self, IntegerQuantity other) -> bool"""
        return _DataModel.IntegerQuantity___ne__(self, *args)

    def equal(self, *args):
        """equal(IntegerQuantity self, IntegerQuantity other) -> bool"""
        return _DataModel.IntegerQuantity_equal(self, *args)

    def setValue(self, *args):
        """setValue(IntegerQuantity self, int value)"""
        return _DataModel.IntegerQuantity_setValue(self, *args)

    def value(self):
        """value(IntegerQuantity self) -> int"""
        return _DataModel.IntegerQuantity_value(self)

    def setUncertainty(self, *args):
        """setUncertainty(IntegerQuantity self, Seiscomp::Core::Optional< int >::Impl const & uncertainty)"""
        return _DataModel.IntegerQuantity_setUncertainty(self, *args)

    def uncertainty(self):
        """uncertainty(IntegerQuantity self) -> int"""
        return _DataModel.IntegerQuantity_uncertainty(self)

    def setLowerUncertainty(self, *args):
        """setLowerUncertainty(IntegerQuantity self, Seiscomp::Core::Optional< int >::Impl const & lowerUncertainty)"""
        return _DataModel.IntegerQuantity_setLowerUncertainty(self, *args)

    def lowerUncertainty(self):
        """lowerUncertainty(IntegerQuantity self) -> int"""
        return _DataModel.IntegerQuantity_lowerUncertainty(self)

    def setUpperUncertainty(self, *args):
        """setUpperUncertainty(IntegerQuantity self, Seiscomp::Core::Optional< int >::Impl const & upperUncertainty)"""
        return _DataModel.IntegerQuantity_setUpperUncertainty(self, *args)

    def upperUncertainty(self):
        """upperUncertainty(IntegerQuantity self) -> int"""
        return _DataModel.IntegerQuantity_upperUncertainty(self)

    def setConfidenceLevel(self, *args):
        """setConfidenceLevel(IntegerQuantity self, Seiscomp::Core::Optional< double >::Impl const & confidenceLevel)"""
        return _DataModel.IntegerQuantity_setConfidenceLevel(self, *args)

    def confidenceLevel(self):
        """confidenceLevel(IntegerQuantity self) -> double"""
        return _DataModel.IntegerQuantity_confidenceLevel(self)

IntegerQuantity_swigregister = _DataModel.IntegerQuantity_swigregister
IntegerQuantity_swigregister(IntegerQuantity)

def IntegerQuantity_ClassName():
  """IntegerQuantity_ClassName() -> char const *"""
  return _DataModel.IntegerQuantity_ClassName()

def IntegerQuantity_TypeInfo():
  """IntegerQuantity_TypeInfo() -> RTTI"""
  return _DataModel.IntegerQuantity_TypeInfo()

def IntegerQuantity_Cast(*args):
  """
    Cast(BaseObject o) -> IntegerQuantity
    IntegerQuantity_Cast(Seiscomp::Core::BaseObjectPtr o) -> IntegerQuantity
    """
  return _DataModel.IntegerQuantity_Cast(*args)

def IntegerQuantity_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> IntegerQuantity
    IntegerQuantity_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> IntegerQuantity
    """
  return _DataModel.IntegerQuantity_ConstCast(*args)

class Axis(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Axis class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Axis, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Axis, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Axis_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Axis_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Axis self) -> char const *"""
        return _DataModel.Axis_className(self)

    def typeInfo(self):
        """typeInfo(Axis self) -> RTTI"""
        return _DataModel.Axis_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Axis
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Axis
        """
        return _DataModel.Axis_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Axis
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Axis
        """
        return _DataModel.Axis_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Axis self, GenericArchive ar)"""
        return _DataModel.Axis_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Axis self) -> Axis
        __init__(Seiscomp::DataModel::Axis self, Axis other) -> Axis
        """
        this = _DataModel.new_Axis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Axis
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Axis self, Axis other) -> bool"""
        return _DataModel.Axis___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Axis self, Axis other) -> bool"""
        return _DataModel.Axis___ne__(self, *args)

    def equal(self, *args):
        """equal(Axis self, Axis other) -> bool"""
        return _DataModel.Axis_equal(self, *args)

    def setAzimuth(self, *args):
        """setAzimuth(Axis self, RealQuantity azimuth)"""
        return _DataModel.Axis_setAzimuth(self, *args)

    def azimuth(self, *args):
        """
        azimuth(Axis self) -> RealQuantity
        azimuth(Axis self) -> RealQuantity
        """
        return _DataModel.Axis_azimuth(self, *args)

    def setPlunge(self, *args):
        """setPlunge(Axis self, RealQuantity plunge)"""
        return _DataModel.Axis_setPlunge(self, *args)

    def plunge(self, *args):
        """
        plunge(Axis self) -> RealQuantity
        plunge(Axis self) -> RealQuantity
        """
        return _DataModel.Axis_plunge(self, *args)

    def setLength(self, *args):
        """setLength(Axis self, RealQuantity length)"""
        return _DataModel.Axis_setLength(self, *args)

    def length(self, *args):
        """
        length(Axis self) -> RealQuantity
        length(Axis self) -> RealQuantity
        """
        return _DataModel.Axis_length(self, *args)

Axis_swigregister = _DataModel.Axis_swigregister
Axis_swigregister(Axis)

def Axis_ClassName():
  """Axis_ClassName() -> char const *"""
  return _DataModel.Axis_ClassName()

def Axis_TypeInfo():
  """Axis_TypeInfo() -> RTTI"""
  return _DataModel.Axis_TypeInfo()

def Axis_Cast(*args):
  """
    Cast(BaseObject o) -> Axis
    Axis_Cast(Seiscomp::Core::BaseObjectPtr o) -> Axis
    """
  return _DataModel.Axis_Cast(*args)

def Axis_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Axis
    Axis_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Axis
    """
  return _DataModel.Axis_ConstCast(*args)

class PrincipalAxes(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::PrincipalAxes class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrincipalAxes, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrincipalAxes, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.PrincipalAxes_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.PrincipalAxes_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(PrincipalAxes self) -> char const *"""
        return _DataModel.PrincipalAxes_className(self)

    def typeInfo(self):
        """typeInfo(PrincipalAxes self) -> RTTI"""
        return _DataModel.PrincipalAxes_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> PrincipalAxes
        Cast(Seiscomp::Core::BaseObjectPtr o) -> PrincipalAxes
        """
        return _DataModel.PrincipalAxes_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> PrincipalAxes
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> PrincipalAxes
        """
        return _DataModel.PrincipalAxes_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(PrincipalAxes self, GenericArchive ar)"""
        return _DataModel.PrincipalAxes_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::PrincipalAxes self) -> PrincipalAxes
        __init__(Seiscomp::DataModel::PrincipalAxes self, PrincipalAxes other) -> PrincipalAxes
        """
        this = _DataModel.new_PrincipalAxes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_PrincipalAxes
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(PrincipalAxes self, PrincipalAxes other) -> bool"""
        return _DataModel.PrincipalAxes___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(PrincipalAxes self, PrincipalAxes other) -> bool"""
        return _DataModel.PrincipalAxes___ne__(self, *args)

    def equal(self, *args):
        """equal(PrincipalAxes self, PrincipalAxes other) -> bool"""
        return _DataModel.PrincipalAxes_equal(self, *args)

    def setTAxis(self, *args):
        """setTAxis(PrincipalAxes self, Axis tAxis)"""
        return _DataModel.PrincipalAxes_setTAxis(self, *args)

    def tAxis(self, *args):
        """
        tAxis(PrincipalAxes self) -> Axis
        tAxis(PrincipalAxes self) -> Axis
        """
        return _DataModel.PrincipalAxes_tAxis(self, *args)

    def setPAxis(self, *args):
        """setPAxis(PrincipalAxes self, Axis pAxis)"""
        return _DataModel.PrincipalAxes_setPAxis(self, *args)

    def pAxis(self, *args):
        """
        pAxis(PrincipalAxes self) -> Axis
        pAxis(PrincipalAxes self) -> Axis
        """
        return _DataModel.PrincipalAxes_pAxis(self, *args)

    def setNAxis(self, *args):
        """setNAxis(PrincipalAxes self, Seiscomp::Core::Optional< Seiscomp::DataModel::Axis >::Impl const & nAxis)"""
        return _DataModel.PrincipalAxes_setNAxis(self, *args)

    def nAxis(self, *args):
        """
        nAxis(PrincipalAxes self) -> Axis
        nAxis(PrincipalAxes self) -> Axis
        """
        return _DataModel.PrincipalAxes_nAxis(self, *args)

PrincipalAxes_swigregister = _DataModel.PrincipalAxes_swigregister
PrincipalAxes_swigregister(PrincipalAxes)

def PrincipalAxes_ClassName():
  """PrincipalAxes_ClassName() -> char const *"""
  return _DataModel.PrincipalAxes_ClassName()

def PrincipalAxes_TypeInfo():
  """PrincipalAxes_TypeInfo() -> RTTI"""
  return _DataModel.PrincipalAxes_TypeInfo()

def PrincipalAxes_Cast(*args):
  """
    Cast(BaseObject o) -> PrincipalAxes
    PrincipalAxes_Cast(Seiscomp::Core::BaseObjectPtr o) -> PrincipalAxes
    """
  return _DataModel.PrincipalAxes_Cast(*args)

def PrincipalAxes_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> PrincipalAxes
    PrincipalAxes_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> PrincipalAxes
    """
  return _DataModel.PrincipalAxes_ConstCast(*args)

class Tensor(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Tensor class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tensor, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tensor, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Tensor_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Tensor_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Tensor self) -> char const *"""
        return _DataModel.Tensor_className(self)

    def typeInfo(self):
        """typeInfo(Tensor self) -> RTTI"""
        return _DataModel.Tensor_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Tensor
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Tensor
        """
        return _DataModel.Tensor_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Tensor
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Tensor
        """
        return _DataModel.Tensor_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Tensor self, GenericArchive ar)"""
        return _DataModel.Tensor_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Tensor self) -> Tensor
        __init__(Seiscomp::DataModel::Tensor self, Tensor other) -> Tensor
        """
        this = _DataModel.new_Tensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Tensor
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Tensor self, Tensor other) -> bool"""
        return _DataModel.Tensor___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Tensor self, Tensor other) -> bool"""
        return _DataModel.Tensor___ne__(self, *args)

    def equal(self, *args):
        """equal(Tensor self, Tensor other) -> bool"""
        return _DataModel.Tensor_equal(self, *args)

    def setMrr(self, *args):
        """setMrr(Tensor self, RealQuantity Mrr)"""
        return _DataModel.Tensor_setMrr(self, *args)

    def Mrr(self, *args):
        """
        Mrr(Tensor self) -> RealQuantity
        Mrr(Tensor self) -> RealQuantity
        """
        return _DataModel.Tensor_Mrr(self, *args)

    def setMtt(self, *args):
        """setMtt(Tensor self, RealQuantity Mtt)"""
        return _DataModel.Tensor_setMtt(self, *args)

    def Mtt(self, *args):
        """
        Mtt(Tensor self) -> RealQuantity
        Mtt(Tensor self) -> RealQuantity
        """
        return _DataModel.Tensor_Mtt(self, *args)

    def setMpp(self, *args):
        """setMpp(Tensor self, RealQuantity Mpp)"""
        return _DataModel.Tensor_setMpp(self, *args)

    def Mpp(self, *args):
        """
        Mpp(Tensor self) -> RealQuantity
        Mpp(Tensor self) -> RealQuantity
        """
        return _DataModel.Tensor_Mpp(self, *args)

    def setMrt(self, *args):
        """setMrt(Tensor self, RealQuantity Mrt)"""
        return _DataModel.Tensor_setMrt(self, *args)

    def Mrt(self, *args):
        """
        Mrt(Tensor self) -> RealQuantity
        Mrt(Tensor self) -> RealQuantity
        """
        return _DataModel.Tensor_Mrt(self, *args)

    def setMrp(self, *args):
        """setMrp(Tensor self, RealQuantity Mrp)"""
        return _DataModel.Tensor_setMrp(self, *args)

    def Mrp(self, *args):
        """
        Mrp(Tensor self) -> RealQuantity
        Mrp(Tensor self) -> RealQuantity
        """
        return _DataModel.Tensor_Mrp(self, *args)

    def setMtp(self, *args):
        """setMtp(Tensor self, RealQuantity Mtp)"""
        return _DataModel.Tensor_setMtp(self, *args)

    def Mtp(self, *args):
        """
        Mtp(Tensor self) -> RealQuantity
        Mtp(Tensor self) -> RealQuantity
        """
        return _DataModel.Tensor_Mtp(self, *args)

Tensor_swigregister = _DataModel.Tensor_swigregister
Tensor_swigregister(Tensor)

def Tensor_ClassName():
  """Tensor_ClassName() -> char const *"""
  return _DataModel.Tensor_ClassName()

def Tensor_TypeInfo():
  """Tensor_TypeInfo() -> RTTI"""
  return _DataModel.Tensor_TypeInfo()

def Tensor_Cast(*args):
  """
    Cast(BaseObject o) -> Tensor
    Tensor_Cast(Seiscomp::Core::BaseObjectPtr o) -> Tensor
    """
  return _DataModel.Tensor_Cast(*args)

def Tensor_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Tensor
    Tensor_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Tensor
    """
  return _DataModel.Tensor_ConstCast(*args)

class OriginQuality(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::OriginQuality class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginQuality, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginQuality, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.OriginQuality_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.OriginQuality_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(OriginQuality self) -> char const *"""
        return _DataModel.OriginQuality_className(self)

    def typeInfo(self):
        """typeInfo(OriginQuality self) -> RTTI"""
        return _DataModel.OriginQuality_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> OriginQuality
        Cast(Seiscomp::Core::BaseObjectPtr o) -> OriginQuality
        """
        return _DataModel.OriginQuality_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> OriginQuality
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> OriginQuality
        """
        return _DataModel.OriginQuality_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(OriginQuality self, GenericArchive ar)"""
        return _DataModel.OriginQuality_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::OriginQuality self) -> OriginQuality
        __init__(Seiscomp::DataModel::OriginQuality self, OriginQuality other) -> OriginQuality
        """
        this = _DataModel.new_OriginQuality(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_OriginQuality
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(OriginQuality self, OriginQuality other) -> bool"""
        return _DataModel.OriginQuality___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(OriginQuality self, OriginQuality other) -> bool"""
        return _DataModel.OriginQuality___ne__(self, *args)

    def equal(self, *args):
        """equal(OriginQuality self, OriginQuality other) -> bool"""
        return _DataModel.OriginQuality_equal(self, *args)

    def setAssociatedPhaseCount(self, *args):
        """setAssociatedPhaseCount(OriginQuality self, Seiscomp::Core::Optional< int >::Impl const & associatedPhaseCount)"""
        return _DataModel.OriginQuality_setAssociatedPhaseCount(self, *args)

    def associatedPhaseCount(self):
        """associatedPhaseCount(OriginQuality self) -> int"""
        return _DataModel.OriginQuality_associatedPhaseCount(self)

    def setUsedPhaseCount(self, *args):
        """setUsedPhaseCount(OriginQuality self, Seiscomp::Core::Optional< int >::Impl const & usedPhaseCount)"""
        return _DataModel.OriginQuality_setUsedPhaseCount(self, *args)

    def usedPhaseCount(self):
        """usedPhaseCount(OriginQuality self) -> int"""
        return _DataModel.OriginQuality_usedPhaseCount(self)

    def setAssociatedStationCount(self, *args):
        """setAssociatedStationCount(OriginQuality self, Seiscomp::Core::Optional< int >::Impl const & associatedStationCount)"""
        return _DataModel.OriginQuality_setAssociatedStationCount(self, *args)

    def associatedStationCount(self):
        """associatedStationCount(OriginQuality self) -> int"""
        return _DataModel.OriginQuality_associatedStationCount(self)

    def setUsedStationCount(self, *args):
        """setUsedStationCount(OriginQuality self, Seiscomp::Core::Optional< int >::Impl const & usedStationCount)"""
        return _DataModel.OriginQuality_setUsedStationCount(self, *args)

    def usedStationCount(self):
        """usedStationCount(OriginQuality self) -> int"""
        return _DataModel.OriginQuality_usedStationCount(self)

    def setDepthPhaseCount(self, *args):
        """setDepthPhaseCount(OriginQuality self, Seiscomp::Core::Optional< int >::Impl const & depthPhaseCount)"""
        return _DataModel.OriginQuality_setDepthPhaseCount(self, *args)

    def depthPhaseCount(self):
        """depthPhaseCount(OriginQuality self) -> int"""
        return _DataModel.OriginQuality_depthPhaseCount(self)

    def setStandardError(self, *args):
        """setStandardError(OriginQuality self, Seiscomp::Core::Optional< double >::Impl const & standardError)"""
        return _DataModel.OriginQuality_setStandardError(self, *args)

    def standardError(self):
        """standardError(OriginQuality self) -> double"""
        return _DataModel.OriginQuality_standardError(self)

    def setAzimuthalGap(self, *args):
        """setAzimuthalGap(OriginQuality self, Seiscomp::Core::Optional< double >::Impl const & azimuthalGap)"""
        return _DataModel.OriginQuality_setAzimuthalGap(self, *args)

    def azimuthalGap(self):
        """azimuthalGap(OriginQuality self) -> double"""
        return _DataModel.OriginQuality_azimuthalGap(self)

    def setSecondaryAzimuthalGap(self, *args):
        """setSecondaryAzimuthalGap(OriginQuality self, Seiscomp::Core::Optional< double >::Impl const & secondaryAzimuthalGap)"""
        return _DataModel.OriginQuality_setSecondaryAzimuthalGap(self, *args)

    def secondaryAzimuthalGap(self):
        """secondaryAzimuthalGap(OriginQuality self) -> double"""
        return _DataModel.OriginQuality_secondaryAzimuthalGap(self)

    def setGroundTruthLevel(self, *args):
        """setGroundTruthLevel(OriginQuality self, std::string const & groundTruthLevel)"""
        return _DataModel.OriginQuality_setGroundTruthLevel(self, *args)

    def groundTruthLevel(self):
        """groundTruthLevel(OriginQuality self) -> std::string const &"""
        return _DataModel.OriginQuality_groundTruthLevel(self)

    def setMaximumDistance(self, *args):
        """setMaximumDistance(OriginQuality self, Seiscomp::Core::Optional< double >::Impl const & maximumDistance)"""
        return _DataModel.OriginQuality_setMaximumDistance(self, *args)

    def maximumDistance(self):
        """maximumDistance(OriginQuality self) -> double"""
        return _DataModel.OriginQuality_maximumDistance(self)

    def setMinimumDistance(self, *args):
        """setMinimumDistance(OriginQuality self, Seiscomp::Core::Optional< double >::Impl const & minimumDistance)"""
        return _DataModel.OriginQuality_setMinimumDistance(self, *args)

    def minimumDistance(self):
        """minimumDistance(OriginQuality self) -> double"""
        return _DataModel.OriginQuality_minimumDistance(self)

    def setMedianDistance(self, *args):
        """setMedianDistance(OriginQuality self, Seiscomp::Core::Optional< double >::Impl const & medianDistance)"""
        return _DataModel.OriginQuality_setMedianDistance(self, *args)

    def medianDistance(self):
        """medianDistance(OriginQuality self) -> double"""
        return _DataModel.OriginQuality_medianDistance(self)

OriginQuality_swigregister = _DataModel.OriginQuality_swigregister
OriginQuality_swigregister(OriginQuality)

def OriginQuality_ClassName():
  """OriginQuality_ClassName() -> char const *"""
  return _DataModel.OriginQuality_ClassName()

def OriginQuality_TypeInfo():
  """OriginQuality_TypeInfo() -> RTTI"""
  return _DataModel.OriginQuality_TypeInfo()

def OriginQuality_Cast(*args):
  """
    Cast(BaseObject o) -> OriginQuality
    OriginQuality_Cast(Seiscomp::Core::BaseObjectPtr o) -> OriginQuality
    """
  return _DataModel.OriginQuality_Cast(*args)

def OriginQuality_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> OriginQuality
    OriginQuality_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> OriginQuality
    """
  return _DataModel.OriginQuality_ConstCast(*args)

class NodalPlane(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::NodalPlane class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalPlane, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.NodalPlane_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.NodalPlane_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(NodalPlane self) -> char const *"""
        return _DataModel.NodalPlane_className(self)

    def typeInfo(self):
        """typeInfo(NodalPlane self) -> RTTI"""
        return _DataModel.NodalPlane_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> NodalPlane
        Cast(Seiscomp::Core::BaseObjectPtr o) -> NodalPlane
        """
        return _DataModel.NodalPlane_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> NodalPlane
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> NodalPlane
        """
        return _DataModel.NodalPlane_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(NodalPlane self, GenericArchive ar)"""
        return _DataModel.NodalPlane_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::NodalPlane self) -> NodalPlane
        __init__(Seiscomp::DataModel::NodalPlane self, NodalPlane other) -> NodalPlane
        """
        this = _DataModel.new_NodalPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NodalPlane
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(NodalPlane self, NodalPlane other) -> bool"""
        return _DataModel.NodalPlane___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(NodalPlane self, NodalPlane other) -> bool"""
        return _DataModel.NodalPlane___ne__(self, *args)

    def equal(self, *args):
        """equal(NodalPlane self, NodalPlane other) -> bool"""
        return _DataModel.NodalPlane_equal(self, *args)

    def setStrike(self, *args):
        """setStrike(NodalPlane self, RealQuantity strike)"""
        return _DataModel.NodalPlane_setStrike(self, *args)

    def strike(self, *args):
        """
        strike(NodalPlane self) -> RealQuantity
        strike(NodalPlane self) -> RealQuantity
        """
        return _DataModel.NodalPlane_strike(self, *args)

    def setDip(self, *args):
        """setDip(NodalPlane self, RealQuantity dip)"""
        return _DataModel.NodalPlane_setDip(self, *args)

    def dip(self, *args):
        """
        dip(NodalPlane self) -> RealQuantity
        dip(NodalPlane self) -> RealQuantity
        """
        return _DataModel.NodalPlane_dip(self, *args)

    def setRake(self, *args):
        """setRake(NodalPlane self, RealQuantity rake)"""
        return _DataModel.NodalPlane_setRake(self, *args)

    def rake(self, *args):
        """
        rake(NodalPlane self) -> RealQuantity
        rake(NodalPlane self) -> RealQuantity
        """
        return _DataModel.NodalPlane_rake(self, *args)

NodalPlane_swigregister = _DataModel.NodalPlane_swigregister
NodalPlane_swigregister(NodalPlane)

def NodalPlane_ClassName():
  """NodalPlane_ClassName() -> char const *"""
  return _DataModel.NodalPlane_ClassName()

def NodalPlane_TypeInfo():
  """NodalPlane_TypeInfo() -> RTTI"""
  return _DataModel.NodalPlane_TypeInfo()

def NodalPlane_Cast(*args):
  """
    Cast(BaseObject o) -> NodalPlane
    NodalPlane_Cast(Seiscomp::Core::BaseObjectPtr o) -> NodalPlane
    """
  return _DataModel.NodalPlane_Cast(*args)

def NodalPlane_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> NodalPlane
    NodalPlane_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> NodalPlane
    """
  return _DataModel.NodalPlane_ConstCast(*args)

class TimeWindow(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::TimeWindow class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeWindow, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.TimeWindow_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.TimeWindow_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(TimeWindow self) -> char const *"""
        return _DataModel.TimeWindow_className(self)

    def typeInfo(self):
        """typeInfo(TimeWindow self) -> RTTI"""
        return _DataModel.TimeWindow_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> TimeWindow
        Cast(Seiscomp::Core::BaseObjectPtr o) -> TimeWindow
        """
        return _DataModel.TimeWindow_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> TimeWindow
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> TimeWindow
        """
        return _DataModel.TimeWindow_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(TimeWindow self, GenericArchive ar)"""
        return _DataModel.TimeWindow_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::TimeWindow self) -> TimeWindow
        __init__(Seiscomp::DataModel::TimeWindow self, TimeWindow other) -> TimeWindow
        __init__(Seiscomp::DataModel::TimeWindow self, Time reference) -> TimeWindow
        __init__(Seiscomp::DataModel::TimeWindow self, Time reference, double begin, double end) -> TimeWindow
        """
        this = _DataModel.new_TimeWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_TimeWindow
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(TimeWindow self, TimeWindow other) -> bool"""
        return _DataModel.TimeWindow___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(TimeWindow self, TimeWindow other) -> bool"""
        return _DataModel.TimeWindow___ne__(self, *args)

    def equal(self, *args):
        """equal(TimeWindow self, TimeWindow other) -> bool"""
        return _DataModel.TimeWindow_equal(self, *args)

    def setReference(self, *args):
        """setReference(TimeWindow self, Time reference)"""
        return _DataModel.TimeWindow_setReference(self, *args)

    def reference(self):
        """reference(TimeWindow self) -> Time"""
        return _DataModel.TimeWindow_reference(self)

    def setBegin(self, *args):
        """setBegin(TimeWindow self, double begin)"""
        return _DataModel.TimeWindow_setBegin(self, *args)

    def begin(self):
        """begin(TimeWindow self) -> double"""
        return _DataModel.TimeWindow_begin(self)

    def setEnd(self, *args):
        """setEnd(TimeWindow self, double end)"""
        return _DataModel.TimeWindow_setEnd(self, *args)

    def end(self):
        """end(TimeWindow self) -> double"""
        return _DataModel.TimeWindow_end(self)

TimeWindow_swigregister = _DataModel.TimeWindow_swigregister
TimeWindow_swigregister(TimeWindow)

def TimeWindow_ClassName():
  """TimeWindow_ClassName() -> char const *"""
  return _DataModel.TimeWindow_ClassName()

def TimeWindow_TypeInfo():
  """TimeWindow_TypeInfo() -> RTTI"""
  return _DataModel.TimeWindow_TypeInfo()

def TimeWindow_Cast(*args):
  """
    Cast(BaseObject o) -> TimeWindow
    TimeWindow_Cast(Seiscomp::Core::BaseObjectPtr o) -> TimeWindow
    """
  return _DataModel.TimeWindow_Cast(*args)

def TimeWindow_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> TimeWindow
    TimeWindow_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> TimeWindow
    """
  return _DataModel.TimeWindow_ConstCast(*args)

class WaveformStreamID(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::WaveformStreamID class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformStreamID, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformStreamID, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.WaveformStreamID_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.WaveformStreamID_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(WaveformStreamID self) -> char const *"""
        return _DataModel.WaveformStreamID_className(self)

    def typeInfo(self):
        """typeInfo(WaveformStreamID self) -> RTTI"""
        return _DataModel.WaveformStreamID_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> WaveformStreamID
        Cast(Seiscomp::Core::BaseObjectPtr o) -> WaveformStreamID
        """
        return _DataModel.WaveformStreamID_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> WaveformStreamID
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> WaveformStreamID
        """
        return _DataModel.WaveformStreamID_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(WaveformStreamID self, GenericArchive ar)"""
        return _DataModel.WaveformStreamID_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::WaveformStreamID self) -> WaveformStreamID
        __init__(Seiscomp::DataModel::WaveformStreamID self, WaveformStreamID other) -> WaveformStreamID
        __init__(Seiscomp::DataModel::WaveformStreamID self, std::string const & resourceURI) -> WaveformStreamID
        __init__(Seiscomp::DataModel::WaveformStreamID self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, 
            std::string const & channelCode, std::string const & resourceURI) -> WaveformStreamID
        """
        this = _DataModel.new_WaveformStreamID(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_WaveformStreamID
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(WaveformStreamID self, WaveformStreamID other) -> bool"""
        return _DataModel.WaveformStreamID___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(WaveformStreamID self, WaveformStreamID other) -> bool"""
        return _DataModel.WaveformStreamID___ne__(self, *args)

    def equal(self, *args):
        """equal(WaveformStreamID self, WaveformStreamID other) -> bool"""
        return _DataModel.WaveformStreamID_equal(self, *args)

    def setNetworkCode(self, *args):
        """setNetworkCode(WaveformStreamID self, std::string const & networkCode)"""
        return _DataModel.WaveformStreamID_setNetworkCode(self, *args)

    def networkCode(self):
        """networkCode(WaveformStreamID self) -> std::string const &"""
        return _DataModel.WaveformStreamID_networkCode(self)

    def setStationCode(self, *args):
        """setStationCode(WaveformStreamID self, std::string const & stationCode)"""
        return _DataModel.WaveformStreamID_setStationCode(self, *args)

    def stationCode(self):
        """stationCode(WaveformStreamID self) -> std::string const &"""
        return _DataModel.WaveformStreamID_stationCode(self)

    def setLocationCode(self, *args):
        """setLocationCode(WaveformStreamID self, std::string const & locationCode)"""
        return _DataModel.WaveformStreamID_setLocationCode(self, *args)

    def locationCode(self):
        """locationCode(WaveformStreamID self) -> std::string const &"""
        return _DataModel.WaveformStreamID_locationCode(self)

    def setChannelCode(self, *args):
        """setChannelCode(WaveformStreamID self, std::string const & channelCode)"""
        return _DataModel.WaveformStreamID_setChannelCode(self, *args)

    def channelCode(self):
        """channelCode(WaveformStreamID self) -> std::string const &"""
        return _DataModel.WaveformStreamID_channelCode(self)

    def setResourceURI(self, *args):
        """setResourceURI(WaveformStreamID self, std::string const & resourceURI)"""
        return _DataModel.WaveformStreamID_setResourceURI(self, *args)

    def resourceURI(self):
        """resourceURI(WaveformStreamID self) -> std::string const &"""
        return _DataModel.WaveformStreamID_resourceURI(self)

WaveformStreamID_swigregister = _DataModel.WaveformStreamID_swigregister
WaveformStreamID_swigregister(WaveformStreamID)

def WaveformStreamID_ClassName():
  """WaveformStreamID_ClassName() -> char const *"""
  return _DataModel.WaveformStreamID_ClassName()

def WaveformStreamID_TypeInfo():
  """WaveformStreamID_TypeInfo() -> RTTI"""
  return _DataModel.WaveformStreamID_TypeInfo()

def WaveformStreamID_Cast(*args):
  """
    Cast(BaseObject o) -> WaveformStreamID
    WaveformStreamID_Cast(Seiscomp::Core::BaseObjectPtr o) -> WaveformStreamID
    """
  return _DataModel.WaveformStreamID_Cast(*args)

def WaveformStreamID_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> WaveformStreamID
    WaveformStreamID_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> WaveformStreamID
    """
  return _DataModel.WaveformStreamID_ConstCast(*args)

class SourceTimeFunction(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::SourceTimeFunction class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceTimeFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SourceTimeFunction, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.SourceTimeFunction_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.SourceTimeFunction_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(SourceTimeFunction self) -> char const *"""
        return _DataModel.SourceTimeFunction_className(self)

    def typeInfo(self):
        """typeInfo(SourceTimeFunction self) -> RTTI"""
        return _DataModel.SourceTimeFunction_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> SourceTimeFunction
        Cast(Seiscomp::Core::BaseObjectPtr o) -> SourceTimeFunction
        """
        return _DataModel.SourceTimeFunction_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> SourceTimeFunction
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SourceTimeFunction
        """
        return _DataModel.SourceTimeFunction_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(SourceTimeFunction self, GenericArchive ar)"""
        return _DataModel.SourceTimeFunction_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SourceTimeFunction self) -> SourceTimeFunction
        __init__(Seiscomp::DataModel::SourceTimeFunction self, SourceTimeFunction other) -> SourceTimeFunction
        """
        this = _DataModel.new_SourceTimeFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_SourceTimeFunction
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(SourceTimeFunction self, SourceTimeFunction other) -> bool"""
        return _DataModel.SourceTimeFunction___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SourceTimeFunction self, SourceTimeFunction other) -> bool"""
        return _DataModel.SourceTimeFunction___ne__(self, *args)

    def equal(self, *args):
        """equal(SourceTimeFunction self, SourceTimeFunction other) -> bool"""
        return _DataModel.SourceTimeFunction_equal(self, *args)

    def setType(self, *args):
        """setType(SourceTimeFunction self, Seiscomp::DataModel::SourceTimeFunctionType type)"""
        return _DataModel.SourceTimeFunction_setType(self, *args)

    def type(self):
        """type(SourceTimeFunction self) -> Seiscomp::DataModel::SourceTimeFunctionType"""
        return _DataModel.SourceTimeFunction_type(self)

    def setDuration(self, *args):
        """setDuration(SourceTimeFunction self, double duration)"""
        return _DataModel.SourceTimeFunction_setDuration(self, *args)

    def duration(self):
        """duration(SourceTimeFunction self) -> double"""
        return _DataModel.SourceTimeFunction_duration(self)

    def setRiseTime(self, *args):
        """setRiseTime(SourceTimeFunction self, Seiscomp::Core::Optional< double >::Impl const & riseTime)"""
        return _DataModel.SourceTimeFunction_setRiseTime(self, *args)

    def riseTime(self):
        """riseTime(SourceTimeFunction self) -> double"""
        return _DataModel.SourceTimeFunction_riseTime(self)

    def setDecayTime(self, *args):
        """setDecayTime(SourceTimeFunction self, Seiscomp::Core::Optional< double >::Impl const & decayTime)"""
        return _DataModel.SourceTimeFunction_setDecayTime(self, *args)

    def decayTime(self):
        """decayTime(SourceTimeFunction self) -> double"""
        return _DataModel.SourceTimeFunction_decayTime(self)

SourceTimeFunction_swigregister = _DataModel.SourceTimeFunction_swigregister
SourceTimeFunction_swigregister(SourceTimeFunction)

def SourceTimeFunction_ClassName():
  """SourceTimeFunction_ClassName() -> char const *"""
  return _DataModel.SourceTimeFunction_ClassName()

def SourceTimeFunction_TypeInfo():
  """SourceTimeFunction_TypeInfo() -> RTTI"""
  return _DataModel.SourceTimeFunction_TypeInfo()

def SourceTimeFunction_Cast(*args):
  """
    Cast(BaseObject o) -> SourceTimeFunction
    SourceTimeFunction_Cast(Seiscomp::Core::BaseObjectPtr o) -> SourceTimeFunction
    """
  return _DataModel.SourceTimeFunction_Cast(*args)

def SourceTimeFunction_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> SourceTimeFunction
    SourceTimeFunction_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SourceTimeFunction
    """
  return _DataModel.SourceTimeFunction_ConstCast(*args)

class NodalPlanes(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::NodalPlanes class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalPlanes, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalPlanes, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.NodalPlanes_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.NodalPlanes_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(NodalPlanes self) -> char const *"""
        return _DataModel.NodalPlanes_className(self)

    def typeInfo(self):
        """typeInfo(NodalPlanes self) -> RTTI"""
        return _DataModel.NodalPlanes_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> NodalPlanes
        Cast(Seiscomp::Core::BaseObjectPtr o) -> NodalPlanes
        """
        return _DataModel.NodalPlanes_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> NodalPlanes
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> NodalPlanes
        """
        return _DataModel.NodalPlanes_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(NodalPlanes self, GenericArchive ar)"""
        return _DataModel.NodalPlanes_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::NodalPlanes self) -> NodalPlanes
        __init__(Seiscomp::DataModel::NodalPlanes self, NodalPlanes other) -> NodalPlanes
        """
        this = _DataModel.new_NodalPlanes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_NodalPlanes
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(NodalPlanes self, NodalPlanes other) -> bool"""
        return _DataModel.NodalPlanes___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(NodalPlanes self, NodalPlanes other) -> bool"""
        return _DataModel.NodalPlanes___ne__(self, *args)

    def equal(self, *args):
        """equal(NodalPlanes self, NodalPlanes other) -> bool"""
        return _DataModel.NodalPlanes_equal(self, *args)

    def setNodalPlane1(self, *args):
        """setNodalPlane1(NodalPlanes self, Seiscomp::Core::Optional< Seiscomp::DataModel::NodalPlane >::Impl const & nodalPlane1)"""
        return _DataModel.NodalPlanes_setNodalPlane1(self, *args)

    def nodalPlane1(self, *args):
        """
        nodalPlane1(NodalPlanes self) -> NodalPlane
        nodalPlane1(NodalPlanes self) -> NodalPlane
        """
        return _DataModel.NodalPlanes_nodalPlane1(self, *args)

    def setNodalPlane2(self, *args):
        """setNodalPlane2(NodalPlanes self, Seiscomp::Core::Optional< Seiscomp::DataModel::NodalPlane >::Impl const & nodalPlane2)"""
        return _DataModel.NodalPlanes_setNodalPlane2(self, *args)

    def nodalPlane2(self, *args):
        """
        nodalPlane2(NodalPlanes self) -> NodalPlane
        nodalPlane2(NodalPlanes self) -> NodalPlane
        """
        return _DataModel.NodalPlanes_nodalPlane2(self, *args)

    def setPreferredPlane(self, *args):
        """setPreferredPlane(NodalPlanes self, Seiscomp::Core::Optional< int >::Impl const & preferredPlane)"""
        return _DataModel.NodalPlanes_setPreferredPlane(self, *args)

    def preferredPlane(self):
        """preferredPlane(NodalPlanes self) -> int"""
        return _DataModel.NodalPlanes_preferredPlane(self)

NodalPlanes_swigregister = _DataModel.NodalPlanes_swigregister
NodalPlanes_swigregister(NodalPlanes)

def NodalPlanes_ClassName():
  """NodalPlanes_ClassName() -> char const *"""
  return _DataModel.NodalPlanes_ClassName()

def NodalPlanes_TypeInfo():
  """NodalPlanes_TypeInfo() -> RTTI"""
  return _DataModel.NodalPlanes_TypeInfo()

def NodalPlanes_Cast(*args):
  """
    Cast(BaseObject o) -> NodalPlanes
    NodalPlanes_Cast(Seiscomp::Core::BaseObjectPtr o) -> NodalPlanes
    """
  return _DataModel.NodalPlanes_Cast(*args)

def NodalPlanes_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> NodalPlanes
    NodalPlanes_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> NodalPlanes
    """
  return _DataModel.NodalPlanes_ConstCast(*args)

class ConfidenceEllipsoid(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::ConfidenceEllipsoid class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfidenceEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfidenceEllipsoid, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ConfidenceEllipsoid_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ConfidenceEllipsoid_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ConfidenceEllipsoid self) -> char const *"""
        return _DataModel.ConfidenceEllipsoid_className(self)

    def typeInfo(self):
        """typeInfo(ConfidenceEllipsoid self) -> RTTI"""
        return _DataModel.ConfidenceEllipsoid_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ConfidenceEllipsoid
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ConfidenceEllipsoid
        """
        return _DataModel.ConfidenceEllipsoid_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ConfidenceEllipsoid
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ConfidenceEllipsoid
        """
        return _DataModel.ConfidenceEllipsoid_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ConfidenceEllipsoid self, GenericArchive ar)"""
        return _DataModel.ConfidenceEllipsoid_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ConfidenceEllipsoid self) -> ConfidenceEllipsoid
        __init__(Seiscomp::DataModel::ConfidenceEllipsoid self, ConfidenceEllipsoid other) -> ConfidenceEllipsoid
        """
        this = _DataModel.new_ConfidenceEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ConfidenceEllipsoid
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(ConfidenceEllipsoid self, ConfidenceEllipsoid other) -> bool"""
        return _DataModel.ConfidenceEllipsoid___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ConfidenceEllipsoid self, ConfidenceEllipsoid other) -> bool"""
        return _DataModel.ConfidenceEllipsoid___ne__(self, *args)

    def equal(self, *args):
        """equal(ConfidenceEllipsoid self, ConfidenceEllipsoid other) -> bool"""
        return _DataModel.ConfidenceEllipsoid_equal(self, *args)

    def setSemiMajorAxisLength(self, *args):
        """setSemiMajorAxisLength(ConfidenceEllipsoid self, double semiMajorAxisLength)"""
        return _DataModel.ConfidenceEllipsoid_setSemiMajorAxisLength(self, *args)

    def semiMajorAxisLength(self):
        """semiMajorAxisLength(ConfidenceEllipsoid self) -> double"""
        return _DataModel.ConfidenceEllipsoid_semiMajorAxisLength(self)

    def setSemiMinorAxisLength(self, *args):
        """setSemiMinorAxisLength(ConfidenceEllipsoid self, double semiMinorAxisLength)"""
        return _DataModel.ConfidenceEllipsoid_setSemiMinorAxisLength(self, *args)

    def semiMinorAxisLength(self):
        """semiMinorAxisLength(ConfidenceEllipsoid self) -> double"""
        return _DataModel.ConfidenceEllipsoid_semiMinorAxisLength(self)

    def setSemiIntermediateAxisLength(self, *args):
        """setSemiIntermediateAxisLength(ConfidenceEllipsoid self, double semiIntermediateAxisLength)"""
        return _DataModel.ConfidenceEllipsoid_setSemiIntermediateAxisLength(self, *args)

    def semiIntermediateAxisLength(self):
        """semiIntermediateAxisLength(ConfidenceEllipsoid self) -> double"""
        return _DataModel.ConfidenceEllipsoid_semiIntermediateAxisLength(self)

    def setMajorAxisPlunge(self, *args):
        """setMajorAxisPlunge(ConfidenceEllipsoid self, double majorAxisPlunge)"""
        return _DataModel.ConfidenceEllipsoid_setMajorAxisPlunge(self, *args)

    def majorAxisPlunge(self):
        """majorAxisPlunge(ConfidenceEllipsoid self) -> double"""
        return _DataModel.ConfidenceEllipsoid_majorAxisPlunge(self)

    def setMajorAxisAzimuth(self, *args):
        """setMajorAxisAzimuth(ConfidenceEllipsoid self, double majorAxisAzimuth)"""
        return _DataModel.ConfidenceEllipsoid_setMajorAxisAzimuth(self, *args)

    def majorAxisAzimuth(self):
        """majorAxisAzimuth(ConfidenceEllipsoid self) -> double"""
        return _DataModel.ConfidenceEllipsoid_majorAxisAzimuth(self)

    def setMajorAxisRotation(self, *args):
        """setMajorAxisRotation(ConfidenceEllipsoid self, double majorAxisRotation)"""
        return _DataModel.ConfidenceEllipsoid_setMajorAxisRotation(self, *args)

    def majorAxisRotation(self):
        """majorAxisRotation(ConfidenceEllipsoid self) -> double"""
        return _DataModel.ConfidenceEllipsoid_majorAxisRotation(self)

ConfidenceEllipsoid_swigregister = _DataModel.ConfidenceEllipsoid_swigregister
ConfidenceEllipsoid_swigregister(ConfidenceEllipsoid)

def ConfidenceEllipsoid_ClassName():
  """ConfidenceEllipsoid_ClassName() -> char const *"""
  return _DataModel.ConfidenceEllipsoid_ClassName()

def ConfidenceEllipsoid_TypeInfo():
  """ConfidenceEllipsoid_TypeInfo() -> RTTI"""
  return _DataModel.ConfidenceEllipsoid_TypeInfo()

def ConfidenceEllipsoid_Cast(*args):
  """
    Cast(BaseObject o) -> ConfidenceEllipsoid
    ConfidenceEllipsoid_Cast(Seiscomp::Core::BaseObjectPtr o) -> ConfidenceEllipsoid
    """
  return _DataModel.ConfidenceEllipsoid_Cast(*args)

def ConfidenceEllipsoid_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ConfidenceEllipsoid
    ConfidenceEllipsoid_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ConfidenceEllipsoid
    """
  return _DataModel.ConfidenceEllipsoid_ConstCast(*args)

class OriginUncertainty(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::OriginUncertainty class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginUncertainty, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginUncertainty, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.OriginUncertainty_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.OriginUncertainty_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(OriginUncertainty self) -> char const *"""
        return _DataModel.OriginUncertainty_className(self)

    def typeInfo(self):
        """typeInfo(OriginUncertainty self) -> RTTI"""
        return _DataModel.OriginUncertainty_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> OriginUncertainty
        Cast(Seiscomp::Core::BaseObjectPtr o) -> OriginUncertainty
        """
        return _DataModel.OriginUncertainty_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> OriginUncertainty
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> OriginUncertainty
        """
        return _DataModel.OriginUncertainty_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(OriginUncertainty self, GenericArchive ar)"""
        return _DataModel.OriginUncertainty_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::OriginUncertainty self) -> OriginUncertainty
        __init__(Seiscomp::DataModel::OriginUncertainty self, OriginUncertainty other) -> OriginUncertainty
        """
        this = _DataModel.new_OriginUncertainty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_OriginUncertainty
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(OriginUncertainty self, OriginUncertainty other) -> bool"""
        return _DataModel.OriginUncertainty___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(OriginUncertainty self, OriginUncertainty other) -> bool"""
        return _DataModel.OriginUncertainty___ne__(self, *args)

    def equal(self, *args):
        """equal(OriginUncertainty self, OriginUncertainty other) -> bool"""
        return _DataModel.OriginUncertainty_equal(self, *args)

    def setHorizontalUncertainty(self, *args):
        """setHorizontalUncertainty(OriginUncertainty self, Seiscomp::Core::Optional< double >::Impl const & horizontalUncertainty)"""
        return _DataModel.OriginUncertainty_setHorizontalUncertainty(self, *args)

    def horizontalUncertainty(self):
        """horizontalUncertainty(OriginUncertainty self) -> double"""
        return _DataModel.OriginUncertainty_horizontalUncertainty(self)

    def setMinHorizontalUncertainty(self, *args):
        """setMinHorizontalUncertainty(OriginUncertainty self, Seiscomp::Core::Optional< double >::Impl const & minHorizontalUncertainty)"""
        return _DataModel.OriginUncertainty_setMinHorizontalUncertainty(self, *args)

    def minHorizontalUncertainty(self):
        """minHorizontalUncertainty(OriginUncertainty self) -> double"""
        return _DataModel.OriginUncertainty_minHorizontalUncertainty(self)

    def setMaxHorizontalUncertainty(self, *args):
        """setMaxHorizontalUncertainty(OriginUncertainty self, Seiscomp::Core::Optional< double >::Impl const & maxHorizontalUncertainty)"""
        return _DataModel.OriginUncertainty_setMaxHorizontalUncertainty(self, *args)

    def maxHorizontalUncertainty(self):
        """maxHorizontalUncertainty(OriginUncertainty self) -> double"""
        return _DataModel.OriginUncertainty_maxHorizontalUncertainty(self)

    def setAzimuthMaxHorizontalUncertainty(self, *args):
        """setAzimuthMaxHorizontalUncertainty(OriginUncertainty self, Seiscomp::Core::Optional< double >::Impl const & azimuthMaxHorizontalUncertainty)"""
        return _DataModel.OriginUncertainty_setAzimuthMaxHorizontalUncertainty(self, *args)

    def azimuthMaxHorizontalUncertainty(self):
        """azimuthMaxHorizontalUncertainty(OriginUncertainty self) -> double"""
        return _DataModel.OriginUncertainty_azimuthMaxHorizontalUncertainty(self)

    def setConfidenceEllipsoid(self, *args):
        """setConfidenceEllipsoid(OriginUncertainty self, Seiscomp::Core::Optional< Seiscomp::DataModel::ConfidenceEllipsoid >::Impl const & confidenceEllipsoid)"""
        return _DataModel.OriginUncertainty_setConfidenceEllipsoid(self, *args)

    def confidenceEllipsoid(self, *args):
        """
        confidenceEllipsoid(OriginUncertainty self) -> ConfidenceEllipsoid
        confidenceEllipsoid(OriginUncertainty self) -> ConfidenceEllipsoid
        """
        return _DataModel.OriginUncertainty_confidenceEllipsoid(self, *args)

    def setPreferredDescription(self, *args):
        """setPreferredDescription(OriginUncertainty self, Seiscomp::Core::Optional< Seiscomp::DataModel::OriginUncertaintyDescription >::Impl const & preferredDescription)"""
        return _DataModel.OriginUncertainty_setPreferredDescription(self, *args)

    def preferredDescription(self):
        """preferredDescription(OriginUncertainty self) -> Seiscomp::DataModel::OriginUncertaintyDescription"""
        return _DataModel.OriginUncertainty_preferredDescription(self)

OriginUncertainty_swigregister = _DataModel.OriginUncertainty_swigregister
OriginUncertainty_swigregister(OriginUncertainty)

def OriginUncertainty_ClassName():
  """OriginUncertainty_ClassName() -> char const *"""
  return _DataModel.OriginUncertainty_ClassName()

def OriginUncertainty_TypeInfo():
  """OriginUncertainty_TypeInfo() -> RTTI"""
  return _DataModel.OriginUncertainty_TypeInfo()

def OriginUncertainty_Cast(*args):
  """
    Cast(BaseObject o) -> OriginUncertainty
    OriginUncertainty_Cast(Seiscomp::Core::BaseObjectPtr o) -> OriginUncertainty
    """
  return _DataModel.OriginUncertainty_Cast(*args)

def OriginUncertainty_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> OriginUncertainty
    OriginUncertainty_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> OriginUncertainty
    """
  return _DataModel.OriginUncertainty_ConstCast(*args)

class Blob(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::Blob class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Blob, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Blob_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Blob_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Blob self) -> char const *"""
        return _DataModel.Blob_className(self)

    def typeInfo(self):
        """typeInfo(Blob self) -> RTTI"""
        return _DataModel.Blob_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Blob
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Blob
        """
        return _DataModel.Blob_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Blob
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Blob
        """
        return _DataModel.Blob_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Blob self, GenericArchive ar)"""
        return _DataModel.Blob_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Blob self) -> Blob
        __init__(Seiscomp::DataModel::Blob self, Blob other) -> Blob
        """
        this = _DataModel.new_Blob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Blob
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Blob self, Blob other) -> bool"""
        return _DataModel.Blob___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Blob self, Blob other) -> bool"""
        return _DataModel.Blob___ne__(self, *args)

    def equal(self, *args):
        """equal(Blob self, Blob other) -> bool"""
        return _DataModel.Blob_equal(self, *args)

    def setContent(self, *args):
        """setContent(Blob self, std::string const & content)"""
        return _DataModel.Blob_setContent(self, *args)

    def content(self):
        """content(Blob self) -> std::string const &"""
        return _DataModel.Blob_content(self)

Blob_swigregister = _DataModel.Blob_swigregister
Blob_swigregister(Blob)

def Blob_ClassName():
  """Blob_ClassName() -> char const *"""
  return _DataModel.Blob_ClassName()

def Blob_TypeInfo():
  """Blob_TypeInfo() -> RTTI"""
  return _DataModel.Blob_TypeInfo()

def Blob_Cast(*args):
  """
    Cast(BaseObject o) -> Blob
    Blob_Cast(Seiscomp::Core::BaseObjectPtr o) -> Blob
    """
  return _DataModel.Blob_Cast(*args)

def Blob_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Blob
    Blob_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Blob
    """
  return _DataModel.Blob_ConstCast(*args)

class RealArray(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::RealArray class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealArray, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.RealArray_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.RealArray_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(RealArray self) -> char const *"""
        return _DataModel.RealArray_className(self)

    def typeInfo(self):
        """typeInfo(RealArray self) -> RTTI"""
        return _DataModel.RealArray_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> RealArray
        Cast(Seiscomp::Core::BaseObjectPtr o) -> RealArray
        """
        return _DataModel.RealArray_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> RealArray
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RealArray
        """
        return _DataModel.RealArray_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(RealArray self, GenericArchive ar)"""
        return _DataModel.RealArray_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RealArray self) -> RealArray
        __init__(Seiscomp::DataModel::RealArray self, RealArray other) -> RealArray
        """
        this = _DataModel.new_RealArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RealArray
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(RealArray self, RealArray other) -> bool"""
        return _DataModel.RealArray___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RealArray self, RealArray other) -> bool"""
        return _DataModel.RealArray___ne__(self, *args)

    def equal(self, *args):
        """equal(RealArray self, RealArray other) -> bool"""
        return _DataModel.RealArray_equal(self, *args)

    def setContent(self, *args):
        """setContent(RealArray self, vectord arg2)"""
        return _DataModel.RealArray_setContent(self, *args)

    def content(self, *args):
        """
        content(RealArray self) -> vectord
        content(RealArray self) -> vectord
        """
        return _DataModel.RealArray_content(self, *args)

RealArray_swigregister = _DataModel.RealArray_swigregister
RealArray_swigregister(RealArray)

def RealArray_ClassName():
  """RealArray_ClassName() -> char const *"""
  return _DataModel.RealArray_ClassName()

def RealArray_TypeInfo():
  """RealArray_TypeInfo() -> RTTI"""
  return _DataModel.RealArray_TypeInfo()

def RealArray_Cast(*args):
  """
    Cast(BaseObject o) -> RealArray
    RealArray_Cast(Seiscomp::Core::BaseObjectPtr o) -> RealArray
    """
  return _DataModel.RealArray_Cast(*args)

def RealArray_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> RealArray
    RealArray_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RealArray
    """
  return _DataModel.RealArray_ConstCast(*args)

class ComplexArray(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::ComplexArray class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexArray, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ComplexArray_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ComplexArray_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ComplexArray self) -> char const *"""
        return _DataModel.ComplexArray_className(self)

    def typeInfo(self):
        """typeInfo(ComplexArray self) -> RTTI"""
        return _DataModel.ComplexArray_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ComplexArray
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ComplexArray
        """
        return _DataModel.ComplexArray_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ComplexArray
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ComplexArray
        """
        return _DataModel.ComplexArray_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ComplexArray self, GenericArchive ar)"""
        return _DataModel.ComplexArray_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ComplexArray self) -> ComplexArray
        __init__(Seiscomp::DataModel::ComplexArray self, ComplexArray other) -> ComplexArray
        """
        this = _DataModel.new_ComplexArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ComplexArray
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(ComplexArray self, ComplexArray other) -> bool"""
        return _DataModel.ComplexArray___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ComplexArray self, ComplexArray other) -> bool"""
        return _DataModel.ComplexArray___ne__(self, *args)

    def equal(self, *args):
        """equal(ComplexArray self, ComplexArray other) -> bool"""
        return _DataModel.ComplexArray_equal(self, *args)

    def setContent(self, *args):
        """setContent(ComplexArray self,  arg2)"""
        return _DataModel.ComplexArray_setContent(self, *args)

    def content(self, *args):
        """
        content(ComplexArray self)
        content(ComplexArray self)
        """
        return _DataModel.ComplexArray_content(self, *args)

ComplexArray_swigregister = _DataModel.ComplexArray_swigregister
ComplexArray_swigregister(ComplexArray)

def ComplexArray_ClassName():
  """ComplexArray_ClassName() -> char const *"""
  return _DataModel.ComplexArray_ClassName()

def ComplexArray_TypeInfo():
  """ComplexArray_TypeInfo() -> RTTI"""
  return _DataModel.ComplexArray_TypeInfo()

def ComplexArray_Cast(*args):
  """
    Cast(BaseObject o) -> ComplexArray
    ComplexArray_Cast(Seiscomp::Core::BaseObjectPtr o) -> ComplexArray
    """
  return _DataModel.ComplexArray_Cast(*args)

def ComplexArray_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ComplexArray
    ComplexArray_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ComplexArray
    """
  return _DataModel.ComplexArray_ConstCast(*args)

class ArclinkRequestSummary(Core.BaseObject):
    """Proxy of C++ Seiscomp::DataModel::ArclinkRequestSummary class"""
    __swig_setmethods__ = {}
    for _s in [Core.BaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestSummary, name, value)
    __swig_getmethods__ = {}
    for _s in [Core.BaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestSummary, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArclinkRequestSummary_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArclinkRequestSummary_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArclinkRequestSummary self) -> char const *"""
        return _DataModel.ArclinkRequestSummary_className(self)

    def typeInfo(self):
        """typeInfo(ArclinkRequestSummary self) -> RTTI"""
        return _DataModel.ArclinkRequestSummary_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkRequestSummary
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkRequestSummary
        """
        return _DataModel.ArclinkRequestSummary_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkRequestSummary
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkRequestSummary
        """
        return _DataModel.ArclinkRequestSummary_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArclinkRequestSummary self, GenericArchive ar)"""
        return _DataModel.ArclinkRequestSummary_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkRequestSummary self) -> ArclinkRequestSummary
        __init__(Seiscomp::DataModel::ArclinkRequestSummary self, ArclinkRequestSummary other) -> ArclinkRequestSummary
        """
        this = _DataModel.new_ArclinkRequestSummary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkRequestSummary
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(ArclinkRequestSummary self, ArclinkRequestSummary other) -> bool"""
        return _DataModel.ArclinkRequestSummary___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkRequestSummary self, ArclinkRequestSummary other) -> bool"""
        return _DataModel.ArclinkRequestSummary___ne__(self, *args)

    def equal(self, *args):
        """equal(ArclinkRequestSummary self, ArclinkRequestSummary other) -> bool"""
        return _DataModel.ArclinkRequestSummary_equal(self, *args)

    def setOkLineCount(self, *args):
        """setOkLineCount(ArclinkRequestSummary self, int okLineCount)"""
        return _DataModel.ArclinkRequestSummary_setOkLineCount(self, *args)

    def okLineCount(self):
        """okLineCount(ArclinkRequestSummary self) -> int"""
        return _DataModel.ArclinkRequestSummary_okLineCount(self)

    def setTotalLineCount(self, *args):
        """setTotalLineCount(ArclinkRequestSummary self, int totalLineCount)"""
        return _DataModel.ArclinkRequestSummary_setTotalLineCount(self, *args)

    def totalLineCount(self):
        """totalLineCount(ArclinkRequestSummary self) -> int"""
        return _DataModel.ArclinkRequestSummary_totalLineCount(self)

    def setAverageTimeWindow(self, *args):
        """setAverageTimeWindow(ArclinkRequestSummary self, int averageTimeWindow)"""
        return _DataModel.ArclinkRequestSummary_setAverageTimeWindow(self, *args)

    def averageTimeWindow(self):
        """averageTimeWindow(ArclinkRequestSummary self) -> int"""
        return _DataModel.ArclinkRequestSummary_averageTimeWindow(self)

ArclinkRequestSummary_swigregister = _DataModel.ArclinkRequestSummary_swigregister
ArclinkRequestSummary_swigregister(ArclinkRequestSummary)

def ArclinkRequestSummary_ClassName():
  """ArclinkRequestSummary_ClassName() -> char const *"""
  return _DataModel.ArclinkRequestSummary_ClassName()

def ArclinkRequestSummary_TypeInfo():
  """ArclinkRequestSummary_TypeInfo() -> RTTI"""
  return _DataModel.ArclinkRequestSummary_TypeInfo()

def ArclinkRequestSummary_Cast(*args):
  """
    Cast(BaseObject o) -> ArclinkRequestSummary
    ArclinkRequestSummary_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkRequestSummary
    """
  return _DataModel.ArclinkRequestSummary_Cast(*args)

def ArclinkRequestSummary_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArclinkRequestSummary
    ArclinkRequestSummary_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkRequestSummary
    """
  return _DataModel.ArclinkRequestSummary_ConstCast(*args)

class JournalEntry(Object):
    """Proxy of C++ Seiscomp::DataModel::JournalEntry class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalEntry, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.JournalEntry_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.JournalEntry_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(JournalEntry self) -> char const *"""
        return _DataModel.JournalEntry_className(self)

    def typeInfo(self):
        """typeInfo(JournalEntry self) -> RTTI"""
        return _DataModel.JournalEntry_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> JournalEntry
        Cast(Seiscomp::Core::BaseObjectPtr o) -> JournalEntry
        """
        return _DataModel.JournalEntry_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> JournalEntry
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> JournalEntry
        """
        return _DataModel.JournalEntry_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(JournalEntry self, GenericArchive ar)"""
        return _DataModel.JournalEntry_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::JournalEntry self) -> JournalEntry
        __init__(Seiscomp::DataModel::JournalEntry self, JournalEntry other) -> JournalEntry
        """
        this = _DataModel.new_JournalEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_JournalEntry
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(JournalEntry self, JournalEntry other) -> bool"""
        return _DataModel.JournalEntry___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(JournalEntry self, JournalEntry other) -> bool"""
        return _DataModel.JournalEntry___ne__(self, *args)

    def equal(self, *args):
        """equal(JournalEntry self, JournalEntry other) -> bool"""
        return _DataModel.JournalEntry_equal(self, *args)

    def setCreated(self, *args):
        """setCreated(JournalEntry self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & created)"""
        return _DataModel.JournalEntry_setCreated(self, *args)

    def created(self):
        """created(JournalEntry self) -> Time"""
        return _DataModel.JournalEntry_created(self)

    def setObjectID(self, *args):
        """setObjectID(JournalEntry self, std::string const & objectID)"""
        return _DataModel.JournalEntry_setObjectID(self, *args)

    def objectID(self):
        """objectID(JournalEntry self) -> std::string const &"""
        return _DataModel.JournalEntry_objectID(self)

    def setSender(self, *args):
        """setSender(JournalEntry self, std::string const & sender)"""
        return _DataModel.JournalEntry_setSender(self, *args)

    def sender(self):
        """sender(JournalEntry self) -> std::string const &"""
        return _DataModel.JournalEntry_sender(self)

    def setAction(self, *args):
        """setAction(JournalEntry self, std::string const & action)"""
        return _DataModel.JournalEntry_setAction(self, *args)

    def action(self):
        """action(JournalEntry self) -> std::string const &"""
        return _DataModel.JournalEntry_action(self)

    def setParameters(self, *args):
        """setParameters(JournalEntry self, std::string const & parameters)"""
        return _DataModel.JournalEntry_setParameters(self, *args)

    def parameters(self):
        """parameters(JournalEntry self) -> std::string const &"""
        return _DataModel.JournalEntry_parameters(self)

    def journaling(self):
        """journaling(JournalEntry self) -> Journaling"""
        return _DataModel.JournalEntry_journaling(self)

    def assign(self, *args):
        """assign(JournalEntry self, Object other) -> bool"""
        return _DataModel.JournalEntry_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(JournalEntry self, PublicObject parent) -> bool"""
        return _DataModel.JournalEntry_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(JournalEntry self, PublicObject parent) -> bool"""
        return _DataModel.JournalEntry_detachFrom(self, *args)

    def detach(self):
        """detach(JournalEntry self) -> bool"""
        return _DataModel.JournalEntry_detach(self)

    def clone(self):
        """clone(JournalEntry self) -> Object"""
        return _DataModel.JournalEntry_clone(self)

    def accept(self, *args):
        """accept(JournalEntry self, Visitor arg2)"""
        return _DataModel.JournalEntry_accept(self, *args)

JournalEntry_swigregister = _DataModel.JournalEntry_swigregister
JournalEntry_swigregister(JournalEntry)

def JournalEntry_ClassName():
  """JournalEntry_ClassName() -> char const *"""
  return _DataModel.JournalEntry_ClassName()

def JournalEntry_TypeInfo():
  """JournalEntry_TypeInfo() -> RTTI"""
  return _DataModel.JournalEntry_TypeInfo()

def JournalEntry_Cast(*args):
  """
    Cast(BaseObject o) -> JournalEntry
    JournalEntry_Cast(Seiscomp::Core::BaseObjectPtr o) -> JournalEntry
    """
  return _DataModel.JournalEntry_Cast(*args)

def JournalEntry_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> JournalEntry
    JournalEntry_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> JournalEntry
    """
  return _DataModel.JournalEntry_ConstCast(*args)

class Journaling(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Journaling class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Journaling, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Journaling, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Journaling_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Journaling_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Journaling self) -> char const *"""
        return _DataModel.Journaling_className(self)

    def typeInfo(self):
        """typeInfo(Journaling self) -> RTTI"""
        return _DataModel.Journaling_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Journaling
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Journaling
        """
        return _DataModel.Journaling_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Journaling
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Journaling
        """
        return _DataModel.Journaling_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Journaling self, GenericArchive ar)"""
        return _DataModel.Journaling_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Journaling self) -> Journaling
        __init__(Seiscomp::DataModel::Journaling self, Journaling other) -> Journaling
        """
        this = _DataModel.new_Journaling(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Journaling
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Journaling self, Journaling other) -> bool"""
        return _DataModel.Journaling___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Journaling self, Journaling other) -> bool"""
        return _DataModel.Journaling___ne__(self, *args)

    def equal(self, *args):
        """equal(Journaling self, Journaling other) -> bool"""
        return _DataModel.Journaling_equal(self, *args)

    def add(self, *args):
        """add(Journaling self, JournalEntry obj) -> bool"""
        return _DataModel.Journaling_add(self, *args)

    def remove(self, *args):
        """remove(Journaling self, JournalEntry obj) -> bool"""
        return _DataModel.Journaling_remove(self, *args)

    def removeJournalEntry(self, *args):
        """removeJournalEntry(Journaling self, size_t i) -> bool"""
        return _DataModel.Journaling_removeJournalEntry(self, *args)

    def journalEntryCount(self):
        """journalEntryCount(Journaling self) -> size_t"""
        return _DataModel.Journaling_journalEntryCount(self)

    def journalEntry(self, *args):
        """journalEntry(Journaling self, size_t i) -> JournalEntry"""
        return _DataModel.Journaling_journalEntry(self, *args)

    def findJournalEntry(self, *args):
        """findJournalEntry(Journaling self, JournalEntry journalEntry) -> JournalEntry"""
        return _DataModel.Journaling_findJournalEntry(self, *args)

    def assign(self, *args):
        """assign(Journaling self, Object other) -> bool"""
        return _DataModel.Journaling_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Journaling self, PublicObject parent) -> bool"""
        return _DataModel.Journaling_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Journaling self, PublicObject parent) -> bool"""
        return _DataModel.Journaling_detachFrom(self, *args)

    def detach(self):
        """detach(Journaling self) -> bool"""
        return _DataModel.Journaling_detach(self)

    def clone(self):
        """clone(Journaling self) -> Object"""
        return _DataModel.Journaling_clone(self)

    def updateChild(self, *args):
        """updateChild(Journaling self, Object child) -> bool"""
        return _DataModel.Journaling_updateChild(self, *args)

    def accept(self, *args):
        """accept(Journaling self, Visitor arg2)"""
        return _DataModel.Journaling_accept(self, *args)

Journaling_swigregister = _DataModel.Journaling_swigregister
Journaling_swigregister(Journaling)

def Journaling_ClassName():
  """Journaling_ClassName() -> char const *"""
  return _DataModel.Journaling_ClassName()

def Journaling_TypeInfo():
  """Journaling_TypeInfo() -> RTTI"""
  return _DataModel.Journaling_TypeInfo()

def Journaling_Cast(*args):
  """
    Cast(BaseObject o) -> Journaling
    Journaling_Cast(Seiscomp::Core::BaseObjectPtr o) -> Journaling
    """
  return _DataModel.Journaling_Cast(*args)

def Journaling_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Journaling
    Journaling_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Journaling
    """
  return _DataModel.Journaling_ConstCast(*args)

class ArclinkUserIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ArclinkUserIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkUserIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkUserIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkUserIndex self) -> ArclinkUserIndex
        __init__(Seiscomp::DataModel::ArclinkUserIndex self, std::string const & name, std::string const & email) -> ArclinkUserIndex
        __init__(Seiscomp::DataModel::ArclinkUserIndex self, ArclinkUserIndex arg2) -> ArclinkUserIndex
        """
        this = _DataModel.new_ArclinkUserIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ArclinkUserIndex self, ArclinkUserIndex arg2) -> bool"""
        return _DataModel.ArclinkUserIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkUserIndex self, ArclinkUserIndex arg2) -> bool"""
        return _DataModel.ArclinkUserIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.ArclinkUserIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ArclinkUserIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ArclinkUserIndex_name_get, _DataModel.ArclinkUserIndex_name_set)
    __swig_setmethods__["email"] = _DataModel.ArclinkUserIndex_email_set
    __swig_getmethods__["email"] = _DataModel.ArclinkUserIndex_email_get
    if _newclass:email = _swig_property(_DataModel.ArclinkUserIndex_email_get, _DataModel.ArclinkUserIndex_email_set)
    __swig_destroy__ = _DataModel.delete_ArclinkUserIndex
    __del__ = lambda self : None;
ArclinkUserIndex_swigregister = _DataModel.ArclinkUserIndex_swigregister
ArclinkUserIndex_swigregister(ArclinkUserIndex)

class ArclinkUser(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ArclinkUser class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkUser, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkUser, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArclinkUser_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArclinkUser_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArclinkUser self) -> char const *"""
        return _DataModel.ArclinkUser_className(self)

    def typeInfo(self):
        """typeInfo(ArclinkUser self) -> RTTI"""
        return _DataModel.ArclinkUser_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkUser
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkUser
        """
        return _DataModel.ArclinkUser_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkUser
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkUser
        """
        return _DataModel.ArclinkUser_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArclinkUser self, GenericArchive ar)"""
        return _DataModel.ArclinkUser_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkUser self, ArclinkUser other) -> ArclinkUser
        __init__(Seiscomp::DataModel::ArclinkUser self, std::string const & publicID) -> ArclinkUser
        """
        this = _DataModel.new_ArclinkUser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkUser
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ArclinkUser
        Create(std::string const & publicID) -> ArclinkUser
        """
        return _DataModel.ArclinkUser_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ArclinkUser"""
        return _DataModel.ArclinkUser_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ArclinkUser self, ArclinkUser other) -> bool"""
        return _DataModel.ArclinkUser___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkUser self, ArclinkUser other) -> bool"""
        return _DataModel.ArclinkUser___ne__(self, *args)

    def equal(self, *args):
        """equal(ArclinkUser self, ArclinkUser other) -> bool"""
        return _DataModel.ArclinkUser_equal(self, *args)

    def setName(self, *args):
        """setName(ArclinkUser self, std::string const & name)"""
        return _DataModel.ArclinkUser_setName(self, *args)

    def name(self):
        """name(ArclinkUser self) -> std::string const &"""
        return _DataModel.ArclinkUser_name(self)

    def setEmail(self, *args):
        """setEmail(ArclinkUser self, std::string const & email)"""
        return _DataModel.ArclinkUser_setEmail(self, *args)

    def email(self):
        """email(ArclinkUser self) -> std::string const &"""
        return _DataModel.ArclinkUser_email(self)

    def setPassword(self, *args):
        """setPassword(ArclinkUser self, std::string const & password)"""
        return _DataModel.ArclinkUser_setPassword(self, *args)

    def password(self):
        """password(ArclinkUser self) -> std::string const &"""
        return _DataModel.ArclinkUser_password(self)

    def index(self):
        """index(ArclinkUser self) -> ArclinkUserIndex"""
        return _DataModel.ArclinkUser_index(self)

    def equalIndex(self, *args):
        """equalIndex(ArclinkUser self, ArclinkUser lhs) -> bool"""
        return _DataModel.ArclinkUser_equalIndex(self, *args)

    def arclinkLog(self):
        """arclinkLog(ArclinkUser self) -> ArclinkLog"""
        return _DataModel.ArclinkUser_arclinkLog(self)

    def assign(self, *args):
        """assign(ArclinkUser self, Object other) -> bool"""
        return _DataModel.ArclinkUser_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ArclinkUser self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkUser_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ArclinkUser self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkUser_detachFrom(self, *args)

    def detach(self):
        """detach(ArclinkUser self) -> bool"""
        return _DataModel.ArclinkUser_detach(self)

    def clone(self):
        """clone(ArclinkUser self) -> Object"""
        return _DataModel.ArclinkUser_clone(self)

    def updateChild(self, *args):
        """updateChild(ArclinkUser self, Object child) -> bool"""
        return _DataModel.ArclinkUser_updateChild(self, *args)

    def accept(self, *args):
        """accept(ArclinkUser self, Visitor arg2)"""
        return _DataModel.ArclinkUser_accept(self, *args)

ArclinkUser_swigregister = _DataModel.ArclinkUser_swigregister
ArclinkUser_swigregister(ArclinkUser)

def ArclinkUser_ClassName():
  """ArclinkUser_ClassName() -> char const *"""
  return _DataModel.ArclinkUser_ClassName()

def ArclinkUser_TypeInfo():
  """ArclinkUser_TypeInfo() -> RTTI"""
  return _DataModel.ArclinkUser_TypeInfo()

def ArclinkUser_Cast(*args):
  """
    Cast(BaseObject o) -> ArclinkUser
    ArclinkUser_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkUser
    """
  return _DataModel.ArclinkUser_Cast(*args)

def ArclinkUser_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArclinkUser
    ArclinkUser_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkUser
    """
  return _DataModel.ArclinkUser_ConstCast(*args)

def ArclinkUser_Create(*args):
  """
    Create() -> ArclinkUser
    ArclinkUser_Create(std::string const & publicID) -> ArclinkUser
    """
  return _DataModel.ArclinkUser_Create(*args)

def ArclinkUser_Find(*args):
  """ArclinkUser_Find(std::string const & publicID) -> ArclinkUser"""
  return _DataModel.ArclinkUser_Find(*args)

class ArclinkStatusLineIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ArclinkStatusLineIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkStatusLineIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkStatusLineIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkStatusLineIndex self) -> ArclinkStatusLineIndex
        __init__(Seiscomp::DataModel::ArclinkStatusLineIndex self, std::string const & volumeID, std::string const & type, std::string const & status) -> ArclinkStatusLineIndex
        __init__(Seiscomp::DataModel::ArclinkStatusLineIndex self, ArclinkStatusLineIndex arg2) -> ArclinkStatusLineIndex
        """
        this = _DataModel.new_ArclinkStatusLineIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ArclinkStatusLineIndex self, ArclinkStatusLineIndex arg2) -> bool"""
        return _DataModel.ArclinkStatusLineIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkStatusLineIndex self, ArclinkStatusLineIndex arg2) -> bool"""
        return _DataModel.ArclinkStatusLineIndex___ne__(self, *args)

    __swig_setmethods__["volumeID"] = _DataModel.ArclinkStatusLineIndex_volumeID_set
    __swig_getmethods__["volumeID"] = _DataModel.ArclinkStatusLineIndex_volumeID_get
    if _newclass:volumeID = _swig_property(_DataModel.ArclinkStatusLineIndex_volumeID_get, _DataModel.ArclinkStatusLineIndex_volumeID_set)
    __swig_setmethods__["type"] = _DataModel.ArclinkStatusLineIndex_type_set
    __swig_getmethods__["type"] = _DataModel.ArclinkStatusLineIndex_type_get
    if _newclass:type = _swig_property(_DataModel.ArclinkStatusLineIndex_type_get, _DataModel.ArclinkStatusLineIndex_type_set)
    __swig_setmethods__["status"] = _DataModel.ArclinkStatusLineIndex_status_set
    __swig_getmethods__["status"] = _DataModel.ArclinkStatusLineIndex_status_get
    if _newclass:status = _swig_property(_DataModel.ArclinkStatusLineIndex_status_get, _DataModel.ArclinkStatusLineIndex_status_set)
    __swig_destroy__ = _DataModel.delete_ArclinkStatusLineIndex
    __del__ = lambda self : None;
ArclinkStatusLineIndex_swigregister = _DataModel.ArclinkStatusLineIndex_swigregister
ArclinkStatusLineIndex_swigregister(ArclinkStatusLineIndex)

class ArclinkStatusLine(Object):
    """Proxy of C++ Seiscomp::DataModel::ArclinkStatusLine class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkStatusLine, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkStatusLine, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArclinkStatusLine_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArclinkStatusLine_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArclinkStatusLine self) -> char const *"""
        return _DataModel.ArclinkStatusLine_className(self)

    def typeInfo(self):
        """typeInfo(ArclinkStatusLine self) -> RTTI"""
        return _DataModel.ArclinkStatusLine_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkStatusLine
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkStatusLine
        """
        return _DataModel.ArclinkStatusLine_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkStatusLine
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkStatusLine
        """
        return _DataModel.ArclinkStatusLine_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArclinkStatusLine self, GenericArchive ar)"""
        return _DataModel.ArclinkStatusLine_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkStatusLine self) -> ArclinkStatusLine
        __init__(Seiscomp::DataModel::ArclinkStatusLine self, ArclinkStatusLine other) -> ArclinkStatusLine
        """
        this = _DataModel.new_ArclinkStatusLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkStatusLine
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(ArclinkStatusLine self, ArclinkStatusLine other) -> bool"""
        return _DataModel.ArclinkStatusLine___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkStatusLine self, ArclinkStatusLine other) -> bool"""
        return _DataModel.ArclinkStatusLine___ne__(self, *args)

    def equal(self, *args):
        """equal(ArclinkStatusLine self, ArclinkStatusLine other) -> bool"""
        return _DataModel.ArclinkStatusLine_equal(self, *args)

    def setType(self, *args):
        """setType(ArclinkStatusLine self, std::string const & type)"""
        return _DataModel.ArclinkStatusLine_setType(self, *args)

    def type(self):
        """type(ArclinkStatusLine self) -> std::string const &"""
        return _DataModel.ArclinkStatusLine_type(self)

    def setStatus(self, *args):
        """setStatus(ArclinkStatusLine self, std::string const & status)"""
        return _DataModel.ArclinkStatusLine_setStatus(self, *args)

    def status(self):
        """status(ArclinkStatusLine self) -> std::string const &"""
        return _DataModel.ArclinkStatusLine_status(self)

    def setSize(self, *args):
        """setSize(ArclinkStatusLine self, Seiscomp::Core::Optional< int >::Impl const & size)"""
        return _DataModel.ArclinkStatusLine_setSize(self, *args)

    def size(self):
        """size(ArclinkStatusLine self) -> int"""
        return _DataModel.ArclinkStatusLine_size(self)

    def setMessage(self, *args):
        """setMessage(ArclinkStatusLine self, std::string const & message)"""
        return _DataModel.ArclinkStatusLine_setMessage(self, *args)

    def message(self):
        """message(ArclinkStatusLine self) -> std::string const &"""
        return _DataModel.ArclinkStatusLine_message(self)

    def setVolumeID(self, *args):
        """setVolumeID(ArclinkStatusLine self, std::string const & volumeID)"""
        return _DataModel.ArclinkStatusLine_setVolumeID(self, *args)

    def volumeID(self):
        """volumeID(ArclinkStatusLine self) -> std::string const &"""
        return _DataModel.ArclinkStatusLine_volumeID(self)

    def index(self):
        """index(ArclinkStatusLine self) -> ArclinkStatusLineIndex"""
        return _DataModel.ArclinkStatusLine_index(self)

    def equalIndex(self, *args):
        """equalIndex(ArclinkStatusLine self, ArclinkStatusLine lhs) -> bool"""
        return _DataModel.ArclinkStatusLine_equalIndex(self, *args)

    def arclinkRequest(self):
        """arclinkRequest(ArclinkStatusLine self) -> ArclinkRequest"""
        return _DataModel.ArclinkStatusLine_arclinkRequest(self)

    def assign(self, *args):
        """assign(ArclinkStatusLine self, Object other) -> bool"""
        return _DataModel.ArclinkStatusLine_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ArclinkStatusLine self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkStatusLine_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ArclinkStatusLine self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkStatusLine_detachFrom(self, *args)

    def detach(self):
        """detach(ArclinkStatusLine self) -> bool"""
        return _DataModel.ArclinkStatusLine_detach(self)

    def clone(self):
        """clone(ArclinkStatusLine self) -> Object"""
        return _DataModel.ArclinkStatusLine_clone(self)

    def accept(self, *args):
        """accept(ArclinkStatusLine self, Visitor arg2)"""
        return _DataModel.ArclinkStatusLine_accept(self, *args)

ArclinkStatusLine_swigregister = _DataModel.ArclinkStatusLine_swigregister
ArclinkStatusLine_swigregister(ArclinkStatusLine)

def ArclinkStatusLine_ClassName():
  """ArclinkStatusLine_ClassName() -> char const *"""
  return _DataModel.ArclinkStatusLine_ClassName()

def ArclinkStatusLine_TypeInfo():
  """ArclinkStatusLine_TypeInfo() -> RTTI"""
  return _DataModel.ArclinkStatusLine_TypeInfo()

def ArclinkStatusLine_Cast(*args):
  """
    Cast(BaseObject o) -> ArclinkStatusLine
    ArclinkStatusLine_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkStatusLine
    """
  return _DataModel.ArclinkStatusLine_Cast(*args)

def ArclinkStatusLine_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArclinkStatusLine
    ArclinkStatusLine_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkStatusLine
    """
  return _DataModel.ArclinkStatusLine_ConstCast(*args)

class ArclinkRequestLineIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ArclinkRequestLineIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestLineIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestLineIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkRequestLineIndex self) -> ArclinkRequestLineIndex
        __init__(Seiscomp::DataModel::ArclinkRequestLineIndex self, Time start, Time end, WaveformStreamID streamID) -> ArclinkRequestLineIndex
        __init__(Seiscomp::DataModel::ArclinkRequestLineIndex self, ArclinkRequestLineIndex arg2) -> ArclinkRequestLineIndex
        """
        this = _DataModel.new_ArclinkRequestLineIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ArclinkRequestLineIndex self, ArclinkRequestLineIndex arg2) -> bool"""
        return _DataModel.ArclinkRequestLineIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkRequestLineIndex self, ArclinkRequestLineIndex arg2) -> bool"""
        return _DataModel.ArclinkRequestLineIndex___ne__(self, *args)

    __swig_setmethods__["start"] = _DataModel.ArclinkRequestLineIndex_start_set
    __swig_getmethods__["start"] = _DataModel.ArclinkRequestLineIndex_start_get
    if _newclass:start = _swig_property(_DataModel.ArclinkRequestLineIndex_start_get, _DataModel.ArclinkRequestLineIndex_start_set)
    __swig_setmethods__["end"] = _DataModel.ArclinkRequestLineIndex_end_set
    __swig_getmethods__["end"] = _DataModel.ArclinkRequestLineIndex_end_get
    if _newclass:end = _swig_property(_DataModel.ArclinkRequestLineIndex_end_get, _DataModel.ArclinkRequestLineIndex_end_set)
    __swig_setmethods__["streamID"] = _DataModel.ArclinkRequestLineIndex_streamID_set
    __swig_getmethods__["streamID"] = _DataModel.ArclinkRequestLineIndex_streamID_get
    if _newclass:streamID = _swig_property(_DataModel.ArclinkRequestLineIndex_streamID_get, _DataModel.ArclinkRequestLineIndex_streamID_set)
    __swig_destroy__ = _DataModel.delete_ArclinkRequestLineIndex
    __del__ = lambda self : None;
ArclinkRequestLineIndex_swigregister = _DataModel.ArclinkRequestLineIndex_swigregister
ArclinkRequestLineIndex_swigregister(ArclinkRequestLineIndex)

class ArclinkRequestLine(Object):
    """Proxy of C++ Seiscomp::DataModel::ArclinkRequestLine class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestLine, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestLine, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArclinkRequestLine_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArclinkRequestLine_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArclinkRequestLine self) -> char const *"""
        return _DataModel.ArclinkRequestLine_className(self)

    def typeInfo(self):
        """typeInfo(ArclinkRequestLine self) -> RTTI"""
        return _DataModel.ArclinkRequestLine_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkRequestLine
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkRequestLine
        """
        return _DataModel.ArclinkRequestLine_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkRequestLine
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkRequestLine
        """
        return _DataModel.ArclinkRequestLine_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArclinkRequestLine self, GenericArchive ar)"""
        return _DataModel.ArclinkRequestLine_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkRequestLine self) -> ArclinkRequestLine
        __init__(Seiscomp::DataModel::ArclinkRequestLine self, ArclinkRequestLine other) -> ArclinkRequestLine
        """
        this = _DataModel.new_ArclinkRequestLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkRequestLine
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(ArclinkRequestLine self, ArclinkRequestLine other) -> bool"""
        return _DataModel.ArclinkRequestLine___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkRequestLine self, ArclinkRequestLine other) -> bool"""
        return _DataModel.ArclinkRequestLine___ne__(self, *args)

    def equal(self, *args):
        """equal(ArclinkRequestLine self, ArclinkRequestLine other) -> bool"""
        return _DataModel.ArclinkRequestLine_equal(self, *args)

    def setStart(self, *args):
        """setStart(ArclinkRequestLine self, Time start)"""
        return _DataModel.ArclinkRequestLine_setStart(self, *args)

    def start(self):
        """start(ArclinkRequestLine self) -> Time"""
        return _DataModel.ArclinkRequestLine_start(self)

    def setEnd(self, *args):
        """setEnd(ArclinkRequestLine self, Time end)"""
        return _DataModel.ArclinkRequestLine_setEnd(self, *args)

    def end(self):
        """end(ArclinkRequestLine self) -> Time"""
        return _DataModel.ArclinkRequestLine_end(self)

    def setStreamID(self, *args):
        """setStreamID(ArclinkRequestLine self, WaveformStreamID streamID)"""
        return _DataModel.ArclinkRequestLine_setStreamID(self, *args)

    def streamID(self, *args):
        """
        streamID(ArclinkRequestLine self) -> WaveformStreamID
        streamID(ArclinkRequestLine self) -> WaveformStreamID
        """
        return _DataModel.ArclinkRequestLine_streamID(self, *args)

    def setRestricted(self, *args):
        """setRestricted(ArclinkRequestLine self, Seiscomp::Core::Optional< bool >::Impl const & restricted)"""
        return _DataModel.ArclinkRequestLine_setRestricted(self, *args)

    def restricted(self):
        """restricted(ArclinkRequestLine self) -> bool"""
        return _DataModel.ArclinkRequestLine_restricted(self)

    def setShared(self, *args):
        """setShared(ArclinkRequestLine self, Seiscomp::Core::Optional< bool >::Impl const & shared)"""
        return _DataModel.ArclinkRequestLine_setShared(self, *args)

    def shared(self):
        """shared(ArclinkRequestLine self) -> bool"""
        return _DataModel.ArclinkRequestLine_shared(self)

    def setNetClass(self, *args):
        """setNetClass(ArclinkRequestLine self, std::string const & netClass)"""
        return _DataModel.ArclinkRequestLine_setNetClass(self, *args)

    def netClass(self):
        """netClass(ArclinkRequestLine self) -> std::string const &"""
        return _DataModel.ArclinkRequestLine_netClass(self)

    def setConstraints(self, *args):
        """setConstraints(ArclinkRequestLine self, std::string const & constraints)"""
        return _DataModel.ArclinkRequestLine_setConstraints(self, *args)

    def constraints(self):
        """constraints(ArclinkRequestLine self) -> std::string const &"""
        return _DataModel.ArclinkRequestLine_constraints(self)

    def setStatus(self, *args):
        """setStatus(ArclinkRequestLine self, ArclinkStatusLine status)"""
        return _DataModel.ArclinkRequestLine_setStatus(self, *args)

    def status(self, *args):
        """
        status(ArclinkRequestLine self) -> ArclinkStatusLine
        status(ArclinkRequestLine self) -> ArclinkStatusLine
        """
        return _DataModel.ArclinkRequestLine_status(self, *args)

    def index(self):
        """index(ArclinkRequestLine self) -> ArclinkRequestLineIndex"""
        return _DataModel.ArclinkRequestLine_index(self)

    def equalIndex(self, *args):
        """equalIndex(ArclinkRequestLine self, ArclinkRequestLine lhs) -> bool"""
        return _DataModel.ArclinkRequestLine_equalIndex(self, *args)

    def arclinkRequest(self):
        """arclinkRequest(ArclinkRequestLine self) -> ArclinkRequest"""
        return _DataModel.ArclinkRequestLine_arclinkRequest(self)

    def assign(self, *args):
        """assign(ArclinkRequestLine self, Object other) -> bool"""
        return _DataModel.ArclinkRequestLine_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ArclinkRequestLine self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkRequestLine_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ArclinkRequestLine self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkRequestLine_detachFrom(self, *args)

    def detach(self):
        """detach(ArclinkRequestLine self) -> bool"""
        return _DataModel.ArclinkRequestLine_detach(self)

    def clone(self):
        """clone(ArclinkRequestLine self) -> Object"""
        return _DataModel.ArclinkRequestLine_clone(self)

    def accept(self, *args):
        """accept(ArclinkRequestLine self, Visitor arg2)"""
        return _DataModel.ArclinkRequestLine_accept(self, *args)

ArclinkRequestLine_swigregister = _DataModel.ArclinkRequestLine_swigregister
ArclinkRequestLine_swigregister(ArclinkRequestLine)

def ArclinkRequestLine_ClassName():
  """ArclinkRequestLine_ClassName() -> char const *"""
  return _DataModel.ArclinkRequestLine_ClassName()

def ArclinkRequestLine_TypeInfo():
  """ArclinkRequestLine_TypeInfo() -> RTTI"""
  return _DataModel.ArclinkRequestLine_TypeInfo()

def ArclinkRequestLine_Cast(*args):
  """
    Cast(BaseObject o) -> ArclinkRequestLine
    ArclinkRequestLine_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkRequestLine
    """
  return _DataModel.ArclinkRequestLine_Cast(*args)

def ArclinkRequestLine_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArclinkRequestLine
    ArclinkRequestLine_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkRequestLine
    """
  return _DataModel.ArclinkRequestLine_ConstCast(*args)

class ArclinkRequestIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ArclinkRequestIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequestIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequestIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkRequestIndex self) -> ArclinkRequestIndex
        __init__(Seiscomp::DataModel::ArclinkRequestIndex self, Time created, std::string const & requestID, std::string const & userID) -> ArclinkRequestIndex
        __init__(Seiscomp::DataModel::ArclinkRequestIndex self, ArclinkRequestIndex arg2) -> ArclinkRequestIndex
        """
        this = _DataModel.new_ArclinkRequestIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ArclinkRequestIndex self, ArclinkRequestIndex arg2) -> bool"""
        return _DataModel.ArclinkRequestIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkRequestIndex self, ArclinkRequestIndex arg2) -> bool"""
        return _DataModel.ArclinkRequestIndex___ne__(self, *args)

    __swig_setmethods__["created"] = _DataModel.ArclinkRequestIndex_created_set
    __swig_getmethods__["created"] = _DataModel.ArclinkRequestIndex_created_get
    if _newclass:created = _swig_property(_DataModel.ArclinkRequestIndex_created_get, _DataModel.ArclinkRequestIndex_created_set)
    __swig_setmethods__["requestID"] = _DataModel.ArclinkRequestIndex_requestID_set
    __swig_getmethods__["requestID"] = _DataModel.ArclinkRequestIndex_requestID_get
    if _newclass:requestID = _swig_property(_DataModel.ArclinkRequestIndex_requestID_get, _DataModel.ArclinkRequestIndex_requestID_set)
    __swig_setmethods__["userID"] = _DataModel.ArclinkRequestIndex_userID_set
    __swig_getmethods__["userID"] = _DataModel.ArclinkRequestIndex_userID_get
    if _newclass:userID = _swig_property(_DataModel.ArclinkRequestIndex_userID_get, _DataModel.ArclinkRequestIndex_userID_set)
    __swig_destroy__ = _DataModel.delete_ArclinkRequestIndex
    __del__ = lambda self : None;
ArclinkRequestIndex_swigregister = _DataModel.ArclinkRequestIndex_swigregister
ArclinkRequestIndex_swigregister(ArclinkRequestIndex)

class ArclinkRequest(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ArclinkRequest class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkRequest, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArclinkRequest_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArclinkRequest_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArclinkRequest self) -> char const *"""
        return _DataModel.ArclinkRequest_className(self)

    def typeInfo(self):
        """typeInfo(ArclinkRequest self) -> RTTI"""
        return _DataModel.ArclinkRequest_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkRequest
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkRequest
        """
        return _DataModel.ArclinkRequest_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkRequest
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkRequest
        """
        return _DataModel.ArclinkRequest_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArclinkRequest self, GenericArchive ar)"""
        return _DataModel.ArclinkRequest_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkRequest self, ArclinkRequest other) -> ArclinkRequest
        __init__(Seiscomp::DataModel::ArclinkRequest self, std::string const & publicID) -> ArclinkRequest
        """
        this = _DataModel.new_ArclinkRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkRequest
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ArclinkRequest
        Create(std::string const & publicID) -> ArclinkRequest
        """
        return _DataModel.ArclinkRequest_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ArclinkRequest"""
        return _DataModel.ArclinkRequest_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ArclinkRequest self, ArclinkRequest other) -> bool"""
        return _DataModel.ArclinkRequest___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkRequest self, ArclinkRequest other) -> bool"""
        return _DataModel.ArclinkRequest___ne__(self, *args)

    def equal(self, *args):
        """equal(ArclinkRequest self, ArclinkRequest other) -> bool"""
        return _DataModel.ArclinkRequest_equal(self, *args)

    def setRequestID(self, *args):
        """setRequestID(ArclinkRequest self, std::string const & requestID)"""
        return _DataModel.ArclinkRequest_setRequestID(self, *args)

    def requestID(self):
        """requestID(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_requestID(self)

    def setUserID(self, *args):
        """setUserID(ArclinkRequest self, std::string const & userID)"""
        return _DataModel.ArclinkRequest_setUserID(self, *args)

    def userID(self):
        """userID(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_userID(self)

    def setUserIP(self, *args):
        """setUserIP(ArclinkRequest self, std::string const & userIP)"""
        return _DataModel.ArclinkRequest_setUserIP(self, *args)

    def userIP(self):
        """userIP(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_userIP(self)

    def setClientID(self, *args):
        """setClientID(ArclinkRequest self, std::string const & clientID)"""
        return _DataModel.ArclinkRequest_setClientID(self, *args)

    def clientID(self):
        """clientID(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_clientID(self)

    def setClientIP(self, *args):
        """setClientIP(ArclinkRequest self, std::string const & clientIP)"""
        return _DataModel.ArclinkRequest_setClientIP(self, *args)

    def clientIP(self):
        """clientIP(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_clientIP(self)

    def setType(self, *args):
        """setType(ArclinkRequest self, std::string const & type)"""
        return _DataModel.ArclinkRequest_setType(self, *args)

    def type(self):
        """type(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_type(self)

    def setCreated(self, *args):
        """setCreated(ArclinkRequest self, Time created)"""
        return _DataModel.ArclinkRequest_setCreated(self, *args)

    def created(self):
        """created(ArclinkRequest self) -> Time"""
        return _DataModel.ArclinkRequest_created(self)

    def setStatus(self, *args):
        """setStatus(ArclinkRequest self, std::string const & status)"""
        return _DataModel.ArclinkRequest_setStatus(self, *args)

    def status(self):
        """status(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_status(self)

    def setMessage(self, *args):
        """setMessage(ArclinkRequest self, std::string const & message)"""
        return _DataModel.ArclinkRequest_setMessage(self, *args)

    def message(self):
        """message(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_message(self)

    def setLabel(self, *args):
        """setLabel(ArclinkRequest self, std::string const & label)"""
        return _DataModel.ArclinkRequest_setLabel(self, *args)

    def label(self):
        """label(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_label(self)

    def setHeader(self, *args):
        """setHeader(ArclinkRequest self, std::string const & header)"""
        return _DataModel.ArclinkRequest_setHeader(self, *args)

    def header(self):
        """header(ArclinkRequest self) -> std::string const &"""
        return _DataModel.ArclinkRequest_header(self)

    def setSummary(self, *args):
        """setSummary(ArclinkRequest self, Seiscomp::Core::Optional< Seiscomp::DataModel::ArclinkRequestSummary >::Impl const & summary)"""
        return _DataModel.ArclinkRequest_setSummary(self, *args)

    def summary(self, *args):
        """
        summary(ArclinkRequest self) -> ArclinkRequestSummary
        summary(ArclinkRequest self) -> ArclinkRequestSummary
        """
        return _DataModel.ArclinkRequest_summary(self, *args)

    def index(self):
        """index(ArclinkRequest self) -> ArclinkRequestIndex"""
        return _DataModel.ArclinkRequest_index(self)

    def equalIndex(self, *args):
        """equalIndex(ArclinkRequest self, ArclinkRequest lhs) -> bool"""
        return _DataModel.ArclinkRequest_equalIndex(self, *args)

    def add(self, *args):
        """
        add(ArclinkRequest self, ArclinkStatusLine obj) -> bool
        add(ArclinkRequest self, ArclinkRequestLine obj) -> bool
        """
        return _DataModel.ArclinkRequest_add(self, *args)

    def remove(self, *args):
        """
        remove(ArclinkRequest self, ArclinkStatusLine obj) -> bool
        remove(ArclinkRequest self, ArclinkRequestLine obj) -> bool
        """
        return _DataModel.ArclinkRequest_remove(self, *args)

    def removeArclinkStatusLine(self, *args):
        """
        removeArclinkStatusLine(ArclinkRequest self, size_t i) -> bool
        removeArclinkStatusLine(ArclinkRequest self, ArclinkStatusLineIndex i) -> bool
        """
        return _DataModel.ArclinkRequest_removeArclinkStatusLine(self, *args)

    def removeArclinkRequestLine(self, *args):
        """
        removeArclinkRequestLine(ArclinkRequest self, size_t i) -> bool
        removeArclinkRequestLine(ArclinkRequest self, ArclinkRequestLineIndex i) -> bool
        """
        return _DataModel.ArclinkRequest_removeArclinkRequestLine(self, *args)

    def arclinkStatusLineCount(self):
        """arclinkStatusLineCount(ArclinkRequest self) -> size_t"""
        return _DataModel.ArclinkRequest_arclinkStatusLineCount(self)

    def arclinkRequestLineCount(self):
        """arclinkRequestLineCount(ArclinkRequest self) -> size_t"""
        return _DataModel.ArclinkRequest_arclinkRequestLineCount(self)

    def arclinkStatusLine(self, *args):
        """
        arclinkStatusLine(ArclinkRequest self, size_t i) -> ArclinkStatusLine
        arclinkStatusLine(ArclinkRequest self, ArclinkStatusLineIndex i) -> ArclinkStatusLine
        """
        return _DataModel.ArclinkRequest_arclinkStatusLine(self, *args)

    def arclinkRequestLine(self, *args):
        """
        arclinkRequestLine(ArclinkRequest self, size_t i) -> ArclinkRequestLine
        arclinkRequestLine(ArclinkRequest self, ArclinkRequestLineIndex i) -> ArclinkRequestLine
        """
        return _DataModel.ArclinkRequest_arclinkRequestLine(self, *args)

    def arclinkLog(self):
        """arclinkLog(ArclinkRequest self) -> ArclinkLog"""
        return _DataModel.ArclinkRequest_arclinkLog(self)

    def assign(self, *args):
        """assign(ArclinkRequest self, Object other) -> bool"""
        return _DataModel.ArclinkRequest_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ArclinkRequest self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkRequest_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ArclinkRequest self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkRequest_detachFrom(self, *args)

    def detach(self):
        """detach(ArclinkRequest self) -> bool"""
        return _DataModel.ArclinkRequest_detach(self)

    def clone(self):
        """clone(ArclinkRequest self) -> Object"""
        return _DataModel.ArclinkRequest_clone(self)

    def updateChild(self, *args):
        """updateChild(ArclinkRequest self, Object child) -> bool"""
        return _DataModel.ArclinkRequest_updateChild(self, *args)

    def accept(self, *args):
        """accept(ArclinkRequest self, Visitor arg2)"""
        return _DataModel.ArclinkRequest_accept(self, *args)

ArclinkRequest_swigregister = _DataModel.ArclinkRequest_swigregister
ArclinkRequest_swigregister(ArclinkRequest)

def ArclinkRequest_ClassName():
  """ArclinkRequest_ClassName() -> char const *"""
  return _DataModel.ArclinkRequest_ClassName()

def ArclinkRequest_TypeInfo():
  """ArclinkRequest_TypeInfo() -> RTTI"""
  return _DataModel.ArclinkRequest_TypeInfo()

def ArclinkRequest_Cast(*args):
  """
    Cast(BaseObject o) -> ArclinkRequest
    ArclinkRequest_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkRequest
    """
  return _DataModel.ArclinkRequest_Cast(*args)

def ArclinkRequest_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArclinkRequest
    ArclinkRequest_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkRequest
    """
  return _DataModel.ArclinkRequest_ConstCast(*args)

def ArclinkRequest_Create(*args):
  """
    Create() -> ArclinkRequest
    ArclinkRequest_Create(std::string const & publicID) -> ArclinkRequest
    """
  return _DataModel.ArclinkRequest_Create(*args)

def ArclinkRequest_Find(*args):
  """ArclinkRequest_Find(std::string const & publicID) -> ArclinkRequest"""
  return _DataModel.ArclinkRequest_Find(*args)

class ArclinkLog(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ArclinkLog class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArclinkLog, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArclinkLog, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ArclinkLog_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ArclinkLog_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ArclinkLog self) -> char const *"""
        return _DataModel.ArclinkLog_className(self)

    def typeInfo(self):
        """typeInfo(ArclinkLog self) -> RTTI"""
        return _DataModel.ArclinkLog_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ArclinkLog
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkLog
        """
        return _DataModel.ArclinkLog_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ArclinkLog
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkLog
        """
        return _DataModel.ArclinkLog_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ArclinkLog self, GenericArchive ar)"""
        return _DataModel.ArclinkLog_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArclinkLog self) -> ArclinkLog
        __init__(Seiscomp::DataModel::ArclinkLog self, ArclinkLog other) -> ArclinkLog
        """
        this = _DataModel.new_ArclinkLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ArclinkLog
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(ArclinkLog self, ArclinkLog other) -> bool"""
        return _DataModel.ArclinkLog___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArclinkLog self, ArclinkLog other) -> bool"""
        return _DataModel.ArclinkLog___ne__(self, *args)

    def equal(self, *args):
        """equal(ArclinkLog self, ArclinkLog other) -> bool"""
        return _DataModel.ArclinkLog_equal(self, *args)

    def add(self, *args):
        """
        add(ArclinkLog self, ArclinkRequest obj) -> bool
        add(ArclinkLog self, ArclinkUser obj) -> bool
        """
        return _DataModel.ArclinkLog_add(self, *args)

    def remove(self, *args):
        """
        remove(ArclinkLog self, ArclinkRequest obj) -> bool
        remove(ArclinkLog self, ArclinkUser obj) -> bool
        """
        return _DataModel.ArclinkLog_remove(self, *args)

    def removeArclinkRequest(self, *args):
        """
        removeArclinkRequest(ArclinkLog self, size_t i) -> bool
        removeArclinkRequest(ArclinkLog self, ArclinkRequestIndex i) -> bool
        """
        return _DataModel.ArclinkLog_removeArclinkRequest(self, *args)

    def removeArclinkUser(self, *args):
        """
        removeArclinkUser(ArclinkLog self, size_t i) -> bool
        removeArclinkUser(ArclinkLog self, ArclinkUserIndex i) -> bool
        """
        return _DataModel.ArclinkLog_removeArclinkUser(self, *args)

    def arclinkRequestCount(self):
        """arclinkRequestCount(ArclinkLog self) -> size_t"""
        return _DataModel.ArclinkLog_arclinkRequestCount(self)

    def arclinkUserCount(self):
        """arclinkUserCount(ArclinkLog self) -> size_t"""
        return _DataModel.ArclinkLog_arclinkUserCount(self)

    def arclinkRequest(self, *args):
        """
        arclinkRequest(ArclinkLog self, size_t i) -> ArclinkRequest
        arclinkRequest(ArclinkLog self, ArclinkRequestIndex i) -> ArclinkRequest
        """
        return _DataModel.ArclinkLog_arclinkRequest(self, *args)

    def arclinkUser(self, *args):
        """
        arclinkUser(ArclinkLog self, size_t i) -> ArclinkUser
        arclinkUser(ArclinkLog self, ArclinkUserIndex i) -> ArclinkUser
        """
        return _DataModel.ArclinkLog_arclinkUser(self, *args)

    def findArclinkRequest(self, *args):
        """findArclinkRequest(ArclinkLog self, std::string const & publicID) -> ArclinkRequest"""
        return _DataModel.ArclinkLog_findArclinkRequest(self, *args)

    def findArclinkUser(self, *args):
        """findArclinkUser(ArclinkLog self, std::string const & publicID) -> ArclinkUser"""
        return _DataModel.ArclinkLog_findArclinkUser(self, *args)

    def assign(self, *args):
        """assign(ArclinkLog self, Object other) -> bool"""
        return _DataModel.ArclinkLog_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ArclinkLog self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkLog_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ArclinkLog self, PublicObject parent) -> bool"""
        return _DataModel.ArclinkLog_detachFrom(self, *args)

    def detach(self):
        """detach(ArclinkLog self) -> bool"""
        return _DataModel.ArclinkLog_detach(self)

    def clone(self):
        """clone(ArclinkLog self) -> Object"""
        return _DataModel.ArclinkLog_clone(self)

    def updateChild(self, *args):
        """updateChild(ArclinkLog self, Object child) -> bool"""
        return _DataModel.ArclinkLog_updateChild(self, *args)

    def accept(self, *args):
        """accept(ArclinkLog self, Visitor arg2)"""
        return _DataModel.ArclinkLog_accept(self, *args)

ArclinkLog_swigregister = _DataModel.ArclinkLog_swigregister
ArclinkLog_swigregister(ArclinkLog)

def ArclinkLog_ClassName():
  """ArclinkLog_ClassName() -> char const *"""
  return _DataModel.ArclinkLog_ClassName()

def ArclinkLog_TypeInfo():
  """ArclinkLog_TypeInfo() -> RTTI"""
  return _DataModel.ArclinkLog_TypeInfo()

def ArclinkLog_Cast(*args):
  """
    Cast(BaseObject o) -> ArclinkLog
    ArclinkLog_Cast(Seiscomp::Core::BaseObjectPtr o) -> ArclinkLog
    """
  return _DataModel.ArclinkLog_Cast(*args)

def ArclinkLog_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ArclinkLog
    ArclinkLog_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ArclinkLog
    """
  return _DataModel.ArclinkLog_ConstCast(*args)

class QCLogIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::QCLogIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCLogIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCLogIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::QCLogIndex self) -> QCLogIndex
        __init__(Seiscomp::DataModel::QCLogIndex self, Time start, WaveformStreamID waveformID) -> QCLogIndex
        __init__(Seiscomp::DataModel::QCLogIndex self, QCLogIndex arg2) -> QCLogIndex
        """
        this = _DataModel.new_QCLogIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(QCLogIndex self, QCLogIndex arg2) -> bool"""
        return _DataModel.QCLogIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(QCLogIndex self, QCLogIndex arg2) -> bool"""
        return _DataModel.QCLogIndex___ne__(self, *args)

    __swig_setmethods__["start"] = _DataModel.QCLogIndex_start_set
    __swig_getmethods__["start"] = _DataModel.QCLogIndex_start_get
    if _newclass:start = _swig_property(_DataModel.QCLogIndex_start_get, _DataModel.QCLogIndex_start_set)
    __swig_setmethods__["waveformID"] = _DataModel.QCLogIndex_waveformID_set
    __swig_getmethods__["waveformID"] = _DataModel.QCLogIndex_waveformID_get
    if _newclass:waveformID = _swig_property(_DataModel.QCLogIndex_waveformID_get, _DataModel.QCLogIndex_waveformID_set)
    __swig_destroy__ = _DataModel.delete_QCLogIndex
    __del__ = lambda self : None;
QCLogIndex_swigregister = _DataModel.QCLogIndex_swigregister
QCLogIndex_swigregister(QCLogIndex)

class QCLog(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::QCLog class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCLog, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QCLog, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.QCLog_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.QCLog_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(QCLog self) -> char const *"""
        return _DataModel.QCLog_className(self)

    def typeInfo(self):
        """typeInfo(QCLog self) -> RTTI"""
        return _DataModel.QCLog_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> QCLog
        Cast(Seiscomp::Core::BaseObjectPtr o) -> QCLog
        """
        return _DataModel.QCLog_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> QCLog
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> QCLog
        """
        return _DataModel.QCLog_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(QCLog self, GenericArchive ar)"""
        return _DataModel.QCLog_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::QCLog self, QCLog other) -> QCLog
        __init__(Seiscomp::DataModel::QCLog self, std::string const & publicID) -> QCLog
        """
        this = _DataModel.new_QCLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_QCLog
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> QCLog
        Create(std::string const & publicID) -> QCLog
        """
        return _DataModel.QCLog_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> QCLog"""
        return _DataModel.QCLog_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(QCLog self, QCLog other) -> bool"""
        return _DataModel.QCLog___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(QCLog self, QCLog other) -> bool"""
        return _DataModel.QCLog___ne__(self, *args)

    def equal(self, *args):
        """equal(QCLog self, QCLog other) -> bool"""
        return _DataModel.QCLog_equal(self, *args)

    def setWaveformID(self, *args):
        """setWaveformID(QCLog self, WaveformStreamID waveformID)"""
        return _DataModel.QCLog_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(QCLog self) -> WaveformStreamID
        waveformID(QCLog self) -> WaveformStreamID
        """
        return _DataModel.QCLog_waveformID(self, *args)

    def setCreatorID(self, *args):
        """setCreatorID(QCLog self, std::string const & creatorID)"""
        return _DataModel.QCLog_setCreatorID(self, *args)

    def creatorID(self):
        """creatorID(QCLog self) -> std::string const &"""
        return _DataModel.QCLog_creatorID(self)

    def setCreated(self, *args):
        """setCreated(QCLog self, Time created)"""
        return _DataModel.QCLog_setCreated(self, *args)

    def created(self):
        """created(QCLog self) -> Time"""
        return _DataModel.QCLog_created(self)

    def setStart(self, *args):
        """setStart(QCLog self, Time start)"""
        return _DataModel.QCLog_setStart(self, *args)

    def start(self):
        """start(QCLog self) -> Time"""
        return _DataModel.QCLog_start(self)

    def setEnd(self, *args):
        """setEnd(QCLog self, Time end)"""
        return _DataModel.QCLog_setEnd(self, *args)

    def end(self):
        """end(QCLog self) -> Time"""
        return _DataModel.QCLog_end(self)

    def setMessage(self, *args):
        """setMessage(QCLog self, std::string const & message)"""
        return _DataModel.QCLog_setMessage(self, *args)

    def message(self):
        """message(QCLog self) -> std::string const &"""
        return _DataModel.QCLog_message(self)

    def index(self):
        """index(QCLog self) -> QCLogIndex"""
        return _DataModel.QCLog_index(self)

    def equalIndex(self, *args):
        """equalIndex(QCLog self, QCLog lhs) -> bool"""
        return _DataModel.QCLog_equalIndex(self, *args)

    def qualityControl(self):
        """qualityControl(QCLog self) -> QualityControl"""
        return _DataModel.QCLog_qualityControl(self)

    def assign(self, *args):
        """assign(QCLog self, Object other) -> bool"""
        return _DataModel.QCLog_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(QCLog self, PublicObject parent) -> bool"""
        return _DataModel.QCLog_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(QCLog self, PublicObject parent) -> bool"""
        return _DataModel.QCLog_detachFrom(self, *args)

    def detach(self):
        """detach(QCLog self) -> bool"""
        return _DataModel.QCLog_detach(self)

    def clone(self):
        """clone(QCLog self) -> Object"""
        return _DataModel.QCLog_clone(self)

    def updateChild(self, *args):
        """updateChild(QCLog self, Object child) -> bool"""
        return _DataModel.QCLog_updateChild(self, *args)

    def accept(self, *args):
        """accept(QCLog self, Visitor arg2)"""
        return _DataModel.QCLog_accept(self, *args)

QCLog_swigregister = _DataModel.QCLog_swigregister
QCLog_swigregister(QCLog)

def QCLog_ClassName():
  """QCLog_ClassName() -> char const *"""
  return _DataModel.QCLog_ClassName()

def QCLog_TypeInfo():
  """QCLog_TypeInfo() -> RTTI"""
  return _DataModel.QCLog_TypeInfo()

def QCLog_Cast(*args):
  """
    Cast(BaseObject o) -> QCLog
    QCLog_Cast(Seiscomp::Core::BaseObjectPtr o) -> QCLog
    """
  return _DataModel.QCLog_Cast(*args)

def QCLog_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> QCLog
    QCLog_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> QCLog
    """
  return _DataModel.QCLog_ConstCast(*args)

def QCLog_Create(*args):
  """
    Create() -> QCLog
    QCLog_Create(std::string const & publicID) -> QCLog
    """
  return _DataModel.QCLog_Create(*args)

def QCLog_Find(*args):
  """QCLog_Find(std::string const & publicID) -> QCLog"""
  return _DataModel.QCLog_Find(*args)

class WaveformQualityIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::WaveformQualityIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformQualityIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformQualityIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::WaveformQualityIndex self) -> WaveformQualityIndex
        __init__(Seiscomp::DataModel::WaveformQualityIndex self, Time start, WaveformStreamID waveformID, std::string const & type, std::string const & parameter) -> WaveformQualityIndex
        __init__(Seiscomp::DataModel::WaveformQualityIndex self, WaveformQualityIndex arg2) -> WaveformQualityIndex
        """
        this = _DataModel.new_WaveformQualityIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(WaveformQualityIndex self, WaveformQualityIndex arg2) -> bool"""
        return _DataModel.WaveformQualityIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(WaveformQualityIndex self, WaveformQualityIndex arg2) -> bool"""
        return _DataModel.WaveformQualityIndex___ne__(self, *args)

    __swig_setmethods__["start"] = _DataModel.WaveformQualityIndex_start_set
    __swig_getmethods__["start"] = _DataModel.WaveformQualityIndex_start_get
    if _newclass:start = _swig_property(_DataModel.WaveformQualityIndex_start_get, _DataModel.WaveformQualityIndex_start_set)
    __swig_setmethods__["waveformID"] = _DataModel.WaveformQualityIndex_waveformID_set
    __swig_getmethods__["waveformID"] = _DataModel.WaveformQualityIndex_waveformID_get
    if _newclass:waveformID = _swig_property(_DataModel.WaveformQualityIndex_waveformID_get, _DataModel.WaveformQualityIndex_waveformID_set)
    __swig_setmethods__["type"] = _DataModel.WaveformQualityIndex_type_set
    __swig_getmethods__["type"] = _DataModel.WaveformQualityIndex_type_get
    if _newclass:type = _swig_property(_DataModel.WaveformQualityIndex_type_get, _DataModel.WaveformQualityIndex_type_set)
    __swig_setmethods__["parameter"] = _DataModel.WaveformQualityIndex_parameter_set
    __swig_getmethods__["parameter"] = _DataModel.WaveformQualityIndex_parameter_get
    if _newclass:parameter = _swig_property(_DataModel.WaveformQualityIndex_parameter_get, _DataModel.WaveformQualityIndex_parameter_set)
    __swig_destroy__ = _DataModel.delete_WaveformQualityIndex
    __del__ = lambda self : None;
WaveformQualityIndex_swigregister = _DataModel.WaveformQualityIndex_swigregister
WaveformQualityIndex_swigregister(WaveformQualityIndex)

class WaveformQuality(Object):
    """Proxy of C++ Seiscomp::DataModel::WaveformQuality class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformQuality, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformQuality, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.WaveformQuality_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.WaveformQuality_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(WaveformQuality self) -> char const *"""
        return _DataModel.WaveformQuality_className(self)

    def typeInfo(self):
        """typeInfo(WaveformQuality self) -> RTTI"""
        return _DataModel.WaveformQuality_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> WaveformQuality
        Cast(Seiscomp::Core::BaseObjectPtr o) -> WaveformQuality
        """
        return _DataModel.WaveformQuality_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> WaveformQuality
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> WaveformQuality
        """
        return _DataModel.WaveformQuality_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(WaveformQuality self, GenericArchive ar)"""
        return _DataModel.WaveformQuality_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::WaveformQuality self) -> WaveformQuality
        __init__(Seiscomp::DataModel::WaveformQuality self, WaveformQuality other) -> WaveformQuality
        """
        this = _DataModel.new_WaveformQuality(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_WaveformQuality
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(WaveformQuality self, WaveformQuality other) -> bool"""
        return _DataModel.WaveformQuality___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(WaveformQuality self, WaveformQuality other) -> bool"""
        return _DataModel.WaveformQuality___ne__(self, *args)

    def equal(self, *args):
        """equal(WaveformQuality self, WaveformQuality other) -> bool"""
        return _DataModel.WaveformQuality_equal(self, *args)

    def setWaveformID(self, *args):
        """setWaveformID(WaveformQuality self, WaveformStreamID waveformID)"""
        return _DataModel.WaveformQuality_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(WaveformQuality self) -> WaveformStreamID
        waveformID(WaveformQuality self) -> WaveformStreamID
        """
        return _DataModel.WaveformQuality_waveformID(self, *args)

    def setCreatorID(self, *args):
        """setCreatorID(WaveformQuality self, std::string const & creatorID)"""
        return _DataModel.WaveformQuality_setCreatorID(self, *args)

    def creatorID(self):
        """creatorID(WaveformQuality self) -> std::string const &"""
        return _DataModel.WaveformQuality_creatorID(self)

    def setCreated(self, *args):
        """setCreated(WaveformQuality self, Time created)"""
        return _DataModel.WaveformQuality_setCreated(self, *args)

    def created(self):
        """created(WaveformQuality self) -> Time"""
        return _DataModel.WaveformQuality_created(self)

    def setStart(self, *args):
        """setStart(WaveformQuality self, Time start)"""
        return _DataModel.WaveformQuality_setStart(self, *args)

    def start(self):
        """start(WaveformQuality self) -> Time"""
        return _DataModel.WaveformQuality_start(self)

    def setEnd(self, *args):
        """setEnd(WaveformQuality self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.WaveformQuality_setEnd(self, *args)

    def end(self):
        """end(WaveformQuality self) -> Time"""
        return _DataModel.WaveformQuality_end(self)

    def setType(self, *args):
        """setType(WaveformQuality self, std::string const & type)"""
        return _DataModel.WaveformQuality_setType(self, *args)

    def type(self):
        """type(WaveformQuality self) -> std::string const &"""
        return _DataModel.WaveformQuality_type(self)

    def setParameter(self, *args):
        """setParameter(WaveformQuality self, std::string const & parameter)"""
        return _DataModel.WaveformQuality_setParameter(self, *args)

    def parameter(self):
        """parameter(WaveformQuality self) -> std::string const &"""
        return _DataModel.WaveformQuality_parameter(self)

    def setValue(self, *args):
        """setValue(WaveformQuality self, double value)"""
        return _DataModel.WaveformQuality_setValue(self, *args)

    def value(self):
        """value(WaveformQuality self) -> double"""
        return _DataModel.WaveformQuality_value(self)

    def setLowerUncertainty(self, *args):
        """setLowerUncertainty(WaveformQuality self, Seiscomp::Core::Optional< double >::Impl const & lowerUncertainty)"""
        return _DataModel.WaveformQuality_setLowerUncertainty(self, *args)

    def lowerUncertainty(self):
        """lowerUncertainty(WaveformQuality self) -> double"""
        return _DataModel.WaveformQuality_lowerUncertainty(self)

    def setUpperUncertainty(self, *args):
        """setUpperUncertainty(WaveformQuality self, Seiscomp::Core::Optional< double >::Impl const & upperUncertainty)"""
        return _DataModel.WaveformQuality_setUpperUncertainty(self, *args)

    def upperUncertainty(self):
        """upperUncertainty(WaveformQuality self) -> double"""
        return _DataModel.WaveformQuality_upperUncertainty(self)

    def setWindowLength(self, *args):
        """setWindowLength(WaveformQuality self, Seiscomp::Core::Optional< double >::Impl const & windowLength)"""
        return _DataModel.WaveformQuality_setWindowLength(self, *args)

    def windowLength(self):
        """windowLength(WaveformQuality self) -> double"""
        return _DataModel.WaveformQuality_windowLength(self)

    def index(self):
        """index(WaveformQuality self) -> WaveformQualityIndex"""
        return _DataModel.WaveformQuality_index(self)

    def equalIndex(self, *args):
        """equalIndex(WaveformQuality self, WaveformQuality lhs) -> bool"""
        return _DataModel.WaveformQuality_equalIndex(self, *args)

    def qualityControl(self):
        """qualityControl(WaveformQuality self) -> QualityControl"""
        return _DataModel.WaveformQuality_qualityControl(self)

    def assign(self, *args):
        """assign(WaveformQuality self, Object other) -> bool"""
        return _DataModel.WaveformQuality_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(WaveformQuality self, PublicObject parent) -> bool"""
        return _DataModel.WaveformQuality_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(WaveformQuality self, PublicObject parent) -> bool"""
        return _DataModel.WaveformQuality_detachFrom(self, *args)

    def detach(self):
        """detach(WaveformQuality self) -> bool"""
        return _DataModel.WaveformQuality_detach(self)

    def clone(self):
        """clone(WaveformQuality self) -> Object"""
        return _DataModel.WaveformQuality_clone(self)

    def accept(self, *args):
        """accept(WaveformQuality self, Visitor arg2)"""
        return _DataModel.WaveformQuality_accept(self, *args)

WaveformQuality_swigregister = _DataModel.WaveformQuality_swigregister
WaveformQuality_swigregister(WaveformQuality)

def WaveformQuality_ClassName():
  """WaveformQuality_ClassName() -> char const *"""
  return _DataModel.WaveformQuality_ClassName()

def WaveformQuality_TypeInfo():
  """WaveformQuality_TypeInfo() -> RTTI"""
  return _DataModel.WaveformQuality_TypeInfo()

def WaveformQuality_Cast(*args):
  """
    Cast(BaseObject o) -> WaveformQuality
    WaveformQuality_Cast(Seiscomp::Core::BaseObjectPtr o) -> WaveformQuality
    """
  return _DataModel.WaveformQuality_Cast(*args)

def WaveformQuality_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> WaveformQuality
    WaveformQuality_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> WaveformQuality
    """
  return _DataModel.WaveformQuality_ConstCast(*args)

class OutageIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::OutageIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutageIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutageIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::OutageIndex self) -> OutageIndex
        __init__(Seiscomp::DataModel::OutageIndex self, WaveformStreamID waveformID, Time start) -> OutageIndex
        __init__(Seiscomp::DataModel::OutageIndex self, OutageIndex arg2) -> OutageIndex
        """
        this = _DataModel.new_OutageIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(OutageIndex self, OutageIndex arg2) -> bool"""
        return _DataModel.OutageIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(OutageIndex self, OutageIndex arg2) -> bool"""
        return _DataModel.OutageIndex___ne__(self, *args)

    __swig_setmethods__["waveformID"] = _DataModel.OutageIndex_waveformID_set
    __swig_getmethods__["waveformID"] = _DataModel.OutageIndex_waveformID_get
    if _newclass:waveformID = _swig_property(_DataModel.OutageIndex_waveformID_get, _DataModel.OutageIndex_waveformID_set)
    __swig_setmethods__["start"] = _DataModel.OutageIndex_start_set
    __swig_getmethods__["start"] = _DataModel.OutageIndex_start_get
    if _newclass:start = _swig_property(_DataModel.OutageIndex_start_get, _DataModel.OutageIndex_start_set)
    __swig_destroy__ = _DataModel.delete_OutageIndex
    __del__ = lambda self : None;
OutageIndex_swigregister = _DataModel.OutageIndex_swigregister
OutageIndex_swigregister(OutageIndex)

class Outage(Object):
    """Proxy of C++ Seiscomp::DataModel::Outage class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Outage, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Outage, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Outage_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Outage_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Outage self) -> char const *"""
        return _DataModel.Outage_className(self)

    def typeInfo(self):
        """typeInfo(Outage self) -> RTTI"""
        return _DataModel.Outage_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Outage
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Outage
        """
        return _DataModel.Outage_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Outage
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Outage
        """
        return _DataModel.Outage_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Outage self, GenericArchive ar)"""
        return _DataModel.Outage_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Outage self) -> Outage
        __init__(Seiscomp::DataModel::Outage self, Outage other) -> Outage
        """
        this = _DataModel.new_Outage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Outage
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Outage self, Outage other) -> bool"""
        return _DataModel.Outage___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Outage self, Outage other) -> bool"""
        return _DataModel.Outage___ne__(self, *args)

    def equal(self, *args):
        """equal(Outage self, Outage other) -> bool"""
        return _DataModel.Outage_equal(self, *args)

    def setWaveformID(self, *args):
        """setWaveformID(Outage self, WaveformStreamID waveformID)"""
        return _DataModel.Outage_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(Outage self) -> WaveformStreamID
        waveformID(Outage self) -> WaveformStreamID
        """
        return _DataModel.Outage_waveformID(self, *args)

    def setCreatorID(self, *args):
        """setCreatorID(Outage self, std::string const & creatorID)"""
        return _DataModel.Outage_setCreatorID(self, *args)

    def creatorID(self):
        """creatorID(Outage self) -> std::string const &"""
        return _DataModel.Outage_creatorID(self)

    def setCreated(self, *args):
        """setCreated(Outage self, Time created)"""
        return _DataModel.Outage_setCreated(self, *args)

    def created(self):
        """created(Outage self) -> Time"""
        return _DataModel.Outage_created(self)

    def setStart(self, *args):
        """setStart(Outage self, Time start)"""
        return _DataModel.Outage_setStart(self, *args)

    def start(self):
        """start(Outage self) -> Time"""
        return _DataModel.Outage_start(self)

    def setEnd(self, *args):
        """setEnd(Outage self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.Outage_setEnd(self, *args)

    def end(self):
        """end(Outage self) -> Time"""
        return _DataModel.Outage_end(self)

    def index(self):
        """index(Outage self) -> OutageIndex"""
        return _DataModel.Outage_index(self)

    def equalIndex(self, *args):
        """equalIndex(Outage self, Outage lhs) -> bool"""
        return _DataModel.Outage_equalIndex(self, *args)

    def qualityControl(self):
        """qualityControl(Outage self) -> QualityControl"""
        return _DataModel.Outage_qualityControl(self)

    def assign(self, *args):
        """assign(Outage self, Object other) -> bool"""
        return _DataModel.Outage_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Outage self, PublicObject parent) -> bool"""
        return _DataModel.Outage_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Outage self, PublicObject parent) -> bool"""
        return _DataModel.Outage_detachFrom(self, *args)

    def detach(self):
        """detach(Outage self) -> bool"""
        return _DataModel.Outage_detach(self)

    def clone(self):
        """clone(Outage self) -> Object"""
        return _DataModel.Outage_clone(self)

    def accept(self, *args):
        """accept(Outage self, Visitor arg2)"""
        return _DataModel.Outage_accept(self, *args)

Outage_swigregister = _DataModel.Outage_swigregister
Outage_swigregister(Outage)

def Outage_ClassName():
  """Outage_ClassName() -> char const *"""
  return _DataModel.Outage_ClassName()

def Outage_TypeInfo():
  """Outage_TypeInfo() -> RTTI"""
  return _DataModel.Outage_TypeInfo()

def Outage_Cast(*args):
  """
    Cast(BaseObject o) -> Outage
    Outage_Cast(Seiscomp::Core::BaseObjectPtr o) -> Outage
    """
  return _DataModel.Outage_Cast(*args)

def Outage_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Outage
    Outage_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Outage
    """
  return _DataModel.Outage_ConstCast(*args)

class QualityControl(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::QualityControl class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualityControl, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QualityControl, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.QualityControl_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.QualityControl_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(QualityControl self) -> char const *"""
        return _DataModel.QualityControl_className(self)

    def typeInfo(self):
        """typeInfo(QualityControl self) -> RTTI"""
        return _DataModel.QualityControl_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> QualityControl
        Cast(Seiscomp::Core::BaseObjectPtr o) -> QualityControl
        """
        return _DataModel.QualityControl_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> QualityControl
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> QualityControl
        """
        return _DataModel.QualityControl_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(QualityControl self, GenericArchive ar)"""
        return _DataModel.QualityControl_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::QualityControl self) -> QualityControl
        __init__(Seiscomp::DataModel::QualityControl self, QualityControl other) -> QualityControl
        """
        this = _DataModel.new_QualityControl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_QualityControl
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(QualityControl self, QualityControl other) -> bool"""
        return _DataModel.QualityControl___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(QualityControl self, QualityControl other) -> bool"""
        return _DataModel.QualityControl___ne__(self, *args)

    def equal(self, *args):
        """equal(QualityControl self, QualityControl other) -> bool"""
        return _DataModel.QualityControl_equal(self, *args)

    def add(self, *args):
        """
        add(QualityControl self, QCLog obj) -> bool
        add(QualityControl self, WaveformQuality obj) -> bool
        add(QualityControl self, Outage obj) -> bool
        """
        return _DataModel.QualityControl_add(self, *args)

    def remove(self, *args):
        """
        remove(QualityControl self, QCLog obj) -> bool
        remove(QualityControl self, WaveformQuality obj) -> bool
        remove(QualityControl self, Outage obj) -> bool
        """
        return _DataModel.QualityControl_remove(self, *args)

    def removeQCLog(self, *args):
        """
        removeQCLog(QualityControl self, size_t i) -> bool
        removeQCLog(QualityControl self, QCLogIndex i) -> bool
        """
        return _DataModel.QualityControl_removeQCLog(self, *args)

    def removeWaveformQuality(self, *args):
        """
        removeWaveformQuality(QualityControl self, size_t i) -> bool
        removeWaveformQuality(QualityControl self, WaveformQualityIndex i) -> bool
        """
        return _DataModel.QualityControl_removeWaveformQuality(self, *args)

    def removeOutage(self, *args):
        """
        removeOutage(QualityControl self, size_t i) -> bool
        removeOutage(QualityControl self, OutageIndex i) -> bool
        """
        return _DataModel.QualityControl_removeOutage(self, *args)

    def qCLogCount(self):
        """qCLogCount(QualityControl self) -> size_t"""
        return _DataModel.QualityControl_qCLogCount(self)

    def waveformQualityCount(self):
        """waveformQualityCount(QualityControl self) -> size_t"""
        return _DataModel.QualityControl_waveformQualityCount(self)

    def outageCount(self):
        """outageCount(QualityControl self) -> size_t"""
        return _DataModel.QualityControl_outageCount(self)

    def qCLog(self, *args):
        """
        qCLog(QualityControl self, size_t i) -> QCLog
        qCLog(QualityControl self, QCLogIndex i) -> QCLog
        """
        return _DataModel.QualityControl_qCLog(self, *args)

    def waveformQuality(self, *args):
        """
        waveformQuality(QualityControl self, size_t i) -> WaveformQuality
        waveformQuality(QualityControl self, WaveformQualityIndex i) -> WaveformQuality
        """
        return _DataModel.QualityControl_waveformQuality(self, *args)

    def outage(self, *args):
        """
        outage(QualityControl self, size_t i) -> Outage
        outage(QualityControl self, OutageIndex i) -> Outage
        """
        return _DataModel.QualityControl_outage(self, *args)

    def findQCLog(self, *args):
        """findQCLog(QualityControl self, std::string const & publicID) -> QCLog"""
        return _DataModel.QualityControl_findQCLog(self, *args)

    def assign(self, *args):
        """assign(QualityControl self, Object other) -> bool"""
        return _DataModel.QualityControl_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(QualityControl self, PublicObject parent) -> bool"""
        return _DataModel.QualityControl_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(QualityControl self, PublicObject parent) -> bool"""
        return _DataModel.QualityControl_detachFrom(self, *args)

    def detach(self):
        """detach(QualityControl self) -> bool"""
        return _DataModel.QualityControl_detach(self)

    def clone(self):
        """clone(QualityControl self) -> Object"""
        return _DataModel.QualityControl_clone(self)

    def updateChild(self, *args):
        """updateChild(QualityControl self, Object child) -> bool"""
        return _DataModel.QualityControl_updateChild(self, *args)

    def accept(self, *args):
        """accept(QualityControl self, Visitor arg2)"""
        return _DataModel.QualityControl_accept(self, *args)

QualityControl_swigregister = _DataModel.QualityControl_swigregister
QualityControl_swigregister(QualityControl)

def QualityControl_ClassName():
  """QualityControl_ClassName() -> char const *"""
  return _DataModel.QualityControl_ClassName()

def QualityControl_TypeInfo():
  """QualityControl_TypeInfo() -> RTTI"""
  return _DataModel.QualityControl_TypeInfo()

def QualityControl_Cast(*args):
  """
    Cast(BaseObject o) -> QualityControl
    QualityControl_Cast(Seiscomp::Core::BaseObjectPtr o) -> QualityControl
    """
  return _DataModel.QualityControl_Cast(*args)

def QualityControl_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> QualityControl
    QualityControl_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> QualityControl
    """
  return _DataModel.QualityControl_ConstCast(*args)

class StationReferenceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::StationReferenceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationReferenceIndex self) -> StationReferenceIndex
        __init__(Seiscomp::DataModel::StationReferenceIndex self, std::string const & stationID) -> StationReferenceIndex
        __init__(Seiscomp::DataModel::StationReferenceIndex self, StationReferenceIndex arg2) -> StationReferenceIndex
        """
        this = _DataModel.new_StationReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(StationReferenceIndex self, StationReferenceIndex arg2) -> bool"""
        return _DataModel.StationReferenceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationReferenceIndex self, StationReferenceIndex arg2) -> bool"""
        return _DataModel.StationReferenceIndex___ne__(self, *args)

    __swig_setmethods__["stationID"] = _DataModel.StationReferenceIndex_stationID_set
    __swig_getmethods__["stationID"] = _DataModel.StationReferenceIndex_stationID_get
    if _newclass:stationID = _swig_property(_DataModel.StationReferenceIndex_stationID_get, _DataModel.StationReferenceIndex_stationID_set)
    __swig_destroy__ = _DataModel.delete_StationReferenceIndex
    __del__ = lambda self : None;
StationReferenceIndex_swigregister = _DataModel.StationReferenceIndex_swigregister
StationReferenceIndex_swigregister(StationReferenceIndex)

class StationReference(Object):
    """Proxy of C++ Seiscomp::DataModel::StationReference class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationReference, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.StationReference_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.StationReference_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(StationReference self) -> char const *"""
        return _DataModel.StationReference_className(self)

    def typeInfo(self):
        """typeInfo(StationReference self) -> RTTI"""
        return _DataModel.StationReference_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> StationReference
        Cast(Seiscomp::Core::BaseObjectPtr o) -> StationReference
        """
        return _DataModel.StationReference_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> StationReference
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationReference
        """
        return _DataModel.StationReference_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(StationReference self, GenericArchive ar)"""
        return _DataModel.StationReference_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationReference self) -> StationReference
        __init__(Seiscomp::DataModel::StationReference self, StationReference other) -> StationReference
        __init__(Seiscomp::DataModel::StationReference self, std::string const & stationID) -> StationReference
        """
        this = _DataModel.new_StationReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationReference
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(StationReference self, StationReference other) -> bool"""
        return _DataModel.StationReference___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationReference self, StationReference other) -> bool"""
        return _DataModel.StationReference___ne__(self, *args)

    def equal(self, *args):
        """equal(StationReference self, StationReference other) -> bool"""
        return _DataModel.StationReference_equal(self, *args)

    def setStationID(self, *args):
        """setStationID(StationReference self, std::string const & stationID)"""
        return _DataModel.StationReference_setStationID(self, *args)

    def stationID(self):
        """stationID(StationReference self) -> std::string const &"""
        return _DataModel.StationReference_stationID(self)

    def index(self):
        """index(StationReference self) -> StationReferenceIndex"""
        return _DataModel.StationReference_index(self)

    def equalIndex(self, *args):
        """equalIndex(StationReference self, StationReference lhs) -> bool"""
        return _DataModel.StationReference_equalIndex(self, *args)

    def stationGroup(self):
        """stationGroup(StationReference self) -> StationGroup"""
        return _DataModel.StationReference_stationGroup(self)

    def assign(self, *args):
        """assign(StationReference self, Object other) -> bool"""
        return _DataModel.StationReference_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(StationReference self, PublicObject parent) -> bool"""
        return _DataModel.StationReference_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(StationReference self, PublicObject parent) -> bool"""
        return _DataModel.StationReference_detachFrom(self, *args)

    def detach(self):
        """detach(StationReference self) -> bool"""
        return _DataModel.StationReference_detach(self)

    def clone(self):
        """clone(StationReference self) -> Object"""
        return _DataModel.StationReference_clone(self)

    def accept(self, *args):
        """accept(StationReference self, Visitor arg2)"""
        return _DataModel.StationReference_accept(self, *args)

StationReference_swigregister = _DataModel.StationReference_swigregister
StationReference_swigregister(StationReference)

def StationReference_ClassName():
  """StationReference_ClassName() -> char const *"""
  return _DataModel.StationReference_ClassName()

def StationReference_TypeInfo():
  """StationReference_TypeInfo() -> RTTI"""
  return _DataModel.StationReference_TypeInfo()

def StationReference_Cast(*args):
  """
    Cast(BaseObject o) -> StationReference
    StationReference_Cast(Seiscomp::Core::BaseObjectPtr o) -> StationReference
    """
  return _DataModel.StationReference_Cast(*args)

def StationReference_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> StationReference
    StationReference_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationReference
    """
  return _DataModel.StationReference_ConstCast(*args)

class StationGroupIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::StationGroupIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationGroupIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationGroupIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationGroupIndex self) -> StationGroupIndex
        __init__(Seiscomp::DataModel::StationGroupIndex self, std::string const & code) -> StationGroupIndex
        __init__(Seiscomp::DataModel::StationGroupIndex self, StationGroupIndex arg2) -> StationGroupIndex
        """
        this = _DataModel.new_StationGroupIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(StationGroupIndex self, StationGroupIndex arg2) -> bool"""
        return _DataModel.StationGroupIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationGroupIndex self, StationGroupIndex arg2) -> bool"""
        return _DataModel.StationGroupIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.StationGroupIndex_code_set
    __swig_getmethods__["code"] = _DataModel.StationGroupIndex_code_get
    if _newclass:code = _swig_property(_DataModel.StationGroupIndex_code_get, _DataModel.StationGroupIndex_code_set)
    __swig_destroy__ = _DataModel.delete_StationGroupIndex
    __del__ = lambda self : None;
StationGroupIndex_swigregister = _DataModel.StationGroupIndex_swigregister
StationGroupIndex_swigregister(StationGroupIndex)

class StationGroup(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::StationGroup class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationGroup, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.StationGroup_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.StationGroup_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(StationGroup self) -> char const *"""
        return _DataModel.StationGroup_className(self)

    def typeInfo(self):
        """typeInfo(StationGroup self) -> RTTI"""
        return _DataModel.StationGroup_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> StationGroup
        Cast(Seiscomp::Core::BaseObjectPtr o) -> StationGroup
        """
        return _DataModel.StationGroup_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> StationGroup
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationGroup
        """
        return _DataModel.StationGroup_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(StationGroup self, GenericArchive ar)"""
        return _DataModel.StationGroup_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationGroup self, StationGroup other) -> StationGroup
        __init__(Seiscomp::DataModel::StationGroup self, std::string const & publicID) -> StationGroup
        """
        this = _DataModel.new_StationGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationGroup
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> StationGroup
        Create(std::string const & publicID) -> StationGroup
        """
        return _DataModel.StationGroup_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> StationGroup"""
        return _DataModel.StationGroup_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(StationGroup self, StationGroup other) -> bool"""
        return _DataModel.StationGroup___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationGroup self, StationGroup other) -> bool"""
        return _DataModel.StationGroup___ne__(self, *args)

    def equal(self, *args):
        """equal(StationGroup self, StationGroup other) -> bool"""
        return _DataModel.StationGroup_equal(self, *args)

    def setType(self, *args):
        """setType(StationGroup self, Seiscomp::Core::Optional< Seiscomp::DataModel::StationGroupType >::Impl const & type)"""
        return _DataModel.StationGroup_setType(self, *args)

    def type(self):
        """type(StationGroup self) -> Seiscomp::DataModel::StationGroupType"""
        return _DataModel.StationGroup_type(self)

    def setCode(self, *args):
        """setCode(StationGroup self, std::string const & code)"""
        return _DataModel.StationGroup_setCode(self, *args)

    def code(self):
        """code(StationGroup self) -> std::string const &"""
        return _DataModel.StationGroup_code(self)

    def setStart(self, *args):
        """setStart(StationGroup self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & start)"""
        return _DataModel.StationGroup_setStart(self, *args)

    def start(self):
        """start(StationGroup self) -> Time"""
        return _DataModel.StationGroup_start(self)

    def setEnd(self, *args):
        """setEnd(StationGroup self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.StationGroup_setEnd(self, *args)

    def end(self):
        """end(StationGroup self) -> Time"""
        return _DataModel.StationGroup_end(self)

    def setDescription(self, *args):
        """setDescription(StationGroup self, std::string const & description)"""
        return _DataModel.StationGroup_setDescription(self, *args)

    def description(self):
        """description(StationGroup self) -> std::string const &"""
        return _DataModel.StationGroup_description(self)

    def setLatitude(self, *args):
        """setLatitude(StationGroup self, Seiscomp::Core::Optional< double >::Impl const & latitude)"""
        return _DataModel.StationGroup_setLatitude(self, *args)

    def latitude(self):
        """latitude(StationGroup self) -> double"""
        return _DataModel.StationGroup_latitude(self)

    def setLongitude(self, *args):
        """setLongitude(StationGroup self, Seiscomp::Core::Optional< double >::Impl const & longitude)"""
        return _DataModel.StationGroup_setLongitude(self, *args)

    def longitude(self):
        """longitude(StationGroup self) -> double"""
        return _DataModel.StationGroup_longitude(self)

    def setElevation(self, *args):
        """setElevation(StationGroup self, Seiscomp::Core::Optional< double >::Impl const & elevation)"""
        return _DataModel.StationGroup_setElevation(self, *args)

    def elevation(self):
        """elevation(StationGroup self) -> double"""
        return _DataModel.StationGroup_elevation(self)

    def index(self):
        """index(StationGroup self) -> StationGroupIndex"""
        return _DataModel.StationGroup_index(self)

    def equalIndex(self, *args):
        """equalIndex(StationGroup self, StationGroup lhs) -> bool"""
        return _DataModel.StationGroup_equalIndex(self, *args)

    def add(self, *args):
        """add(StationGroup self, StationReference obj) -> bool"""
        return _DataModel.StationGroup_add(self, *args)

    def remove(self, *args):
        """remove(StationGroup self, StationReference obj) -> bool"""
        return _DataModel.StationGroup_remove(self, *args)

    def removeStationReference(self, *args):
        """
        removeStationReference(StationGroup self, size_t i) -> bool
        removeStationReference(StationGroup self, StationReferenceIndex i) -> bool
        """
        return _DataModel.StationGroup_removeStationReference(self, *args)

    def stationReferenceCount(self):
        """stationReferenceCount(StationGroup self) -> size_t"""
        return _DataModel.StationGroup_stationReferenceCount(self)

    def stationReference(self, *args):
        """
        stationReference(StationGroup self, size_t i) -> StationReference
        stationReference(StationGroup self, StationReferenceIndex i) -> StationReference
        """
        return _DataModel.StationGroup_stationReference(self, *args)

    def inventory(self):
        """inventory(StationGroup self) -> Inventory"""
        return _DataModel.StationGroup_inventory(self)

    def assign(self, *args):
        """assign(StationGroup self, Object other) -> bool"""
        return _DataModel.StationGroup_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(StationGroup self, PublicObject parent) -> bool"""
        return _DataModel.StationGroup_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(StationGroup self, PublicObject parent) -> bool"""
        return _DataModel.StationGroup_detachFrom(self, *args)

    def detach(self):
        """detach(StationGroup self) -> bool"""
        return _DataModel.StationGroup_detach(self)

    def clone(self):
        """clone(StationGroup self) -> Object"""
        return _DataModel.StationGroup_clone(self)

    def updateChild(self, *args):
        """updateChild(StationGroup self, Object child) -> bool"""
        return _DataModel.StationGroup_updateChild(self, *args)

    def accept(self, *args):
        """accept(StationGroup self, Visitor arg2)"""
        return _DataModel.StationGroup_accept(self, *args)

StationGroup_swigregister = _DataModel.StationGroup_swigregister
StationGroup_swigregister(StationGroup)

def StationGroup_ClassName():
  """StationGroup_ClassName() -> char const *"""
  return _DataModel.StationGroup_ClassName()

def StationGroup_TypeInfo():
  """StationGroup_TypeInfo() -> RTTI"""
  return _DataModel.StationGroup_TypeInfo()

def StationGroup_Cast(*args):
  """
    Cast(BaseObject o) -> StationGroup
    StationGroup_Cast(Seiscomp::Core::BaseObjectPtr o) -> StationGroup
    """
  return _DataModel.StationGroup_Cast(*args)

def StationGroup_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> StationGroup
    StationGroup_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationGroup
    """
  return _DataModel.StationGroup_ConstCast(*args)

def StationGroup_Create(*args):
  """
    Create() -> StationGroup
    StationGroup_Create(std::string const & publicID) -> StationGroup
    """
  return _DataModel.StationGroup_Create(*args)

def StationGroup_Find(*args):
  """StationGroup_Find(std::string const & publicID) -> StationGroup"""
  return _DataModel.StationGroup_Find(*args)

class AuxSourceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::AuxSourceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxSourceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuxSourceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AuxSourceIndex self) -> AuxSourceIndex
        __init__(Seiscomp::DataModel::AuxSourceIndex self, std::string const & name) -> AuxSourceIndex
        __init__(Seiscomp::DataModel::AuxSourceIndex self, AuxSourceIndex arg2) -> AuxSourceIndex
        """
        this = _DataModel.new_AuxSourceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(AuxSourceIndex self, AuxSourceIndex arg2) -> bool"""
        return _DataModel.AuxSourceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AuxSourceIndex self, AuxSourceIndex arg2) -> bool"""
        return _DataModel.AuxSourceIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.AuxSourceIndex_name_set
    __swig_getmethods__["name"] = _DataModel.AuxSourceIndex_name_get
    if _newclass:name = _swig_property(_DataModel.AuxSourceIndex_name_get, _DataModel.AuxSourceIndex_name_set)
    __swig_destroy__ = _DataModel.delete_AuxSourceIndex
    __del__ = lambda self : None;
AuxSourceIndex_swigregister = _DataModel.AuxSourceIndex_swigregister
AuxSourceIndex_swigregister(AuxSourceIndex)

class AuxSource(Object):
    """Proxy of C++ Seiscomp::DataModel::AuxSource class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuxSource, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.AuxSource_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.AuxSource_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(AuxSource self) -> char const *"""
        return _DataModel.AuxSource_className(self)

    def typeInfo(self):
        """typeInfo(AuxSource self) -> RTTI"""
        return _DataModel.AuxSource_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> AuxSource
        Cast(Seiscomp::Core::BaseObjectPtr o) -> AuxSource
        """
        return _DataModel.AuxSource_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> AuxSource
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AuxSource
        """
        return _DataModel.AuxSource_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(AuxSource self, GenericArchive ar)"""
        return _DataModel.AuxSource_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AuxSource self) -> AuxSource
        __init__(Seiscomp::DataModel::AuxSource self, AuxSource other) -> AuxSource
        __init__(Seiscomp::DataModel::AuxSource self, std::string const & name) -> AuxSource
        __init__(Seiscomp::DataModel::AuxSource self, std::string const & name, std::string const & description, std::string const & unit, 
            std::string const & conversion, Seiscomp::Core::Optional< int >::Impl const & sampleRateNumerator, 
            Seiscomp::Core::Optional< int >::Impl const & sampleRateDenominator, 
            Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark) -> AuxSource
        """
        this = _DataModel.new_AuxSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AuxSource
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(AuxSource self, AuxSource other) -> bool"""
        return _DataModel.AuxSource___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AuxSource self, AuxSource other) -> bool"""
        return _DataModel.AuxSource___ne__(self, *args)

    def equal(self, *args):
        """equal(AuxSource self, AuxSource other) -> bool"""
        return _DataModel.AuxSource_equal(self, *args)

    def setName(self, *args):
        """setName(AuxSource self, std::string const & name)"""
        return _DataModel.AuxSource_setName(self, *args)

    def name(self):
        """name(AuxSource self) -> std::string const &"""
        return _DataModel.AuxSource_name(self)

    def setDescription(self, *args):
        """setDescription(AuxSource self, std::string const & description)"""
        return _DataModel.AuxSource_setDescription(self, *args)

    def description(self):
        """description(AuxSource self) -> std::string const &"""
        return _DataModel.AuxSource_description(self)

    def setUnit(self, *args):
        """setUnit(AuxSource self, std::string const & unit)"""
        return _DataModel.AuxSource_setUnit(self, *args)

    def unit(self):
        """unit(AuxSource self) -> std::string const &"""
        return _DataModel.AuxSource_unit(self)

    def setConversion(self, *args):
        """setConversion(AuxSource self, std::string const & conversion)"""
        return _DataModel.AuxSource_setConversion(self, *args)

    def conversion(self):
        """conversion(AuxSource self) -> std::string const &"""
        return _DataModel.AuxSource_conversion(self)

    def setSampleRateNumerator(self, *args):
        """setSampleRateNumerator(AuxSource self, Seiscomp::Core::Optional< int >::Impl const & sampleRateNumerator)"""
        return _DataModel.AuxSource_setSampleRateNumerator(self, *args)

    def sampleRateNumerator(self):
        """sampleRateNumerator(AuxSource self) -> int"""
        return _DataModel.AuxSource_sampleRateNumerator(self)

    def setSampleRateDenominator(self, *args):
        """setSampleRateDenominator(AuxSource self, Seiscomp::Core::Optional< int >::Impl const & sampleRateDenominator)"""
        return _DataModel.AuxSource_setSampleRateDenominator(self, *args)

    def sampleRateDenominator(self):
        """sampleRateDenominator(AuxSource self) -> int"""
        return _DataModel.AuxSource_sampleRateDenominator(self)

    def setRemark(self, *args):
        """setRemark(AuxSource self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.AuxSource_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(AuxSource self) -> Blob
        remark(AuxSource self) -> Blob
        """
        return _DataModel.AuxSource_remark(self, *args)

    def index(self):
        """index(AuxSource self) -> AuxSourceIndex"""
        return _DataModel.AuxSource_index(self)

    def equalIndex(self, *args):
        """equalIndex(AuxSource self, AuxSource lhs) -> bool"""
        return _DataModel.AuxSource_equalIndex(self, *args)

    def auxDevice(self):
        """auxDevice(AuxSource self) -> AuxDevice"""
        return _DataModel.AuxSource_auxDevice(self)

    def assign(self, *args):
        """assign(AuxSource self, Object other) -> bool"""
        return _DataModel.AuxSource_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(AuxSource self, PublicObject parent) -> bool"""
        return _DataModel.AuxSource_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(AuxSource self, PublicObject parent) -> bool"""
        return _DataModel.AuxSource_detachFrom(self, *args)

    def detach(self):
        """detach(AuxSource self) -> bool"""
        return _DataModel.AuxSource_detach(self)

    def clone(self):
        """clone(AuxSource self) -> Object"""
        return _DataModel.AuxSource_clone(self)

    def accept(self, *args):
        """accept(AuxSource self, Visitor arg2)"""
        return _DataModel.AuxSource_accept(self, *args)

AuxSource_swigregister = _DataModel.AuxSource_swigregister
AuxSource_swigregister(AuxSource)

def AuxSource_ClassName():
  """AuxSource_ClassName() -> char const *"""
  return _DataModel.AuxSource_ClassName()

def AuxSource_TypeInfo():
  """AuxSource_TypeInfo() -> RTTI"""
  return _DataModel.AuxSource_TypeInfo()

def AuxSource_Cast(*args):
  """
    Cast(BaseObject o) -> AuxSource
    AuxSource_Cast(Seiscomp::Core::BaseObjectPtr o) -> AuxSource
    """
  return _DataModel.AuxSource_Cast(*args)

def AuxSource_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> AuxSource
    AuxSource_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AuxSource
    """
  return _DataModel.AuxSource_ConstCast(*args)

class AuxDeviceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::AuxDeviceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxDeviceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuxDeviceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AuxDeviceIndex self) -> AuxDeviceIndex
        __init__(Seiscomp::DataModel::AuxDeviceIndex self, std::string const & name) -> AuxDeviceIndex
        __init__(Seiscomp::DataModel::AuxDeviceIndex self, AuxDeviceIndex arg2) -> AuxDeviceIndex
        """
        this = _DataModel.new_AuxDeviceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(AuxDeviceIndex self, AuxDeviceIndex arg2) -> bool"""
        return _DataModel.AuxDeviceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AuxDeviceIndex self, AuxDeviceIndex arg2) -> bool"""
        return _DataModel.AuxDeviceIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.AuxDeviceIndex_name_set
    __swig_getmethods__["name"] = _DataModel.AuxDeviceIndex_name_get
    if _newclass:name = _swig_property(_DataModel.AuxDeviceIndex_name_get, _DataModel.AuxDeviceIndex_name_set)
    __swig_destroy__ = _DataModel.delete_AuxDeviceIndex
    __del__ = lambda self : None;
AuxDeviceIndex_swigregister = _DataModel.AuxDeviceIndex_swigregister
AuxDeviceIndex_swigregister(AuxDeviceIndex)

class AuxDevice(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::AuxDevice class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuxDevice, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.AuxDevice_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.AuxDevice_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(AuxDevice self) -> char const *"""
        return _DataModel.AuxDevice_className(self)

    def typeInfo(self):
        """typeInfo(AuxDevice self) -> RTTI"""
        return _DataModel.AuxDevice_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> AuxDevice
        Cast(Seiscomp::Core::BaseObjectPtr o) -> AuxDevice
        """
        return _DataModel.AuxDevice_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> AuxDevice
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AuxDevice
        """
        return _DataModel.AuxDevice_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(AuxDevice self, GenericArchive ar)"""
        return _DataModel.AuxDevice_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AuxDevice self, AuxDevice other) -> AuxDevice
        __init__(Seiscomp::DataModel::AuxDevice self, std::string const & publicID) -> AuxDevice
        """
        this = _DataModel.new_AuxDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AuxDevice
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> AuxDevice
        Create(std::string const & publicID) -> AuxDevice
        """
        return _DataModel.AuxDevice_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> AuxDevice"""
        return _DataModel.AuxDevice_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(AuxDevice self, AuxDevice other) -> bool"""
        return _DataModel.AuxDevice___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AuxDevice self, AuxDevice other) -> bool"""
        return _DataModel.AuxDevice___ne__(self, *args)

    def equal(self, *args):
        """equal(AuxDevice self, AuxDevice other) -> bool"""
        return _DataModel.AuxDevice_equal(self, *args)

    def setName(self, *args):
        """setName(AuxDevice self, std::string const & name)"""
        return _DataModel.AuxDevice_setName(self, *args)

    def name(self):
        """name(AuxDevice self) -> std::string const &"""
        return _DataModel.AuxDevice_name(self)

    def setDescription(self, *args):
        """setDescription(AuxDevice self, std::string const & description)"""
        return _DataModel.AuxDevice_setDescription(self, *args)

    def description(self):
        """description(AuxDevice self) -> std::string const &"""
        return _DataModel.AuxDevice_description(self)

    def setModel(self, *args):
        """setModel(AuxDevice self, std::string const & model)"""
        return _DataModel.AuxDevice_setModel(self, *args)

    def model(self):
        """model(AuxDevice self) -> std::string const &"""
        return _DataModel.AuxDevice_model(self)

    def setManufacturer(self, *args):
        """setManufacturer(AuxDevice self, std::string const & manufacturer)"""
        return _DataModel.AuxDevice_setManufacturer(self, *args)

    def manufacturer(self):
        """manufacturer(AuxDevice self) -> std::string const &"""
        return _DataModel.AuxDevice_manufacturer(self)

    def setRemark(self, *args):
        """setRemark(AuxDevice self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.AuxDevice_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(AuxDevice self) -> Blob
        remark(AuxDevice self) -> Blob
        """
        return _DataModel.AuxDevice_remark(self, *args)

    def index(self):
        """index(AuxDevice self) -> AuxDeviceIndex"""
        return _DataModel.AuxDevice_index(self)

    def equalIndex(self, *args):
        """equalIndex(AuxDevice self, AuxDevice lhs) -> bool"""
        return _DataModel.AuxDevice_equalIndex(self, *args)

    def add(self, *args):
        """add(AuxDevice self, AuxSource obj) -> bool"""
        return _DataModel.AuxDevice_add(self, *args)

    def remove(self, *args):
        """remove(AuxDevice self, AuxSource obj) -> bool"""
        return _DataModel.AuxDevice_remove(self, *args)

    def removeAuxSource(self, *args):
        """
        removeAuxSource(AuxDevice self, size_t i) -> bool
        removeAuxSource(AuxDevice self, AuxSourceIndex i) -> bool
        """
        return _DataModel.AuxDevice_removeAuxSource(self, *args)

    def auxSourceCount(self):
        """auxSourceCount(AuxDevice self) -> size_t"""
        return _DataModel.AuxDevice_auxSourceCount(self)

    def auxSource(self, *args):
        """
        auxSource(AuxDevice self, size_t i) -> AuxSource
        auxSource(AuxDevice self, AuxSourceIndex i) -> AuxSource
        """
        return _DataModel.AuxDevice_auxSource(self, *args)

    def inventory(self):
        """inventory(AuxDevice self) -> Inventory"""
        return _DataModel.AuxDevice_inventory(self)

    def assign(self, *args):
        """assign(AuxDevice self, Object other) -> bool"""
        return _DataModel.AuxDevice_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(AuxDevice self, PublicObject parent) -> bool"""
        return _DataModel.AuxDevice_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(AuxDevice self, PublicObject parent) -> bool"""
        return _DataModel.AuxDevice_detachFrom(self, *args)

    def detach(self):
        """detach(AuxDevice self) -> bool"""
        return _DataModel.AuxDevice_detach(self)

    def clone(self):
        """clone(AuxDevice self) -> Object"""
        return _DataModel.AuxDevice_clone(self)

    def updateChild(self, *args):
        """updateChild(AuxDevice self, Object child) -> bool"""
        return _DataModel.AuxDevice_updateChild(self, *args)

    def accept(self, *args):
        """accept(AuxDevice self, Visitor arg2)"""
        return _DataModel.AuxDevice_accept(self, *args)

AuxDevice_swigregister = _DataModel.AuxDevice_swigregister
AuxDevice_swigregister(AuxDevice)

def AuxDevice_ClassName():
  """AuxDevice_ClassName() -> char const *"""
  return _DataModel.AuxDevice_ClassName()

def AuxDevice_TypeInfo():
  """AuxDevice_TypeInfo() -> RTTI"""
  return _DataModel.AuxDevice_TypeInfo()

def AuxDevice_Cast(*args):
  """
    Cast(BaseObject o) -> AuxDevice
    AuxDevice_Cast(Seiscomp::Core::BaseObjectPtr o) -> AuxDevice
    """
  return _DataModel.AuxDevice_Cast(*args)

def AuxDevice_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> AuxDevice
    AuxDevice_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AuxDevice
    """
  return _DataModel.AuxDevice_ConstCast(*args)

def AuxDevice_Create(*args):
  """
    Create() -> AuxDevice
    AuxDevice_Create(std::string const & publicID) -> AuxDevice
    """
  return _DataModel.AuxDevice_Create(*args)

def AuxDevice_Find(*args):
  """AuxDevice_Find(std::string const & publicID) -> AuxDevice"""
  return _DataModel.AuxDevice_Find(*args)

class SensorCalibrationIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::SensorCalibrationIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorCalibrationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorCalibrationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SensorCalibrationIndex self) -> SensorCalibrationIndex
        __init__(Seiscomp::DataModel::SensorCalibrationIndex self, std::string const & serialNumber, int channel, Time start) -> SensorCalibrationIndex
        __init__(Seiscomp::DataModel::SensorCalibrationIndex self, SensorCalibrationIndex arg2) -> SensorCalibrationIndex
        """
        this = _DataModel.new_SensorCalibrationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(SensorCalibrationIndex self, SensorCalibrationIndex arg2) -> bool"""
        return _DataModel.SensorCalibrationIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SensorCalibrationIndex self, SensorCalibrationIndex arg2) -> bool"""
        return _DataModel.SensorCalibrationIndex___ne__(self, *args)

    __swig_setmethods__["serialNumber"] = _DataModel.SensorCalibrationIndex_serialNumber_set
    __swig_getmethods__["serialNumber"] = _DataModel.SensorCalibrationIndex_serialNumber_get
    if _newclass:serialNumber = _swig_property(_DataModel.SensorCalibrationIndex_serialNumber_get, _DataModel.SensorCalibrationIndex_serialNumber_set)
    __swig_setmethods__["channel"] = _DataModel.SensorCalibrationIndex_channel_set
    __swig_getmethods__["channel"] = _DataModel.SensorCalibrationIndex_channel_get
    if _newclass:channel = _swig_property(_DataModel.SensorCalibrationIndex_channel_get, _DataModel.SensorCalibrationIndex_channel_set)
    __swig_setmethods__["start"] = _DataModel.SensorCalibrationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.SensorCalibrationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.SensorCalibrationIndex_start_get, _DataModel.SensorCalibrationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_SensorCalibrationIndex
    __del__ = lambda self : None;
SensorCalibrationIndex_swigregister = _DataModel.SensorCalibrationIndex_swigregister
SensorCalibrationIndex_swigregister(SensorCalibrationIndex)

class SensorCalibration(Object):
    """Proxy of C++ Seiscomp::DataModel::SensorCalibration class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorCalibration, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SensorCalibration, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.SensorCalibration_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.SensorCalibration_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(SensorCalibration self) -> char const *"""
        return _DataModel.SensorCalibration_className(self)

    def typeInfo(self):
        """typeInfo(SensorCalibration self) -> RTTI"""
        return _DataModel.SensorCalibration_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> SensorCalibration
        Cast(Seiscomp::Core::BaseObjectPtr o) -> SensorCalibration
        """
        return _DataModel.SensorCalibration_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> SensorCalibration
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SensorCalibration
        """
        return _DataModel.SensorCalibration_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(SensorCalibration self, GenericArchive ar)"""
        return _DataModel.SensorCalibration_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SensorCalibration self) -> SensorCalibration
        __init__(Seiscomp::DataModel::SensorCalibration self, SensorCalibration other) -> SensorCalibration
        """
        this = _DataModel.new_SensorCalibration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_SensorCalibration
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(SensorCalibration self, SensorCalibration other) -> bool"""
        return _DataModel.SensorCalibration___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SensorCalibration self, SensorCalibration other) -> bool"""
        return _DataModel.SensorCalibration___ne__(self, *args)

    def equal(self, *args):
        """equal(SensorCalibration self, SensorCalibration other) -> bool"""
        return _DataModel.SensorCalibration_equal(self, *args)

    def setSerialNumber(self, *args):
        """setSerialNumber(SensorCalibration self, std::string const & serialNumber)"""
        return _DataModel.SensorCalibration_setSerialNumber(self, *args)

    def serialNumber(self):
        """serialNumber(SensorCalibration self) -> std::string const &"""
        return _DataModel.SensorCalibration_serialNumber(self)

    def setChannel(self, *args):
        """setChannel(SensorCalibration self, int channel)"""
        return _DataModel.SensorCalibration_setChannel(self, *args)

    def channel(self):
        """channel(SensorCalibration self) -> int"""
        return _DataModel.SensorCalibration_channel(self)

    def setStart(self, *args):
        """setStart(SensorCalibration self, Time start)"""
        return _DataModel.SensorCalibration_setStart(self, *args)

    def start(self):
        """start(SensorCalibration self) -> Time"""
        return _DataModel.SensorCalibration_start(self)

    def setEnd(self, *args):
        """setEnd(SensorCalibration self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.SensorCalibration_setEnd(self, *args)

    def end(self):
        """end(SensorCalibration self) -> Time"""
        return _DataModel.SensorCalibration_end(self)

    def setGain(self, *args):
        """setGain(SensorCalibration self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.SensorCalibration_setGain(self, *args)

    def gain(self):
        """gain(SensorCalibration self) -> double"""
        return _DataModel.SensorCalibration_gain(self)

    def setGainFrequency(self, *args):
        """setGainFrequency(SensorCalibration self, Seiscomp::Core::Optional< double >::Impl const & gainFrequency)"""
        return _DataModel.SensorCalibration_setGainFrequency(self, *args)

    def gainFrequency(self):
        """gainFrequency(SensorCalibration self) -> double"""
        return _DataModel.SensorCalibration_gainFrequency(self)

    def setRemark(self, *args):
        """setRemark(SensorCalibration self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.SensorCalibration_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(SensorCalibration self) -> Blob
        remark(SensorCalibration self) -> Blob
        """
        return _DataModel.SensorCalibration_remark(self, *args)

    def index(self):
        """index(SensorCalibration self) -> SensorCalibrationIndex"""
        return _DataModel.SensorCalibration_index(self)

    def equalIndex(self, *args):
        """equalIndex(SensorCalibration self, SensorCalibration lhs) -> bool"""
        return _DataModel.SensorCalibration_equalIndex(self, *args)

    def sensor(self):
        """sensor(SensorCalibration self) -> Sensor"""
        return _DataModel.SensorCalibration_sensor(self)

    def assign(self, *args):
        """assign(SensorCalibration self, Object other) -> bool"""
        return _DataModel.SensorCalibration_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(SensorCalibration self, PublicObject parent) -> bool"""
        return _DataModel.SensorCalibration_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(SensorCalibration self, PublicObject parent) -> bool"""
        return _DataModel.SensorCalibration_detachFrom(self, *args)

    def detach(self):
        """detach(SensorCalibration self) -> bool"""
        return _DataModel.SensorCalibration_detach(self)

    def clone(self):
        """clone(SensorCalibration self) -> Object"""
        return _DataModel.SensorCalibration_clone(self)

    def accept(self, *args):
        """accept(SensorCalibration self, Visitor arg2)"""
        return _DataModel.SensorCalibration_accept(self, *args)

SensorCalibration_swigregister = _DataModel.SensorCalibration_swigregister
SensorCalibration_swigregister(SensorCalibration)

def SensorCalibration_ClassName():
  """SensorCalibration_ClassName() -> char const *"""
  return _DataModel.SensorCalibration_ClassName()

def SensorCalibration_TypeInfo():
  """SensorCalibration_TypeInfo() -> RTTI"""
  return _DataModel.SensorCalibration_TypeInfo()

def SensorCalibration_Cast(*args):
  """
    Cast(BaseObject o) -> SensorCalibration
    SensorCalibration_Cast(Seiscomp::Core::BaseObjectPtr o) -> SensorCalibration
    """
  return _DataModel.SensorCalibration_Cast(*args)

def SensorCalibration_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> SensorCalibration
    SensorCalibration_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SensorCalibration
    """
  return _DataModel.SensorCalibration_ConstCast(*args)

class SensorIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::SensorIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SensorIndex self) -> SensorIndex
        __init__(Seiscomp::DataModel::SensorIndex self, std::string const & name) -> SensorIndex
        __init__(Seiscomp::DataModel::SensorIndex self, SensorIndex arg2) -> SensorIndex
        """
        this = _DataModel.new_SensorIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(SensorIndex self, SensorIndex arg2) -> bool"""
        return _DataModel.SensorIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SensorIndex self, SensorIndex arg2) -> bool"""
        return _DataModel.SensorIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.SensorIndex_name_set
    __swig_getmethods__["name"] = _DataModel.SensorIndex_name_get
    if _newclass:name = _swig_property(_DataModel.SensorIndex_name_get, _DataModel.SensorIndex_name_set)
    __swig_destroy__ = _DataModel.delete_SensorIndex
    __del__ = lambda self : None;
SensorIndex_swigregister = _DataModel.SensorIndex_swigregister
SensorIndex_swigregister(SensorIndex)

class Sensor(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Sensor class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sensor, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sensor, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Sensor_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Sensor_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Sensor self) -> char const *"""
        return _DataModel.Sensor_className(self)

    def typeInfo(self):
        """typeInfo(Sensor self) -> RTTI"""
        return _DataModel.Sensor_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Sensor
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Sensor
        """
        return _DataModel.Sensor_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Sensor
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Sensor
        """
        return _DataModel.Sensor_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Sensor self, GenericArchive ar)"""
        return _DataModel.Sensor_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Sensor self, Sensor other) -> Sensor
        __init__(Seiscomp::DataModel::Sensor self, std::string const & publicID) -> Sensor
        """
        this = _DataModel.new_Sensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Sensor
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Sensor
        Create(std::string const & publicID) -> Sensor
        """
        return _DataModel.Sensor_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Sensor"""
        return _DataModel.Sensor_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Sensor self, Sensor other) -> bool"""
        return _DataModel.Sensor___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Sensor self, Sensor other) -> bool"""
        return _DataModel.Sensor___ne__(self, *args)

    def equal(self, *args):
        """equal(Sensor self, Sensor other) -> bool"""
        return _DataModel.Sensor_equal(self, *args)

    def setName(self, *args):
        """setName(Sensor self, std::string const & name)"""
        return _DataModel.Sensor_setName(self, *args)

    def name(self):
        """name(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_name(self)

    def setDescription(self, *args):
        """setDescription(Sensor self, std::string const & description)"""
        return _DataModel.Sensor_setDescription(self, *args)

    def description(self):
        """description(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_description(self)

    def setModel(self, *args):
        """setModel(Sensor self, std::string const & model)"""
        return _DataModel.Sensor_setModel(self, *args)

    def model(self):
        """model(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_model(self)

    def setManufacturer(self, *args):
        """setManufacturer(Sensor self, std::string const & manufacturer)"""
        return _DataModel.Sensor_setManufacturer(self, *args)

    def manufacturer(self):
        """manufacturer(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_manufacturer(self)

    def setType(self, *args):
        """setType(Sensor self, std::string const & type)"""
        return _DataModel.Sensor_setType(self, *args)

    def type(self):
        """type(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_type(self)

    def setUnit(self, *args):
        """setUnit(Sensor self, std::string const & unit)"""
        return _DataModel.Sensor_setUnit(self, *args)

    def unit(self):
        """unit(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_unit(self)

    def setLowFrequency(self, *args):
        """setLowFrequency(Sensor self, Seiscomp::Core::Optional< double >::Impl const & lowFrequency)"""
        return _DataModel.Sensor_setLowFrequency(self, *args)

    def lowFrequency(self):
        """lowFrequency(Sensor self) -> double"""
        return _DataModel.Sensor_lowFrequency(self)

    def setHighFrequency(self, *args):
        """setHighFrequency(Sensor self, Seiscomp::Core::Optional< double >::Impl const & highFrequency)"""
        return _DataModel.Sensor_setHighFrequency(self, *args)

    def highFrequency(self):
        """highFrequency(Sensor self) -> double"""
        return _DataModel.Sensor_highFrequency(self)

    def setResponse(self, *args):
        """setResponse(Sensor self, std::string const & response)"""
        return _DataModel.Sensor_setResponse(self, *args)

    def response(self):
        """response(Sensor self) -> std::string const &"""
        return _DataModel.Sensor_response(self)

    def setRemark(self, *args):
        """setRemark(Sensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.Sensor_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(Sensor self) -> Blob
        remark(Sensor self) -> Blob
        """
        return _DataModel.Sensor_remark(self, *args)

    def index(self):
        """index(Sensor self) -> SensorIndex"""
        return _DataModel.Sensor_index(self)

    def equalIndex(self, *args):
        """equalIndex(Sensor self, Sensor lhs) -> bool"""
        return _DataModel.Sensor_equalIndex(self, *args)

    def add(self, *args):
        """add(Sensor self, SensorCalibration obj) -> bool"""
        return _DataModel.Sensor_add(self, *args)

    def remove(self, *args):
        """remove(Sensor self, SensorCalibration obj) -> bool"""
        return _DataModel.Sensor_remove(self, *args)

    def removeSensorCalibration(self, *args):
        """
        removeSensorCalibration(Sensor self, size_t i) -> bool
        removeSensorCalibration(Sensor self, SensorCalibrationIndex i) -> bool
        """
        return _DataModel.Sensor_removeSensorCalibration(self, *args)

    def sensorCalibrationCount(self):
        """sensorCalibrationCount(Sensor self) -> size_t"""
        return _DataModel.Sensor_sensorCalibrationCount(self)

    def sensorCalibration(self, *args):
        """
        sensorCalibration(Sensor self, size_t i) -> SensorCalibration
        sensorCalibration(Sensor self, SensorCalibrationIndex i) -> SensorCalibration
        """
        return _DataModel.Sensor_sensorCalibration(self, *args)

    def inventory(self):
        """inventory(Sensor self) -> Inventory"""
        return _DataModel.Sensor_inventory(self)

    def assign(self, *args):
        """assign(Sensor self, Object other) -> bool"""
        return _DataModel.Sensor_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Sensor self, PublicObject parent) -> bool"""
        return _DataModel.Sensor_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Sensor self, PublicObject parent) -> bool"""
        return _DataModel.Sensor_detachFrom(self, *args)

    def detach(self):
        """detach(Sensor self) -> bool"""
        return _DataModel.Sensor_detach(self)

    def clone(self):
        """clone(Sensor self) -> Object"""
        return _DataModel.Sensor_clone(self)

    def updateChild(self, *args):
        """updateChild(Sensor self, Object child) -> bool"""
        return _DataModel.Sensor_updateChild(self, *args)

    def accept(self, *args):
        """accept(Sensor self, Visitor arg2)"""
        return _DataModel.Sensor_accept(self, *args)

Sensor_swigregister = _DataModel.Sensor_swigregister
Sensor_swigregister(Sensor)

def Sensor_ClassName():
  """Sensor_ClassName() -> char const *"""
  return _DataModel.Sensor_ClassName()

def Sensor_TypeInfo():
  """Sensor_TypeInfo() -> RTTI"""
  return _DataModel.Sensor_TypeInfo()

def Sensor_Cast(*args):
  """
    Cast(BaseObject o) -> Sensor
    Sensor_Cast(Seiscomp::Core::BaseObjectPtr o) -> Sensor
    """
  return _DataModel.Sensor_Cast(*args)

def Sensor_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Sensor
    Sensor_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Sensor
    """
  return _DataModel.Sensor_ConstCast(*args)

def Sensor_Create(*args):
  """
    Create() -> Sensor
    Sensor_Create(std::string const & publicID) -> Sensor
    """
  return _DataModel.Sensor_Create(*args)

def Sensor_Find(*args):
  """Sensor_Find(std::string const & publicID) -> Sensor"""
  return _DataModel.Sensor_Find(*args)

class ResponsePAZIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ResponsePAZIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePAZIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePAZIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponsePAZIndex self) -> ResponsePAZIndex
        __init__(Seiscomp::DataModel::ResponsePAZIndex self, std::string const & name) -> ResponsePAZIndex
        __init__(Seiscomp::DataModel::ResponsePAZIndex self, ResponsePAZIndex arg2) -> ResponsePAZIndex
        """
        this = _DataModel.new_ResponsePAZIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ResponsePAZIndex self, ResponsePAZIndex arg2) -> bool"""
        return _DataModel.ResponsePAZIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponsePAZIndex self, ResponsePAZIndex arg2) -> bool"""
        return _DataModel.ResponsePAZIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.ResponsePAZIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponsePAZIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponsePAZIndex_name_get, _DataModel.ResponsePAZIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponsePAZIndex
    __del__ = lambda self : None;
ResponsePAZIndex_swigregister = _DataModel.ResponsePAZIndex_swigregister
ResponsePAZIndex_swigregister(ResponsePAZIndex)

class ResponsePAZ(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ResponsePAZ class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePAZ, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePAZ, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ResponsePAZ_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ResponsePAZ_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ResponsePAZ self) -> char const *"""
        return _DataModel.ResponsePAZ_className(self)

    def typeInfo(self):
        """typeInfo(ResponsePAZ self) -> RTTI"""
        return _DataModel.ResponsePAZ_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ResponsePAZ
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponsePAZ
        """
        return _DataModel.ResponsePAZ_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ResponsePAZ
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponsePAZ
        """
        return _DataModel.ResponsePAZ_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ResponsePAZ self, GenericArchive ar)"""
        return _DataModel.ResponsePAZ_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponsePAZ self, ResponsePAZ other) -> ResponsePAZ
        __init__(Seiscomp::DataModel::ResponsePAZ self, std::string const & publicID) -> ResponsePAZ
        """
        this = _DataModel.new_ResponsePAZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponsePAZ
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ResponsePAZ
        Create(std::string const & publicID) -> ResponsePAZ
        """
        return _DataModel.ResponsePAZ_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ResponsePAZ"""
        return _DataModel.ResponsePAZ_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ResponsePAZ self, ResponsePAZ other) -> bool"""
        return _DataModel.ResponsePAZ___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponsePAZ self, ResponsePAZ other) -> bool"""
        return _DataModel.ResponsePAZ___ne__(self, *args)

    def equal(self, *args):
        """equal(ResponsePAZ self, ResponsePAZ other) -> bool"""
        return _DataModel.ResponsePAZ_equal(self, *args)

    def setName(self, *args):
        """setName(ResponsePAZ self, std::string const & name)"""
        return _DataModel.ResponsePAZ_setName(self, *args)

    def name(self):
        """name(ResponsePAZ self) -> std::string const &"""
        return _DataModel.ResponsePAZ_name(self)

    def setType(self, *args):
        """setType(ResponsePAZ self, std::string const & type)"""
        return _DataModel.ResponsePAZ_setType(self, *args)

    def type(self):
        """type(ResponsePAZ self) -> std::string const &"""
        return _DataModel.ResponsePAZ_type(self)

    def setGain(self, *args):
        """setGain(ResponsePAZ self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.ResponsePAZ_setGain(self, *args)

    def gain(self):
        """gain(ResponsePAZ self) -> double"""
        return _DataModel.ResponsePAZ_gain(self)

    def setGainFrequency(self, *args):
        """setGainFrequency(ResponsePAZ self, Seiscomp::Core::Optional< double >::Impl const & gainFrequency)"""
        return _DataModel.ResponsePAZ_setGainFrequency(self, *args)

    def gainFrequency(self):
        """gainFrequency(ResponsePAZ self) -> double"""
        return _DataModel.ResponsePAZ_gainFrequency(self)

    def setNormalizationFactor(self, *args):
        """setNormalizationFactor(ResponsePAZ self, Seiscomp::Core::Optional< double >::Impl const & normalizationFactor)"""
        return _DataModel.ResponsePAZ_setNormalizationFactor(self, *args)

    def normalizationFactor(self):
        """normalizationFactor(ResponsePAZ self) -> double"""
        return _DataModel.ResponsePAZ_normalizationFactor(self)

    def setNormalizationFrequency(self, *args):
        """setNormalizationFrequency(ResponsePAZ self, Seiscomp::Core::Optional< double >::Impl const & normalizationFrequency)"""
        return _DataModel.ResponsePAZ_setNormalizationFrequency(self, *args)

    def normalizationFrequency(self):
        """normalizationFrequency(ResponsePAZ self) -> double"""
        return _DataModel.ResponsePAZ_normalizationFrequency(self)

    def setNumberOfZeros(self, *args):
        """setNumberOfZeros(ResponsePAZ self, Seiscomp::Core::Optional< int >::Impl const & numberOfZeros)"""
        return _DataModel.ResponsePAZ_setNumberOfZeros(self, *args)

    def numberOfZeros(self):
        """numberOfZeros(ResponsePAZ self) -> int"""
        return _DataModel.ResponsePAZ_numberOfZeros(self)

    def setNumberOfPoles(self, *args):
        """setNumberOfPoles(ResponsePAZ self, Seiscomp::Core::Optional< int >::Impl const & numberOfPoles)"""
        return _DataModel.ResponsePAZ_setNumberOfPoles(self, *args)

    def numberOfPoles(self):
        """numberOfPoles(ResponsePAZ self) -> int"""
        return _DataModel.ResponsePAZ_numberOfPoles(self)

    def setZeros(self, *args):
        """setZeros(ResponsePAZ self, Seiscomp::Core::Optional< Seiscomp::DataModel::ComplexArray >::Impl const & zeros)"""
        return _DataModel.ResponsePAZ_setZeros(self, *args)

    def zeros(self, *args):
        """
        zeros(ResponsePAZ self) -> ComplexArray
        zeros(ResponsePAZ self) -> ComplexArray
        """
        return _DataModel.ResponsePAZ_zeros(self, *args)

    def setPoles(self, *args):
        """setPoles(ResponsePAZ self, Seiscomp::Core::Optional< Seiscomp::DataModel::ComplexArray >::Impl const & poles)"""
        return _DataModel.ResponsePAZ_setPoles(self, *args)

    def poles(self, *args):
        """
        poles(ResponsePAZ self) -> ComplexArray
        poles(ResponsePAZ self) -> ComplexArray
        """
        return _DataModel.ResponsePAZ_poles(self, *args)

    def setRemark(self, *args):
        """setRemark(ResponsePAZ self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.ResponsePAZ_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(ResponsePAZ self) -> Blob
        remark(ResponsePAZ self) -> Blob
        """
        return _DataModel.ResponsePAZ_remark(self, *args)

    def index(self):
        """index(ResponsePAZ self) -> ResponsePAZIndex"""
        return _DataModel.ResponsePAZ_index(self)

    def equalIndex(self, *args):
        """equalIndex(ResponsePAZ self, ResponsePAZ lhs) -> bool"""
        return _DataModel.ResponsePAZ_equalIndex(self, *args)

    def inventory(self):
        """inventory(ResponsePAZ self) -> Inventory"""
        return _DataModel.ResponsePAZ_inventory(self)

    def assign(self, *args):
        """assign(ResponsePAZ self, Object other) -> bool"""
        return _DataModel.ResponsePAZ_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ResponsePAZ self, PublicObject parent) -> bool"""
        return _DataModel.ResponsePAZ_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ResponsePAZ self, PublicObject parent) -> bool"""
        return _DataModel.ResponsePAZ_detachFrom(self, *args)

    def detach(self):
        """detach(ResponsePAZ self) -> bool"""
        return _DataModel.ResponsePAZ_detach(self)

    def clone(self):
        """clone(ResponsePAZ self) -> Object"""
        return _DataModel.ResponsePAZ_clone(self)

    def updateChild(self, *args):
        """updateChild(ResponsePAZ self, Object child) -> bool"""
        return _DataModel.ResponsePAZ_updateChild(self, *args)

    def accept(self, *args):
        """accept(ResponsePAZ self, Visitor arg2)"""
        return _DataModel.ResponsePAZ_accept(self, *args)

ResponsePAZ_swigregister = _DataModel.ResponsePAZ_swigregister
ResponsePAZ_swigregister(ResponsePAZ)

def ResponsePAZ_ClassName():
  """ResponsePAZ_ClassName() -> char const *"""
  return _DataModel.ResponsePAZ_ClassName()

def ResponsePAZ_TypeInfo():
  """ResponsePAZ_TypeInfo() -> RTTI"""
  return _DataModel.ResponsePAZ_TypeInfo()

def ResponsePAZ_Cast(*args):
  """
    Cast(BaseObject o) -> ResponsePAZ
    ResponsePAZ_Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponsePAZ
    """
  return _DataModel.ResponsePAZ_Cast(*args)

def ResponsePAZ_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ResponsePAZ
    ResponsePAZ_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponsePAZ
    """
  return _DataModel.ResponsePAZ_ConstCast(*args)

def ResponsePAZ_Create(*args):
  """
    Create() -> ResponsePAZ
    ResponsePAZ_Create(std::string const & publicID) -> ResponsePAZ
    """
  return _DataModel.ResponsePAZ_Create(*args)

def ResponsePAZ_Find(*args):
  """ResponsePAZ_Find(std::string const & publicID) -> ResponsePAZ"""
  return _DataModel.ResponsePAZ_Find(*args)

class ResponsePolynomialIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ResponsePolynomialIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePolynomialIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePolynomialIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponsePolynomialIndex self) -> ResponsePolynomialIndex
        __init__(Seiscomp::DataModel::ResponsePolynomialIndex self, std::string const & name) -> ResponsePolynomialIndex
        __init__(Seiscomp::DataModel::ResponsePolynomialIndex self, ResponsePolynomialIndex arg2) -> ResponsePolynomialIndex
        """
        this = _DataModel.new_ResponsePolynomialIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ResponsePolynomialIndex self, ResponsePolynomialIndex arg2) -> bool"""
        return _DataModel.ResponsePolynomialIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponsePolynomialIndex self, ResponsePolynomialIndex arg2) -> bool"""
        return _DataModel.ResponsePolynomialIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.ResponsePolynomialIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponsePolynomialIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponsePolynomialIndex_name_get, _DataModel.ResponsePolynomialIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponsePolynomialIndex
    __del__ = lambda self : None;
ResponsePolynomialIndex_swigregister = _DataModel.ResponsePolynomialIndex_swigregister
ResponsePolynomialIndex_swigregister(ResponsePolynomialIndex)

class ResponsePolynomial(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ResponsePolynomial class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponsePolynomial, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponsePolynomial, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ResponsePolynomial_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ResponsePolynomial_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ResponsePolynomial self) -> char const *"""
        return _DataModel.ResponsePolynomial_className(self)

    def typeInfo(self):
        """typeInfo(ResponsePolynomial self) -> RTTI"""
        return _DataModel.ResponsePolynomial_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ResponsePolynomial
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponsePolynomial
        """
        return _DataModel.ResponsePolynomial_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ResponsePolynomial
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponsePolynomial
        """
        return _DataModel.ResponsePolynomial_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ResponsePolynomial self, GenericArchive ar)"""
        return _DataModel.ResponsePolynomial_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponsePolynomial self, ResponsePolynomial other) -> ResponsePolynomial
        __init__(Seiscomp::DataModel::ResponsePolynomial self, std::string const & publicID) -> ResponsePolynomial
        """
        this = _DataModel.new_ResponsePolynomial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponsePolynomial
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ResponsePolynomial
        Create(std::string const & publicID) -> ResponsePolynomial
        """
        return _DataModel.ResponsePolynomial_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ResponsePolynomial"""
        return _DataModel.ResponsePolynomial_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ResponsePolynomial self, ResponsePolynomial other) -> bool"""
        return _DataModel.ResponsePolynomial___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponsePolynomial self, ResponsePolynomial other) -> bool"""
        return _DataModel.ResponsePolynomial___ne__(self, *args)

    def equal(self, *args):
        """equal(ResponsePolynomial self, ResponsePolynomial other) -> bool"""
        return _DataModel.ResponsePolynomial_equal(self, *args)

    def setName(self, *args):
        """setName(ResponsePolynomial self, std::string const & name)"""
        return _DataModel.ResponsePolynomial_setName(self, *args)

    def name(self):
        """name(ResponsePolynomial self) -> std::string const &"""
        return _DataModel.ResponsePolynomial_name(self)

    def setGain(self, *args):
        """setGain(ResponsePolynomial self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.ResponsePolynomial_setGain(self, *args)

    def gain(self):
        """gain(ResponsePolynomial self) -> double"""
        return _DataModel.ResponsePolynomial_gain(self)

    def setGainFrequency(self, *args):
        """setGainFrequency(ResponsePolynomial self, Seiscomp::Core::Optional< double >::Impl const & gainFrequency)"""
        return _DataModel.ResponsePolynomial_setGainFrequency(self, *args)

    def gainFrequency(self):
        """gainFrequency(ResponsePolynomial self) -> double"""
        return _DataModel.ResponsePolynomial_gainFrequency(self)

    def setFrequencyUnit(self, *args):
        """setFrequencyUnit(ResponsePolynomial self, std::string const & frequencyUnit)"""
        return _DataModel.ResponsePolynomial_setFrequencyUnit(self, *args)

    def frequencyUnit(self):
        """frequencyUnit(ResponsePolynomial self) -> std::string const &"""
        return _DataModel.ResponsePolynomial_frequencyUnit(self)

    def setApproximationType(self, *args):
        """setApproximationType(ResponsePolynomial self, std::string const & approximationType)"""
        return _DataModel.ResponsePolynomial_setApproximationType(self, *args)

    def approximationType(self):
        """approximationType(ResponsePolynomial self) -> std::string const &"""
        return _DataModel.ResponsePolynomial_approximationType(self)

    def setApproximationLowerBound(self, *args):
        """setApproximationLowerBound(ResponsePolynomial self, Seiscomp::Core::Optional< double >::Impl const & approximationLowerBound)"""
        return _DataModel.ResponsePolynomial_setApproximationLowerBound(self, *args)

    def approximationLowerBound(self):
        """approximationLowerBound(ResponsePolynomial self) -> double"""
        return _DataModel.ResponsePolynomial_approximationLowerBound(self)

    def setApproximationUpperBound(self, *args):
        """setApproximationUpperBound(ResponsePolynomial self, Seiscomp::Core::Optional< double >::Impl const & approximationUpperBound)"""
        return _DataModel.ResponsePolynomial_setApproximationUpperBound(self, *args)

    def approximationUpperBound(self):
        """approximationUpperBound(ResponsePolynomial self) -> double"""
        return _DataModel.ResponsePolynomial_approximationUpperBound(self)

    def setApproximationError(self, *args):
        """setApproximationError(ResponsePolynomial self, Seiscomp::Core::Optional< double >::Impl const & approximationError)"""
        return _DataModel.ResponsePolynomial_setApproximationError(self, *args)

    def approximationError(self):
        """approximationError(ResponsePolynomial self) -> double"""
        return _DataModel.ResponsePolynomial_approximationError(self)

    def setNumberOfCoefficients(self, *args):
        """setNumberOfCoefficients(ResponsePolynomial self, Seiscomp::Core::Optional< int >::Impl const & numberOfCoefficients)"""
        return _DataModel.ResponsePolynomial_setNumberOfCoefficients(self, *args)

    def numberOfCoefficients(self):
        """numberOfCoefficients(ResponsePolynomial self) -> int"""
        return _DataModel.ResponsePolynomial_numberOfCoefficients(self)

    def setCoefficients(self, *args):
        """setCoefficients(ResponsePolynomial self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealArray >::Impl const & coefficients)"""
        return _DataModel.ResponsePolynomial_setCoefficients(self, *args)

    def coefficients(self, *args):
        """
        coefficients(ResponsePolynomial self) -> RealArray
        coefficients(ResponsePolynomial self) -> RealArray
        """
        return _DataModel.ResponsePolynomial_coefficients(self, *args)

    def setRemark(self, *args):
        """setRemark(ResponsePolynomial self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.ResponsePolynomial_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(ResponsePolynomial self) -> Blob
        remark(ResponsePolynomial self) -> Blob
        """
        return _DataModel.ResponsePolynomial_remark(self, *args)

    def index(self):
        """index(ResponsePolynomial self) -> ResponsePolynomialIndex"""
        return _DataModel.ResponsePolynomial_index(self)

    def equalIndex(self, *args):
        """equalIndex(ResponsePolynomial self, ResponsePolynomial lhs) -> bool"""
        return _DataModel.ResponsePolynomial_equalIndex(self, *args)

    def inventory(self):
        """inventory(ResponsePolynomial self) -> Inventory"""
        return _DataModel.ResponsePolynomial_inventory(self)

    def assign(self, *args):
        """assign(ResponsePolynomial self, Object other) -> bool"""
        return _DataModel.ResponsePolynomial_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ResponsePolynomial self, PublicObject parent) -> bool"""
        return _DataModel.ResponsePolynomial_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ResponsePolynomial self, PublicObject parent) -> bool"""
        return _DataModel.ResponsePolynomial_detachFrom(self, *args)

    def detach(self):
        """detach(ResponsePolynomial self) -> bool"""
        return _DataModel.ResponsePolynomial_detach(self)

    def clone(self):
        """clone(ResponsePolynomial self) -> Object"""
        return _DataModel.ResponsePolynomial_clone(self)

    def updateChild(self, *args):
        """updateChild(ResponsePolynomial self, Object child) -> bool"""
        return _DataModel.ResponsePolynomial_updateChild(self, *args)

    def accept(self, *args):
        """accept(ResponsePolynomial self, Visitor arg2)"""
        return _DataModel.ResponsePolynomial_accept(self, *args)

ResponsePolynomial_swigregister = _DataModel.ResponsePolynomial_swigregister
ResponsePolynomial_swigregister(ResponsePolynomial)

def ResponsePolynomial_ClassName():
  """ResponsePolynomial_ClassName() -> char const *"""
  return _DataModel.ResponsePolynomial_ClassName()

def ResponsePolynomial_TypeInfo():
  """ResponsePolynomial_TypeInfo() -> RTTI"""
  return _DataModel.ResponsePolynomial_TypeInfo()

def ResponsePolynomial_Cast(*args):
  """
    Cast(BaseObject o) -> ResponsePolynomial
    ResponsePolynomial_Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponsePolynomial
    """
  return _DataModel.ResponsePolynomial_Cast(*args)

def ResponsePolynomial_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ResponsePolynomial
    ResponsePolynomial_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponsePolynomial
    """
  return _DataModel.ResponsePolynomial_ConstCast(*args)

def ResponsePolynomial_Create(*args):
  """
    Create() -> ResponsePolynomial
    ResponsePolynomial_Create(std::string const & publicID) -> ResponsePolynomial
    """
  return _DataModel.ResponsePolynomial_Create(*args)

def ResponsePolynomial_Find(*args):
  """ResponsePolynomial_Find(std::string const & publicID) -> ResponsePolynomial"""
  return _DataModel.ResponsePolynomial_Find(*args)

class ResponseFAPIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ResponseFAPIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseFAPIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseFAPIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponseFAPIndex self) -> ResponseFAPIndex
        __init__(Seiscomp::DataModel::ResponseFAPIndex self, std::string const & name) -> ResponseFAPIndex
        __init__(Seiscomp::DataModel::ResponseFAPIndex self, ResponseFAPIndex arg2) -> ResponseFAPIndex
        """
        this = _DataModel.new_ResponseFAPIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ResponseFAPIndex self, ResponseFAPIndex arg2) -> bool"""
        return _DataModel.ResponseFAPIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponseFAPIndex self, ResponseFAPIndex arg2) -> bool"""
        return _DataModel.ResponseFAPIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.ResponseFAPIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponseFAPIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponseFAPIndex_name_get, _DataModel.ResponseFAPIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponseFAPIndex
    __del__ = lambda self : None;
ResponseFAPIndex_swigregister = _DataModel.ResponseFAPIndex_swigregister
ResponseFAPIndex_swigregister(ResponseFAPIndex)

class ResponseFAP(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ResponseFAP class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseFAP, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseFAP, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ResponseFAP_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ResponseFAP_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ResponseFAP self) -> char const *"""
        return _DataModel.ResponseFAP_className(self)

    def typeInfo(self):
        """typeInfo(ResponseFAP self) -> RTTI"""
        return _DataModel.ResponseFAP_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ResponseFAP
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponseFAP
        """
        return _DataModel.ResponseFAP_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ResponseFAP
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponseFAP
        """
        return _DataModel.ResponseFAP_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ResponseFAP self, GenericArchive ar)"""
        return _DataModel.ResponseFAP_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponseFAP self, ResponseFAP other) -> ResponseFAP
        __init__(Seiscomp::DataModel::ResponseFAP self, std::string const & publicID) -> ResponseFAP
        """
        this = _DataModel.new_ResponseFAP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponseFAP
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ResponseFAP
        Create(std::string const & publicID) -> ResponseFAP
        """
        return _DataModel.ResponseFAP_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ResponseFAP"""
        return _DataModel.ResponseFAP_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ResponseFAP self, ResponseFAP other) -> bool"""
        return _DataModel.ResponseFAP___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponseFAP self, ResponseFAP other) -> bool"""
        return _DataModel.ResponseFAP___ne__(self, *args)

    def equal(self, *args):
        """equal(ResponseFAP self, ResponseFAP other) -> bool"""
        return _DataModel.ResponseFAP_equal(self, *args)

    def setName(self, *args):
        """setName(ResponseFAP self, std::string const & name)"""
        return _DataModel.ResponseFAP_setName(self, *args)

    def name(self):
        """name(ResponseFAP self) -> std::string const &"""
        return _DataModel.ResponseFAP_name(self)

    def setGain(self, *args):
        """setGain(ResponseFAP self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.ResponseFAP_setGain(self, *args)

    def gain(self):
        """gain(ResponseFAP self) -> double"""
        return _DataModel.ResponseFAP_gain(self)

    def setGainFrequency(self, *args):
        """setGainFrequency(ResponseFAP self, Seiscomp::Core::Optional< double >::Impl const & gainFrequency)"""
        return _DataModel.ResponseFAP_setGainFrequency(self, *args)

    def gainFrequency(self):
        """gainFrequency(ResponseFAP self) -> double"""
        return _DataModel.ResponseFAP_gainFrequency(self)

    def setNumberOfTuples(self, *args):
        """setNumberOfTuples(ResponseFAP self, Seiscomp::Core::Optional< int >::Impl const & numberOfTuples)"""
        return _DataModel.ResponseFAP_setNumberOfTuples(self, *args)

    def numberOfTuples(self):
        """numberOfTuples(ResponseFAP self) -> int"""
        return _DataModel.ResponseFAP_numberOfTuples(self)

    def setTuples(self, *args):
        """setTuples(ResponseFAP self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealArray >::Impl const & tuples)"""
        return _DataModel.ResponseFAP_setTuples(self, *args)

    def tuples(self, *args):
        """
        tuples(ResponseFAP self) -> RealArray
        tuples(ResponseFAP self) -> RealArray
        """
        return _DataModel.ResponseFAP_tuples(self, *args)

    def setRemark(self, *args):
        """setRemark(ResponseFAP self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.ResponseFAP_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(ResponseFAP self) -> Blob
        remark(ResponseFAP self) -> Blob
        """
        return _DataModel.ResponseFAP_remark(self, *args)

    def index(self):
        """index(ResponseFAP self) -> ResponseFAPIndex"""
        return _DataModel.ResponseFAP_index(self)

    def equalIndex(self, *args):
        """equalIndex(ResponseFAP self, ResponseFAP lhs) -> bool"""
        return _DataModel.ResponseFAP_equalIndex(self, *args)

    def inventory(self):
        """inventory(ResponseFAP self) -> Inventory"""
        return _DataModel.ResponseFAP_inventory(self)

    def assign(self, *args):
        """assign(ResponseFAP self, Object other) -> bool"""
        return _DataModel.ResponseFAP_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ResponseFAP self, PublicObject parent) -> bool"""
        return _DataModel.ResponseFAP_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ResponseFAP self, PublicObject parent) -> bool"""
        return _DataModel.ResponseFAP_detachFrom(self, *args)

    def detach(self):
        """detach(ResponseFAP self) -> bool"""
        return _DataModel.ResponseFAP_detach(self)

    def clone(self):
        """clone(ResponseFAP self) -> Object"""
        return _DataModel.ResponseFAP_clone(self)

    def updateChild(self, *args):
        """updateChild(ResponseFAP self, Object child) -> bool"""
        return _DataModel.ResponseFAP_updateChild(self, *args)

    def accept(self, *args):
        """accept(ResponseFAP self, Visitor arg2)"""
        return _DataModel.ResponseFAP_accept(self, *args)

ResponseFAP_swigregister = _DataModel.ResponseFAP_swigregister
ResponseFAP_swigregister(ResponseFAP)

def ResponseFAP_ClassName():
  """ResponseFAP_ClassName() -> char const *"""
  return _DataModel.ResponseFAP_ClassName()

def ResponseFAP_TypeInfo():
  """ResponseFAP_TypeInfo() -> RTTI"""
  return _DataModel.ResponseFAP_TypeInfo()

def ResponseFAP_Cast(*args):
  """
    Cast(BaseObject o) -> ResponseFAP
    ResponseFAP_Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponseFAP
    """
  return _DataModel.ResponseFAP_Cast(*args)

def ResponseFAP_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ResponseFAP
    ResponseFAP_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponseFAP
    """
  return _DataModel.ResponseFAP_ConstCast(*args)

def ResponseFAP_Create(*args):
  """
    Create() -> ResponseFAP
    ResponseFAP_Create(std::string const & publicID) -> ResponseFAP
    """
  return _DataModel.ResponseFAP_Create(*args)

def ResponseFAP_Find(*args):
  """ResponseFAP_Find(std::string const & publicID) -> ResponseFAP"""
  return _DataModel.ResponseFAP_Find(*args)

class DataloggerCalibrationIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::DataloggerCalibrationIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataloggerCalibrationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataloggerCalibrationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DataloggerCalibrationIndex self) -> DataloggerCalibrationIndex
        __init__(Seiscomp::DataModel::DataloggerCalibrationIndex self, std::string const & serialNumber, int channel, Time start) -> DataloggerCalibrationIndex
        __init__(Seiscomp::DataModel::DataloggerCalibrationIndex self, DataloggerCalibrationIndex arg2) -> DataloggerCalibrationIndex
        """
        this = _DataModel.new_DataloggerCalibrationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(DataloggerCalibrationIndex self, DataloggerCalibrationIndex arg2) -> bool"""
        return _DataModel.DataloggerCalibrationIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DataloggerCalibrationIndex self, DataloggerCalibrationIndex arg2) -> bool"""
        return _DataModel.DataloggerCalibrationIndex___ne__(self, *args)

    __swig_setmethods__["serialNumber"] = _DataModel.DataloggerCalibrationIndex_serialNumber_set
    __swig_getmethods__["serialNumber"] = _DataModel.DataloggerCalibrationIndex_serialNumber_get
    if _newclass:serialNumber = _swig_property(_DataModel.DataloggerCalibrationIndex_serialNumber_get, _DataModel.DataloggerCalibrationIndex_serialNumber_set)
    __swig_setmethods__["channel"] = _DataModel.DataloggerCalibrationIndex_channel_set
    __swig_getmethods__["channel"] = _DataModel.DataloggerCalibrationIndex_channel_get
    if _newclass:channel = _swig_property(_DataModel.DataloggerCalibrationIndex_channel_get, _DataModel.DataloggerCalibrationIndex_channel_set)
    __swig_setmethods__["start"] = _DataModel.DataloggerCalibrationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.DataloggerCalibrationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.DataloggerCalibrationIndex_start_get, _DataModel.DataloggerCalibrationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_DataloggerCalibrationIndex
    __del__ = lambda self : None;
DataloggerCalibrationIndex_swigregister = _DataModel.DataloggerCalibrationIndex_swigregister
DataloggerCalibrationIndex_swigregister(DataloggerCalibrationIndex)

class DataloggerCalibration(Object):
    """Proxy of C++ Seiscomp::DataModel::DataloggerCalibration class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataloggerCalibration, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataloggerCalibration, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.DataloggerCalibration_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.DataloggerCalibration_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(DataloggerCalibration self) -> char const *"""
        return _DataModel.DataloggerCalibration_className(self)

    def typeInfo(self):
        """typeInfo(DataloggerCalibration self) -> RTTI"""
        return _DataModel.DataloggerCalibration_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> DataloggerCalibration
        Cast(Seiscomp::Core::BaseObjectPtr o) -> DataloggerCalibration
        """
        return _DataModel.DataloggerCalibration_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> DataloggerCalibration
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> DataloggerCalibration
        """
        return _DataModel.DataloggerCalibration_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(DataloggerCalibration self, GenericArchive ar)"""
        return _DataModel.DataloggerCalibration_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DataloggerCalibration self) -> DataloggerCalibration
        __init__(Seiscomp::DataModel::DataloggerCalibration self, DataloggerCalibration other) -> DataloggerCalibration
        """
        this = _DataModel.new_DataloggerCalibration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DataloggerCalibration
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(DataloggerCalibration self, DataloggerCalibration other) -> bool"""
        return _DataModel.DataloggerCalibration___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DataloggerCalibration self, DataloggerCalibration other) -> bool"""
        return _DataModel.DataloggerCalibration___ne__(self, *args)

    def equal(self, *args):
        """equal(DataloggerCalibration self, DataloggerCalibration other) -> bool"""
        return _DataModel.DataloggerCalibration_equal(self, *args)

    def setSerialNumber(self, *args):
        """setSerialNumber(DataloggerCalibration self, std::string const & serialNumber)"""
        return _DataModel.DataloggerCalibration_setSerialNumber(self, *args)

    def serialNumber(self):
        """serialNumber(DataloggerCalibration self) -> std::string const &"""
        return _DataModel.DataloggerCalibration_serialNumber(self)

    def setChannel(self, *args):
        """setChannel(DataloggerCalibration self, int channel)"""
        return _DataModel.DataloggerCalibration_setChannel(self, *args)

    def channel(self):
        """channel(DataloggerCalibration self) -> int"""
        return _DataModel.DataloggerCalibration_channel(self)

    def setStart(self, *args):
        """setStart(DataloggerCalibration self, Time start)"""
        return _DataModel.DataloggerCalibration_setStart(self, *args)

    def start(self):
        """start(DataloggerCalibration self) -> Time"""
        return _DataModel.DataloggerCalibration_start(self)

    def setEnd(self, *args):
        """setEnd(DataloggerCalibration self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.DataloggerCalibration_setEnd(self, *args)

    def end(self):
        """end(DataloggerCalibration self) -> Time"""
        return _DataModel.DataloggerCalibration_end(self)

    def setGain(self, *args):
        """setGain(DataloggerCalibration self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.DataloggerCalibration_setGain(self, *args)

    def gain(self):
        """gain(DataloggerCalibration self) -> double"""
        return _DataModel.DataloggerCalibration_gain(self)

    def setGainFrequency(self, *args):
        """setGainFrequency(DataloggerCalibration self, Seiscomp::Core::Optional< double >::Impl const & gainFrequency)"""
        return _DataModel.DataloggerCalibration_setGainFrequency(self, *args)

    def gainFrequency(self):
        """gainFrequency(DataloggerCalibration self) -> double"""
        return _DataModel.DataloggerCalibration_gainFrequency(self)

    def setRemark(self, *args):
        """setRemark(DataloggerCalibration self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.DataloggerCalibration_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(DataloggerCalibration self) -> Blob
        remark(DataloggerCalibration self) -> Blob
        """
        return _DataModel.DataloggerCalibration_remark(self, *args)

    def index(self):
        """index(DataloggerCalibration self) -> DataloggerCalibrationIndex"""
        return _DataModel.DataloggerCalibration_index(self)

    def equalIndex(self, *args):
        """equalIndex(DataloggerCalibration self, DataloggerCalibration lhs) -> bool"""
        return _DataModel.DataloggerCalibration_equalIndex(self, *args)

    def datalogger(self):
        """datalogger(DataloggerCalibration self) -> Datalogger"""
        return _DataModel.DataloggerCalibration_datalogger(self)

    def assign(self, *args):
        """assign(DataloggerCalibration self, Object other) -> bool"""
        return _DataModel.DataloggerCalibration_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(DataloggerCalibration self, PublicObject parent) -> bool"""
        return _DataModel.DataloggerCalibration_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(DataloggerCalibration self, PublicObject parent) -> bool"""
        return _DataModel.DataloggerCalibration_detachFrom(self, *args)

    def detach(self):
        """detach(DataloggerCalibration self) -> bool"""
        return _DataModel.DataloggerCalibration_detach(self)

    def clone(self):
        """clone(DataloggerCalibration self) -> Object"""
        return _DataModel.DataloggerCalibration_clone(self)

    def accept(self, *args):
        """accept(DataloggerCalibration self, Visitor arg2)"""
        return _DataModel.DataloggerCalibration_accept(self, *args)

DataloggerCalibration_swigregister = _DataModel.DataloggerCalibration_swigregister
DataloggerCalibration_swigregister(DataloggerCalibration)

def DataloggerCalibration_ClassName():
  """DataloggerCalibration_ClassName() -> char const *"""
  return _DataModel.DataloggerCalibration_ClassName()

def DataloggerCalibration_TypeInfo():
  """DataloggerCalibration_TypeInfo() -> RTTI"""
  return _DataModel.DataloggerCalibration_TypeInfo()

def DataloggerCalibration_Cast(*args):
  """
    Cast(BaseObject o) -> DataloggerCalibration
    DataloggerCalibration_Cast(Seiscomp::Core::BaseObjectPtr o) -> DataloggerCalibration
    """
  return _DataModel.DataloggerCalibration_Cast(*args)

def DataloggerCalibration_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> DataloggerCalibration
    DataloggerCalibration_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> DataloggerCalibration
    """
  return _DataModel.DataloggerCalibration_ConstCast(*args)

class DecimationIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::DecimationIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecimationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecimationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DecimationIndex self) -> DecimationIndex
        __init__(Seiscomp::DataModel::DecimationIndex self, int sampleRateNumerator, int sampleRateDenominator) -> DecimationIndex
        __init__(Seiscomp::DataModel::DecimationIndex self, DecimationIndex arg2) -> DecimationIndex
        """
        this = _DataModel.new_DecimationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(DecimationIndex self, DecimationIndex arg2) -> bool"""
        return _DataModel.DecimationIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DecimationIndex self, DecimationIndex arg2) -> bool"""
        return _DataModel.DecimationIndex___ne__(self, *args)

    __swig_setmethods__["sampleRateNumerator"] = _DataModel.DecimationIndex_sampleRateNumerator_set
    __swig_getmethods__["sampleRateNumerator"] = _DataModel.DecimationIndex_sampleRateNumerator_get
    if _newclass:sampleRateNumerator = _swig_property(_DataModel.DecimationIndex_sampleRateNumerator_get, _DataModel.DecimationIndex_sampleRateNumerator_set)
    __swig_setmethods__["sampleRateDenominator"] = _DataModel.DecimationIndex_sampleRateDenominator_set
    __swig_getmethods__["sampleRateDenominator"] = _DataModel.DecimationIndex_sampleRateDenominator_get
    if _newclass:sampleRateDenominator = _swig_property(_DataModel.DecimationIndex_sampleRateDenominator_get, _DataModel.DecimationIndex_sampleRateDenominator_set)
    __swig_destroy__ = _DataModel.delete_DecimationIndex
    __del__ = lambda self : None;
DecimationIndex_swigregister = _DataModel.DecimationIndex_swigregister
DecimationIndex_swigregister(DecimationIndex)

class Decimation(Object):
    """Proxy of C++ Seiscomp::DataModel::Decimation class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decimation, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Decimation, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Decimation_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Decimation_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Decimation self) -> char const *"""
        return _DataModel.Decimation_className(self)

    def typeInfo(self):
        """typeInfo(Decimation self) -> RTTI"""
        return _DataModel.Decimation_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Decimation
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Decimation
        """
        return _DataModel.Decimation_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Decimation
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Decimation
        """
        return _DataModel.Decimation_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Decimation self, GenericArchive ar)"""
        return _DataModel.Decimation_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Decimation self) -> Decimation
        __init__(Seiscomp::DataModel::Decimation self, Decimation other) -> Decimation
        """
        this = _DataModel.new_Decimation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Decimation
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Decimation self, Decimation other) -> bool"""
        return _DataModel.Decimation___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Decimation self, Decimation other) -> bool"""
        return _DataModel.Decimation___ne__(self, *args)

    def equal(self, *args):
        """equal(Decimation self, Decimation other) -> bool"""
        return _DataModel.Decimation_equal(self, *args)

    def setSampleRateNumerator(self, *args):
        """setSampleRateNumerator(Decimation self, int sampleRateNumerator)"""
        return _DataModel.Decimation_setSampleRateNumerator(self, *args)

    def sampleRateNumerator(self):
        """sampleRateNumerator(Decimation self) -> int"""
        return _DataModel.Decimation_sampleRateNumerator(self)

    def setSampleRateDenominator(self, *args):
        """setSampleRateDenominator(Decimation self, int sampleRateDenominator)"""
        return _DataModel.Decimation_setSampleRateDenominator(self, *args)

    def sampleRateDenominator(self):
        """sampleRateDenominator(Decimation self) -> int"""
        return _DataModel.Decimation_sampleRateDenominator(self)

    def setAnalogueFilterChain(self, *args):
        """setAnalogueFilterChain(Decimation self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & analogueFilterChain)"""
        return _DataModel.Decimation_setAnalogueFilterChain(self, *args)

    def analogueFilterChain(self, *args):
        """
        analogueFilterChain(Decimation self) -> Blob
        analogueFilterChain(Decimation self) -> Blob
        """
        return _DataModel.Decimation_analogueFilterChain(self, *args)

    def setDigitalFilterChain(self, *args):
        """setDigitalFilterChain(Decimation self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & digitalFilterChain)"""
        return _DataModel.Decimation_setDigitalFilterChain(self, *args)

    def digitalFilterChain(self, *args):
        """
        digitalFilterChain(Decimation self) -> Blob
        digitalFilterChain(Decimation self) -> Blob
        """
        return _DataModel.Decimation_digitalFilterChain(self, *args)

    def index(self):
        """index(Decimation self) -> DecimationIndex"""
        return _DataModel.Decimation_index(self)

    def equalIndex(self, *args):
        """equalIndex(Decimation self, Decimation lhs) -> bool"""
        return _DataModel.Decimation_equalIndex(self, *args)

    def datalogger(self):
        """datalogger(Decimation self) -> Datalogger"""
        return _DataModel.Decimation_datalogger(self)

    def assign(self, *args):
        """assign(Decimation self, Object other) -> bool"""
        return _DataModel.Decimation_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Decimation self, PublicObject parent) -> bool"""
        return _DataModel.Decimation_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Decimation self, PublicObject parent) -> bool"""
        return _DataModel.Decimation_detachFrom(self, *args)

    def detach(self):
        """detach(Decimation self) -> bool"""
        return _DataModel.Decimation_detach(self)

    def clone(self):
        """clone(Decimation self) -> Object"""
        return _DataModel.Decimation_clone(self)

    def accept(self, *args):
        """accept(Decimation self, Visitor arg2)"""
        return _DataModel.Decimation_accept(self, *args)

Decimation_swigregister = _DataModel.Decimation_swigregister
Decimation_swigregister(Decimation)

def Decimation_ClassName():
  """Decimation_ClassName() -> char const *"""
  return _DataModel.Decimation_ClassName()

def Decimation_TypeInfo():
  """Decimation_TypeInfo() -> RTTI"""
  return _DataModel.Decimation_TypeInfo()

def Decimation_Cast(*args):
  """
    Cast(BaseObject o) -> Decimation
    Decimation_Cast(Seiscomp::Core::BaseObjectPtr o) -> Decimation
    """
  return _DataModel.Decimation_Cast(*args)

def Decimation_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Decimation
    Decimation_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Decimation
    """
  return _DataModel.Decimation_ConstCast(*args)

class DataloggerIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::DataloggerIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataloggerIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataloggerIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DataloggerIndex self) -> DataloggerIndex
        __init__(Seiscomp::DataModel::DataloggerIndex self, std::string const & name) -> DataloggerIndex
        __init__(Seiscomp::DataModel::DataloggerIndex self, DataloggerIndex arg2) -> DataloggerIndex
        """
        this = _DataModel.new_DataloggerIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(DataloggerIndex self, DataloggerIndex arg2) -> bool"""
        return _DataModel.DataloggerIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DataloggerIndex self, DataloggerIndex arg2) -> bool"""
        return _DataModel.DataloggerIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.DataloggerIndex_name_set
    __swig_getmethods__["name"] = _DataModel.DataloggerIndex_name_get
    if _newclass:name = _swig_property(_DataModel.DataloggerIndex_name_get, _DataModel.DataloggerIndex_name_set)
    __swig_destroy__ = _DataModel.delete_DataloggerIndex
    __del__ = lambda self : None;
DataloggerIndex_swigregister = _DataModel.DataloggerIndex_swigregister
DataloggerIndex_swigregister(DataloggerIndex)

class Datalogger(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Datalogger class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datalogger, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datalogger, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Datalogger_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Datalogger_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Datalogger self) -> char const *"""
        return _DataModel.Datalogger_className(self)

    def typeInfo(self):
        """typeInfo(Datalogger self) -> RTTI"""
        return _DataModel.Datalogger_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Datalogger
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Datalogger
        """
        return _DataModel.Datalogger_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Datalogger
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Datalogger
        """
        return _DataModel.Datalogger_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Datalogger self, GenericArchive ar)"""
        return _DataModel.Datalogger_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Datalogger self, Datalogger other) -> Datalogger
        __init__(Seiscomp::DataModel::Datalogger self, std::string const & publicID) -> Datalogger
        """
        this = _DataModel.new_Datalogger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Datalogger
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Datalogger
        Create(std::string const & publicID) -> Datalogger
        """
        return _DataModel.Datalogger_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Datalogger"""
        return _DataModel.Datalogger_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Datalogger self, Datalogger other) -> bool"""
        return _DataModel.Datalogger___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Datalogger self, Datalogger other) -> bool"""
        return _DataModel.Datalogger___ne__(self, *args)

    def equal(self, *args):
        """equal(Datalogger self, Datalogger other) -> bool"""
        return _DataModel.Datalogger_equal(self, *args)

    def setName(self, *args):
        """setName(Datalogger self, std::string const & name)"""
        return _DataModel.Datalogger_setName(self, *args)

    def name(self):
        """name(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_name(self)

    def setDescription(self, *args):
        """setDescription(Datalogger self, std::string const & description)"""
        return _DataModel.Datalogger_setDescription(self, *args)

    def description(self):
        """description(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_description(self)

    def setDigitizerModel(self, *args):
        """setDigitizerModel(Datalogger self, std::string const & digitizerModel)"""
        return _DataModel.Datalogger_setDigitizerModel(self, *args)

    def digitizerModel(self):
        """digitizerModel(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_digitizerModel(self)

    def setDigitizerManufacturer(self, *args):
        """setDigitizerManufacturer(Datalogger self, std::string const & digitizerManufacturer)"""
        return _DataModel.Datalogger_setDigitizerManufacturer(self, *args)

    def digitizerManufacturer(self):
        """digitizerManufacturer(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_digitizerManufacturer(self)

    def setRecorderModel(self, *args):
        """setRecorderModel(Datalogger self, std::string const & recorderModel)"""
        return _DataModel.Datalogger_setRecorderModel(self, *args)

    def recorderModel(self):
        """recorderModel(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_recorderModel(self)

    def setRecorderManufacturer(self, *args):
        """setRecorderManufacturer(Datalogger self, std::string const & recorderManufacturer)"""
        return _DataModel.Datalogger_setRecorderManufacturer(self, *args)

    def recorderManufacturer(self):
        """recorderManufacturer(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_recorderManufacturer(self)

    def setClockModel(self, *args):
        """setClockModel(Datalogger self, std::string const & clockModel)"""
        return _DataModel.Datalogger_setClockModel(self, *args)

    def clockModel(self):
        """clockModel(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_clockModel(self)

    def setClockManufacturer(self, *args):
        """setClockManufacturer(Datalogger self, std::string const & clockManufacturer)"""
        return _DataModel.Datalogger_setClockManufacturer(self, *args)

    def clockManufacturer(self):
        """clockManufacturer(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_clockManufacturer(self)

    def setClockType(self, *args):
        """setClockType(Datalogger self, std::string const & clockType)"""
        return _DataModel.Datalogger_setClockType(self, *args)

    def clockType(self):
        """clockType(Datalogger self) -> std::string const &"""
        return _DataModel.Datalogger_clockType(self)

    def setGain(self, *args):
        """setGain(Datalogger self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.Datalogger_setGain(self, *args)

    def gain(self):
        """gain(Datalogger self) -> double"""
        return _DataModel.Datalogger_gain(self)

    def setMaxClockDrift(self, *args):
        """setMaxClockDrift(Datalogger self, Seiscomp::Core::Optional< double >::Impl const & maxClockDrift)"""
        return _DataModel.Datalogger_setMaxClockDrift(self, *args)

    def maxClockDrift(self):
        """maxClockDrift(Datalogger self) -> double"""
        return _DataModel.Datalogger_maxClockDrift(self)

    def setRemark(self, *args):
        """setRemark(Datalogger self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.Datalogger_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(Datalogger self) -> Blob
        remark(Datalogger self) -> Blob
        """
        return _DataModel.Datalogger_remark(self, *args)

    def index(self):
        """index(Datalogger self) -> DataloggerIndex"""
        return _DataModel.Datalogger_index(self)

    def equalIndex(self, *args):
        """equalIndex(Datalogger self, Datalogger lhs) -> bool"""
        return _DataModel.Datalogger_equalIndex(self, *args)

    def add(self, *args):
        """
        add(Datalogger self, DataloggerCalibration obj) -> bool
        add(Datalogger self, Decimation obj) -> bool
        """
        return _DataModel.Datalogger_add(self, *args)

    def remove(self, *args):
        """
        remove(Datalogger self, DataloggerCalibration obj) -> bool
        remove(Datalogger self, Decimation obj) -> bool
        """
        return _DataModel.Datalogger_remove(self, *args)

    def removeDataloggerCalibration(self, *args):
        """
        removeDataloggerCalibration(Datalogger self, size_t i) -> bool
        removeDataloggerCalibration(Datalogger self, DataloggerCalibrationIndex i) -> bool
        """
        return _DataModel.Datalogger_removeDataloggerCalibration(self, *args)

    def removeDecimation(self, *args):
        """
        removeDecimation(Datalogger self, size_t i) -> bool
        removeDecimation(Datalogger self, DecimationIndex i) -> bool
        """
        return _DataModel.Datalogger_removeDecimation(self, *args)

    def dataloggerCalibrationCount(self):
        """dataloggerCalibrationCount(Datalogger self) -> size_t"""
        return _DataModel.Datalogger_dataloggerCalibrationCount(self)

    def decimationCount(self):
        """decimationCount(Datalogger self) -> size_t"""
        return _DataModel.Datalogger_decimationCount(self)

    def dataloggerCalibration(self, *args):
        """
        dataloggerCalibration(Datalogger self, size_t i) -> DataloggerCalibration
        dataloggerCalibration(Datalogger self, DataloggerCalibrationIndex i) -> DataloggerCalibration
        """
        return _DataModel.Datalogger_dataloggerCalibration(self, *args)

    def decimation(self, *args):
        """
        decimation(Datalogger self, size_t i) -> Decimation
        decimation(Datalogger self, DecimationIndex i) -> Decimation
        """
        return _DataModel.Datalogger_decimation(self, *args)

    def inventory(self):
        """inventory(Datalogger self) -> Inventory"""
        return _DataModel.Datalogger_inventory(self)

    def assign(self, *args):
        """assign(Datalogger self, Object other) -> bool"""
        return _DataModel.Datalogger_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Datalogger self, PublicObject parent) -> bool"""
        return _DataModel.Datalogger_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Datalogger self, PublicObject parent) -> bool"""
        return _DataModel.Datalogger_detachFrom(self, *args)

    def detach(self):
        """detach(Datalogger self) -> bool"""
        return _DataModel.Datalogger_detach(self)

    def clone(self):
        """clone(Datalogger self) -> Object"""
        return _DataModel.Datalogger_clone(self)

    def updateChild(self, *args):
        """updateChild(Datalogger self, Object child) -> bool"""
        return _DataModel.Datalogger_updateChild(self, *args)

    def accept(self, *args):
        """accept(Datalogger self, Visitor arg2)"""
        return _DataModel.Datalogger_accept(self, *args)

Datalogger_swigregister = _DataModel.Datalogger_swigregister
Datalogger_swigregister(Datalogger)

def Datalogger_ClassName():
  """Datalogger_ClassName() -> char const *"""
  return _DataModel.Datalogger_ClassName()

def Datalogger_TypeInfo():
  """Datalogger_TypeInfo() -> RTTI"""
  return _DataModel.Datalogger_TypeInfo()

def Datalogger_Cast(*args):
  """
    Cast(BaseObject o) -> Datalogger
    Datalogger_Cast(Seiscomp::Core::BaseObjectPtr o) -> Datalogger
    """
  return _DataModel.Datalogger_Cast(*args)

def Datalogger_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Datalogger
    Datalogger_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Datalogger
    """
  return _DataModel.Datalogger_ConstCast(*args)

def Datalogger_Create(*args):
  """
    Create() -> Datalogger
    Datalogger_Create(std::string const & publicID) -> Datalogger
    """
  return _DataModel.Datalogger_Create(*args)

def Datalogger_Find(*args):
  """Datalogger_Find(std::string const & publicID) -> Datalogger"""
  return _DataModel.Datalogger_Find(*args)

class ResponseFIRIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ResponseFIRIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseFIRIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseFIRIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponseFIRIndex self) -> ResponseFIRIndex
        __init__(Seiscomp::DataModel::ResponseFIRIndex self, std::string const & name) -> ResponseFIRIndex
        __init__(Seiscomp::DataModel::ResponseFIRIndex self, ResponseFIRIndex arg2) -> ResponseFIRIndex
        """
        this = _DataModel.new_ResponseFIRIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ResponseFIRIndex self, ResponseFIRIndex arg2) -> bool"""
        return _DataModel.ResponseFIRIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponseFIRIndex self, ResponseFIRIndex arg2) -> bool"""
        return _DataModel.ResponseFIRIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.ResponseFIRIndex_name_set
    __swig_getmethods__["name"] = _DataModel.ResponseFIRIndex_name_get
    if _newclass:name = _swig_property(_DataModel.ResponseFIRIndex_name_get, _DataModel.ResponseFIRIndex_name_set)
    __swig_destroy__ = _DataModel.delete_ResponseFIRIndex
    __del__ = lambda self : None;
ResponseFIRIndex_swigregister = _DataModel.ResponseFIRIndex_swigregister
ResponseFIRIndex_swigregister(ResponseFIRIndex)

class ResponseFIR(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ResponseFIR class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseFIR, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseFIR, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ResponseFIR_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ResponseFIR_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ResponseFIR self) -> char const *"""
        return _DataModel.ResponseFIR_className(self)

    def typeInfo(self):
        """typeInfo(ResponseFIR self) -> RTTI"""
        return _DataModel.ResponseFIR_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ResponseFIR
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponseFIR
        """
        return _DataModel.ResponseFIR_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ResponseFIR
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponseFIR
        """
        return _DataModel.ResponseFIR_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ResponseFIR self, GenericArchive ar)"""
        return _DataModel.ResponseFIR_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ResponseFIR self, ResponseFIR other) -> ResponseFIR
        __init__(Seiscomp::DataModel::ResponseFIR self, std::string const & publicID) -> ResponseFIR
        """
        this = _DataModel.new_ResponseFIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ResponseFIR
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ResponseFIR
        Create(std::string const & publicID) -> ResponseFIR
        """
        return _DataModel.ResponseFIR_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ResponseFIR"""
        return _DataModel.ResponseFIR_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ResponseFIR self, ResponseFIR other) -> bool"""
        return _DataModel.ResponseFIR___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ResponseFIR self, ResponseFIR other) -> bool"""
        return _DataModel.ResponseFIR___ne__(self, *args)

    def equal(self, *args):
        """equal(ResponseFIR self, ResponseFIR other) -> bool"""
        return _DataModel.ResponseFIR_equal(self, *args)

    def setName(self, *args):
        """setName(ResponseFIR self, std::string const & name)"""
        return _DataModel.ResponseFIR_setName(self, *args)

    def name(self):
        """name(ResponseFIR self) -> std::string const &"""
        return _DataModel.ResponseFIR_name(self)

    def setGain(self, *args):
        """setGain(ResponseFIR self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.ResponseFIR_setGain(self, *args)

    def gain(self):
        """gain(ResponseFIR self) -> double"""
        return _DataModel.ResponseFIR_gain(self)

    def setDecimationFactor(self, *args):
        """setDecimationFactor(ResponseFIR self, Seiscomp::Core::Optional< int >::Impl const & decimationFactor)"""
        return _DataModel.ResponseFIR_setDecimationFactor(self, *args)

    def decimationFactor(self):
        """decimationFactor(ResponseFIR self) -> int"""
        return _DataModel.ResponseFIR_decimationFactor(self)

    def setDelay(self, *args):
        """setDelay(ResponseFIR self, Seiscomp::Core::Optional< double >::Impl const & delay)"""
        return _DataModel.ResponseFIR_setDelay(self, *args)

    def delay(self):
        """delay(ResponseFIR self) -> double"""
        return _DataModel.ResponseFIR_delay(self)

    def setCorrection(self, *args):
        """setCorrection(ResponseFIR self, Seiscomp::Core::Optional< double >::Impl const & correction)"""
        return _DataModel.ResponseFIR_setCorrection(self, *args)

    def correction(self):
        """correction(ResponseFIR self) -> double"""
        return _DataModel.ResponseFIR_correction(self)

    def setNumberOfCoefficients(self, *args):
        """setNumberOfCoefficients(ResponseFIR self, Seiscomp::Core::Optional< int >::Impl const & numberOfCoefficients)"""
        return _DataModel.ResponseFIR_setNumberOfCoefficients(self, *args)

    def numberOfCoefficients(self):
        """numberOfCoefficients(ResponseFIR self) -> int"""
        return _DataModel.ResponseFIR_numberOfCoefficients(self)

    def setSymmetry(self, *args):
        """setSymmetry(ResponseFIR self, std::string const & symmetry)"""
        return _DataModel.ResponseFIR_setSymmetry(self, *args)

    def symmetry(self):
        """symmetry(ResponseFIR self) -> std::string const &"""
        return _DataModel.ResponseFIR_symmetry(self)

    def setCoefficients(self, *args):
        """setCoefficients(ResponseFIR self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealArray >::Impl const & coefficients)"""
        return _DataModel.ResponseFIR_setCoefficients(self, *args)

    def coefficients(self, *args):
        """
        coefficients(ResponseFIR self) -> RealArray
        coefficients(ResponseFIR self) -> RealArray
        """
        return _DataModel.ResponseFIR_coefficients(self, *args)

    def setRemark(self, *args):
        """setRemark(ResponseFIR self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.ResponseFIR_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(ResponseFIR self) -> Blob
        remark(ResponseFIR self) -> Blob
        """
        return _DataModel.ResponseFIR_remark(self, *args)

    def index(self):
        """index(ResponseFIR self) -> ResponseFIRIndex"""
        return _DataModel.ResponseFIR_index(self)

    def equalIndex(self, *args):
        """equalIndex(ResponseFIR self, ResponseFIR lhs) -> bool"""
        return _DataModel.ResponseFIR_equalIndex(self, *args)

    def inventory(self):
        """inventory(ResponseFIR self) -> Inventory"""
        return _DataModel.ResponseFIR_inventory(self)

    def assign(self, *args):
        """assign(ResponseFIR self, Object other) -> bool"""
        return _DataModel.ResponseFIR_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ResponseFIR self, PublicObject parent) -> bool"""
        return _DataModel.ResponseFIR_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ResponseFIR self, PublicObject parent) -> bool"""
        return _DataModel.ResponseFIR_detachFrom(self, *args)

    def detach(self):
        """detach(ResponseFIR self) -> bool"""
        return _DataModel.ResponseFIR_detach(self)

    def clone(self):
        """clone(ResponseFIR self) -> Object"""
        return _DataModel.ResponseFIR_clone(self)

    def updateChild(self, *args):
        """updateChild(ResponseFIR self, Object child) -> bool"""
        return _DataModel.ResponseFIR_updateChild(self, *args)

    def accept(self, *args):
        """accept(ResponseFIR self, Visitor arg2)"""
        return _DataModel.ResponseFIR_accept(self, *args)

ResponseFIR_swigregister = _DataModel.ResponseFIR_swigregister
ResponseFIR_swigregister(ResponseFIR)

def ResponseFIR_ClassName():
  """ResponseFIR_ClassName() -> char const *"""
  return _DataModel.ResponseFIR_ClassName()

def ResponseFIR_TypeInfo():
  """ResponseFIR_TypeInfo() -> RTTI"""
  return _DataModel.ResponseFIR_TypeInfo()

def ResponseFIR_Cast(*args):
  """
    Cast(BaseObject o) -> ResponseFIR
    ResponseFIR_Cast(Seiscomp::Core::BaseObjectPtr o) -> ResponseFIR
    """
  return _DataModel.ResponseFIR_Cast(*args)

def ResponseFIR_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ResponseFIR
    ResponseFIR_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ResponseFIR
    """
  return _DataModel.ResponseFIR_ConstCast(*args)

def ResponseFIR_Create(*args):
  """
    Create() -> ResponseFIR
    ResponseFIR_Create(std::string const & publicID) -> ResponseFIR
    """
  return _DataModel.ResponseFIR_Create(*args)

def ResponseFIR_Find(*args):
  """ResponseFIR_Find(std::string const & publicID) -> ResponseFIR"""
  return _DataModel.ResponseFIR_Find(*args)

class AuxStreamIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::AuxStreamIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxStreamIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuxStreamIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AuxStreamIndex self) -> AuxStreamIndex
        __init__(Seiscomp::DataModel::AuxStreamIndex self, std::string const & code, Time start) -> AuxStreamIndex
        __init__(Seiscomp::DataModel::AuxStreamIndex self, AuxStreamIndex arg2) -> AuxStreamIndex
        """
        this = _DataModel.new_AuxStreamIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(AuxStreamIndex self, AuxStreamIndex arg2) -> bool"""
        return _DataModel.AuxStreamIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AuxStreamIndex self, AuxStreamIndex arg2) -> bool"""
        return _DataModel.AuxStreamIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.AuxStreamIndex_code_set
    __swig_getmethods__["code"] = _DataModel.AuxStreamIndex_code_get
    if _newclass:code = _swig_property(_DataModel.AuxStreamIndex_code_get, _DataModel.AuxStreamIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.AuxStreamIndex_start_set
    __swig_getmethods__["start"] = _DataModel.AuxStreamIndex_start_get
    if _newclass:start = _swig_property(_DataModel.AuxStreamIndex_start_get, _DataModel.AuxStreamIndex_start_set)
    __swig_destroy__ = _DataModel.delete_AuxStreamIndex
    __del__ = lambda self : None;
AuxStreamIndex_swigregister = _DataModel.AuxStreamIndex_swigregister
AuxStreamIndex_swigregister(AuxStreamIndex)

class AuxStream(Object):
    """Proxy of C++ Seiscomp::DataModel::AuxStream class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuxStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuxStream, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.AuxStream_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.AuxStream_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(AuxStream self) -> char const *"""
        return _DataModel.AuxStream_className(self)

    def typeInfo(self):
        """typeInfo(AuxStream self) -> RTTI"""
        return _DataModel.AuxStream_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> AuxStream
        Cast(Seiscomp::Core::BaseObjectPtr o) -> AuxStream
        """
        return _DataModel.AuxStream_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> AuxStream
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AuxStream
        """
        return _DataModel.AuxStream_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(AuxStream self, GenericArchive ar)"""
        return _DataModel.AuxStream_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AuxStream self) -> AuxStream
        __init__(Seiscomp::DataModel::AuxStream self, AuxStream other) -> AuxStream
        """
        this = _DataModel.new_AuxStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AuxStream
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(AuxStream self, AuxStream other) -> bool"""
        return _DataModel.AuxStream___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AuxStream self, AuxStream other) -> bool"""
        return _DataModel.AuxStream___ne__(self, *args)

    def equal(self, *args):
        """equal(AuxStream self, AuxStream other) -> bool"""
        return _DataModel.AuxStream_equal(self, *args)

    def setCode(self, *args):
        """setCode(AuxStream self, std::string const & code)"""
        return _DataModel.AuxStream_setCode(self, *args)

    def code(self):
        """code(AuxStream self) -> std::string const &"""
        return _DataModel.AuxStream_code(self)

    def setStart(self, *args):
        """setStart(AuxStream self, Time start)"""
        return _DataModel.AuxStream_setStart(self, *args)

    def start(self):
        """start(AuxStream self) -> Time"""
        return _DataModel.AuxStream_start(self)

    def setEnd(self, *args):
        """setEnd(AuxStream self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.AuxStream_setEnd(self, *args)

    def end(self):
        """end(AuxStream self) -> Time"""
        return _DataModel.AuxStream_end(self)

    def setDevice(self, *args):
        """setDevice(AuxStream self, std::string const & device)"""
        return _DataModel.AuxStream_setDevice(self, *args)

    def device(self):
        """device(AuxStream self) -> std::string const &"""
        return _DataModel.AuxStream_device(self)

    def setDeviceSerialNumber(self, *args):
        """setDeviceSerialNumber(AuxStream self, std::string const & deviceSerialNumber)"""
        return _DataModel.AuxStream_setDeviceSerialNumber(self, *args)

    def deviceSerialNumber(self):
        """deviceSerialNumber(AuxStream self) -> std::string const &"""
        return _DataModel.AuxStream_deviceSerialNumber(self)

    def setSource(self, *args):
        """setSource(AuxStream self, std::string const & source)"""
        return _DataModel.AuxStream_setSource(self, *args)

    def source(self):
        """source(AuxStream self) -> std::string const &"""
        return _DataModel.AuxStream_source(self)

    def setFormat(self, *args):
        """setFormat(AuxStream self, std::string const & format)"""
        return _DataModel.AuxStream_setFormat(self, *args)

    def format(self):
        """format(AuxStream self) -> std::string const &"""
        return _DataModel.AuxStream_format(self)

    def setFlags(self, *args):
        """setFlags(AuxStream self, std::string const & flags)"""
        return _DataModel.AuxStream_setFlags(self, *args)

    def flags(self):
        """flags(AuxStream self) -> std::string const &"""
        return _DataModel.AuxStream_flags(self)

    def setRestricted(self, *args):
        """setRestricted(AuxStream self, Seiscomp::Core::Optional< bool >::Impl const & restricted)"""
        return _DataModel.AuxStream_setRestricted(self, *args)

    def restricted(self):
        """restricted(AuxStream self) -> bool"""
        return _DataModel.AuxStream_restricted(self)

    def setShared(self, *args):
        """setShared(AuxStream self, Seiscomp::Core::Optional< bool >::Impl const & shared)"""
        return _DataModel.AuxStream_setShared(self, *args)

    def shared(self):
        """shared(AuxStream self) -> bool"""
        return _DataModel.AuxStream_shared(self)

    def index(self):
        """index(AuxStream self) -> AuxStreamIndex"""
        return _DataModel.AuxStream_index(self)

    def equalIndex(self, *args):
        """equalIndex(AuxStream self, AuxStream lhs) -> bool"""
        return _DataModel.AuxStream_equalIndex(self, *args)

    def sensorLocation(self):
        """sensorLocation(AuxStream self) -> SensorLocation"""
        return _DataModel.AuxStream_sensorLocation(self)

    def assign(self, *args):
        """assign(AuxStream self, Object other) -> bool"""
        return _DataModel.AuxStream_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(AuxStream self, PublicObject parent) -> bool"""
        return _DataModel.AuxStream_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(AuxStream self, PublicObject parent) -> bool"""
        return _DataModel.AuxStream_detachFrom(self, *args)

    def detach(self):
        """detach(AuxStream self) -> bool"""
        return _DataModel.AuxStream_detach(self)

    def clone(self):
        """clone(AuxStream self) -> Object"""
        return _DataModel.AuxStream_clone(self)

    def accept(self, *args):
        """accept(AuxStream self, Visitor arg2)"""
        return _DataModel.AuxStream_accept(self, *args)

AuxStream_swigregister = _DataModel.AuxStream_swigregister
AuxStream_swigregister(AuxStream)

def AuxStream_ClassName():
  """AuxStream_ClassName() -> char const *"""
  return _DataModel.AuxStream_ClassName()

def AuxStream_TypeInfo():
  """AuxStream_TypeInfo() -> RTTI"""
  return _DataModel.AuxStream_TypeInfo()

def AuxStream_Cast(*args):
  """
    Cast(BaseObject o) -> AuxStream
    AuxStream_Cast(Seiscomp::Core::BaseObjectPtr o) -> AuxStream
    """
  return _DataModel.AuxStream_Cast(*args)

def AuxStream_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> AuxStream
    AuxStream_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AuxStream
    """
  return _DataModel.AuxStream_ConstCast(*args)

class StreamIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::StreamIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StreamIndex self) -> StreamIndex
        __init__(Seiscomp::DataModel::StreamIndex self, std::string const & code, Time start) -> StreamIndex
        __init__(Seiscomp::DataModel::StreamIndex self, StreamIndex arg2) -> StreamIndex
        """
        this = _DataModel.new_StreamIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(StreamIndex self, StreamIndex arg2) -> bool"""
        return _DataModel.StreamIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StreamIndex self, StreamIndex arg2) -> bool"""
        return _DataModel.StreamIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.StreamIndex_code_set
    __swig_getmethods__["code"] = _DataModel.StreamIndex_code_get
    if _newclass:code = _swig_property(_DataModel.StreamIndex_code_get, _DataModel.StreamIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.StreamIndex_start_set
    __swig_getmethods__["start"] = _DataModel.StreamIndex_start_get
    if _newclass:start = _swig_property(_DataModel.StreamIndex_start_get, _DataModel.StreamIndex_start_set)
    __swig_destroy__ = _DataModel.delete_StreamIndex
    __del__ = lambda self : None;
StreamIndex_swigregister = _DataModel.StreamIndex_swigregister
StreamIndex_swigregister(StreamIndex)

class Stream(Object):
    """Proxy of C++ Seiscomp::DataModel::Stream class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Stream_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Stream_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Stream self) -> char const *"""
        return _DataModel.Stream_className(self)

    def typeInfo(self):
        """typeInfo(Stream self) -> RTTI"""
        return _DataModel.Stream_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Stream
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Stream
        """
        return _DataModel.Stream_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Stream
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Stream
        """
        return _DataModel.Stream_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Stream self, GenericArchive ar)"""
        return _DataModel.Stream_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Stream self) -> Stream
        __init__(Seiscomp::DataModel::Stream self, Stream other) -> Stream
        """
        this = _DataModel.new_Stream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Stream
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Stream self, Stream other) -> bool"""
        return _DataModel.Stream___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Stream self, Stream other) -> bool"""
        return _DataModel.Stream___ne__(self, *args)

    def equal(self, *args):
        """equal(Stream self, Stream other) -> bool"""
        return _DataModel.Stream_equal(self, *args)

    def setCode(self, *args):
        """setCode(Stream self, std::string const & code)"""
        return _DataModel.Stream_setCode(self, *args)

    def code(self):
        """code(Stream self) -> std::string const &"""
        return _DataModel.Stream_code(self)

    def setStart(self, *args):
        """setStart(Stream self, Time start)"""
        return _DataModel.Stream_setStart(self, *args)

    def start(self):
        """start(Stream self) -> Time"""
        return _DataModel.Stream_start(self)

    def setEnd(self, *args):
        """setEnd(Stream self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.Stream_setEnd(self, *args)

    def end(self):
        """end(Stream self) -> Time"""
        return _DataModel.Stream_end(self)

    def setDatalogger(self, *args):
        """setDatalogger(Stream self, std::string const & datalogger)"""
        return _DataModel.Stream_setDatalogger(self, *args)

    def datalogger(self):
        """datalogger(Stream self) -> std::string const &"""
        return _DataModel.Stream_datalogger(self)

    def setDataloggerSerialNumber(self, *args):
        """setDataloggerSerialNumber(Stream self, std::string const & dataloggerSerialNumber)"""
        return _DataModel.Stream_setDataloggerSerialNumber(self, *args)

    def dataloggerSerialNumber(self):
        """dataloggerSerialNumber(Stream self) -> std::string const &"""
        return _DataModel.Stream_dataloggerSerialNumber(self)

    def setDataloggerChannel(self, *args):
        """setDataloggerChannel(Stream self, Seiscomp::Core::Optional< int >::Impl const & dataloggerChannel)"""
        return _DataModel.Stream_setDataloggerChannel(self, *args)

    def dataloggerChannel(self):
        """dataloggerChannel(Stream self) -> int"""
        return _DataModel.Stream_dataloggerChannel(self)

    def setSensor(self, *args):
        """setSensor(Stream self, std::string const & sensor)"""
        return _DataModel.Stream_setSensor(self, *args)

    def sensor(self):
        """sensor(Stream self) -> std::string const &"""
        return _DataModel.Stream_sensor(self)

    def setSensorSerialNumber(self, *args):
        """setSensorSerialNumber(Stream self, std::string const & sensorSerialNumber)"""
        return _DataModel.Stream_setSensorSerialNumber(self, *args)

    def sensorSerialNumber(self):
        """sensorSerialNumber(Stream self) -> std::string const &"""
        return _DataModel.Stream_sensorSerialNumber(self)

    def setSensorChannel(self, *args):
        """setSensorChannel(Stream self, Seiscomp::Core::Optional< int >::Impl const & sensorChannel)"""
        return _DataModel.Stream_setSensorChannel(self, *args)

    def sensorChannel(self):
        """sensorChannel(Stream self) -> int"""
        return _DataModel.Stream_sensorChannel(self)

    def setClockSerialNumber(self, *args):
        """setClockSerialNumber(Stream self, std::string const & clockSerialNumber)"""
        return _DataModel.Stream_setClockSerialNumber(self, *args)

    def clockSerialNumber(self):
        """clockSerialNumber(Stream self) -> std::string const &"""
        return _DataModel.Stream_clockSerialNumber(self)

    def setSampleRateNumerator(self, *args):
        """setSampleRateNumerator(Stream self, Seiscomp::Core::Optional< int >::Impl const & sampleRateNumerator)"""
        return _DataModel.Stream_setSampleRateNumerator(self, *args)

    def sampleRateNumerator(self):
        """sampleRateNumerator(Stream self) -> int"""
        return _DataModel.Stream_sampleRateNumerator(self)

    def setSampleRateDenominator(self, *args):
        """setSampleRateDenominator(Stream self, Seiscomp::Core::Optional< int >::Impl const & sampleRateDenominator)"""
        return _DataModel.Stream_setSampleRateDenominator(self, *args)

    def sampleRateDenominator(self):
        """sampleRateDenominator(Stream self) -> int"""
        return _DataModel.Stream_sampleRateDenominator(self)

    def setDepth(self, *args):
        """setDepth(Stream self, Seiscomp::Core::Optional< double >::Impl const & depth)"""
        return _DataModel.Stream_setDepth(self, *args)

    def depth(self):
        """depth(Stream self) -> double"""
        return _DataModel.Stream_depth(self)

    def setAzimuth(self, *args):
        """setAzimuth(Stream self, Seiscomp::Core::Optional< double >::Impl const & azimuth)"""
        return _DataModel.Stream_setAzimuth(self, *args)

    def azimuth(self):
        """azimuth(Stream self) -> double"""
        return _DataModel.Stream_azimuth(self)

    def setDip(self, *args):
        """setDip(Stream self, Seiscomp::Core::Optional< double >::Impl const & dip)"""
        return _DataModel.Stream_setDip(self, *args)

    def dip(self):
        """dip(Stream self) -> double"""
        return _DataModel.Stream_dip(self)

    def setGain(self, *args):
        """setGain(Stream self, Seiscomp::Core::Optional< double >::Impl const & gain)"""
        return _DataModel.Stream_setGain(self, *args)

    def gain(self):
        """gain(Stream self) -> double"""
        return _DataModel.Stream_gain(self)

    def setGainFrequency(self, *args):
        """setGainFrequency(Stream self, Seiscomp::Core::Optional< double >::Impl const & gainFrequency)"""
        return _DataModel.Stream_setGainFrequency(self, *args)

    def gainFrequency(self):
        """gainFrequency(Stream self) -> double"""
        return _DataModel.Stream_gainFrequency(self)

    def setGainUnit(self, *args):
        """setGainUnit(Stream self, std::string const & gainUnit)"""
        return _DataModel.Stream_setGainUnit(self, *args)

    def gainUnit(self):
        """gainUnit(Stream self) -> std::string const &"""
        return _DataModel.Stream_gainUnit(self)

    def setFormat(self, *args):
        """setFormat(Stream self, std::string const & format)"""
        return _DataModel.Stream_setFormat(self, *args)

    def format(self):
        """format(Stream self) -> std::string const &"""
        return _DataModel.Stream_format(self)

    def setFlags(self, *args):
        """setFlags(Stream self, std::string const & flags)"""
        return _DataModel.Stream_setFlags(self, *args)

    def flags(self):
        """flags(Stream self) -> std::string const &"""
        return _DataModel.Stream_flags(self)

    def setRestricted(self, *args):
        """setRestricted(Stream self, Seiscomp::Core::Optional< bool >::Impl const & restricted)"""
        return _DataModel.Stream_setRestricted(self, *args)

    def restricted(self):
        """restricted(Stream self) -> bool"""
        return _DataModel.Stream_restricted(self)

    def setShared(self, *args):
        """setShared(Stream self, Seiscomp::Core::Optional< bool >::Impl const & shared)"""
        return _DataModel.Stream_setShared(self, *args)

    def shared(self):
        """shared(Stream self) -> bool"""
        return _DataModel.Stream_shared(self)

    def index(self):
        """index(Stream self) -> StreamIndex"""
        return _DataModel.Stream_index(self)

    def equalIndex(self, *args):
        """equalIndex(Stream self, Stream lhs) -> bool"""
        return _DataModel.Stream_equalIndex(self, *args)

    def sensorLocation(self):
        """sensorLocation(Stream self) -> SensorLocation"""
        return _DataModel.Stream_sensorLocation(self)

    def assign(self, *args):
        """assign(Stream self, Object other) -> bool"""
        return _DataModel.Stream_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Stream self, PublicObject parent) -> bool"""
        return _DataModel.Stream_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Stream self, PublicObject parent) -> bool"""
        return _DataModel.Stream_detachFrom(self, *args)

    def detach(self):
        """detach(Stream self) -> bool"""
        return _DataModel.Stream_detach(self)

    def clone(self):
        """clone(Stream self) -> Object"""
        return _DataModel.Stream_clone(self)

    def accept(self, *args):
        """accept(Stream self, Visitor arg2)"""
        return _DataModel.Stream_accept(self, *args)

Stream_swigregister = _DataModel.Stream_swigregister
Stream_swigregister(Stream)

def Stream_ClassName():
  """Stream_ClassName() -> char const *"""
  return _DataModel.Stream_ClassName()

def Stream_TypeInfo():
  """Stream_TypeInfo() -> RTTI"""
  return _DataModel.Stream_TypeInfo()

def Stream_Cast(*args):
  """
    Cast(BaseObject o) -> Stream
    Stream_Cast(Seiscomp::Core::BaseObjectPtr o) -> Stream
    """
  return _DataModel.Stream_Cast(*args)

def Stream_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Stream
    Stream_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Stream
    """
  return _DataModel.Stream_ConstCast(*args)

class SensorLocationIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::SensorLocationIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorLocationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorLocationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SensorLocationIndex self) -> SensorLocationIndex
        __init__(Seiscomp::DataModel::SensorLocationIndex self, std::string const & code, Time start) -> SensorLocationIndex
        __init__(Seiscomp::DataModel::SensorLocationIndex self, SensorLocationIndex arg2) -> SensorLocationIndex
        """
        this = _DataModel.new_SensorLocationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(SensorLocationIndex self, SensorLocationIndex arg2) -> bool"""
        return _DataModel.SensorLocationIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SensorLocationIndex self, SensorLocationIndex arg2) -> bool"""
        return _DataModel.SensorLocationIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.SensorLocationIndex_code_set
    __swig_getmethods__["code"] = _DataModel.SensorLocationIndex_code_get
    if _newclass:code = _swig_property(_DataModel.SensorLocationIndex_code_get, _DataModel.SensorLocationIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.SensorLocationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.SensorLocationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.SensorLocationIndex_start_get, _DataModel.SensorLocationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_SensorLocationIndex
    __del__ = lambda self : None;
SensorLocationIndex_swigregister = _DataModel.SensorLocationIndex_swigregister
SensorLocationIndex_swigregister(SensorLocationIndex)

class SensorLocation(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::SensorLocation class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SensorLocation, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.SensorLocation_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.SensorLocation_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(SensorLocation self) -> char const *"""
        return _DataModel.SensorLocation_className(self)

    def typeInfo(self):
        """typeInfo(SensorLocation self) -> RTTI"""
        return _DataModel.SensorLocation_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> SensorLocation
        Cast(Seiscomp::Core::BaseObjectPtr o) -> SensorLocation
        """
        return _DataModel.SensorLocation_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> SensorLocation
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SensorLocation
        """
        return _DataModel.SensorLocation_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(SensorLocation self, GenericArchive ar)"""
        return _DataModel.SensorLocation_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SensorLocation self, SensorLocation other) -> SensorLocation
        __init__(Seiscomp::DataModel::SensorLocation self, std::string const & publicID) -> SensorLocation
        """
        this = _DataModel.new_SensorLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_SensorLocation
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> SensorLocation
        Create(std::string const & publicID) -> SensorLocation
        """
        return _DataModel.SensorLocation_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> SensorLocation"""
        return _DataModel.SensorLocation_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(SensorLocation self, SensorLocation other) -> bool"""
        return _DataModel.SensorLocation___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SensorLocation self, SensorLocation other) -> bool"""
        return _DataModel.SensorLocation___ne__(self, *args)

    def equal(self, *args):
        """equal(SensorLocation self, SensorLocation other) -> bool"""
        return _DataModel.SensorLocation_equal(self, *args)

    def setCode(self, *args):
        """setCode(SensorLocation self, std::string const & code)"""
        return _DataModel.SensorLocation_setCode(self, *args)

    def code(self):
        """code(SensorLocation self) -> std::string const &"""
        return _DataModel.SensorLocation_code(self)

    def setStart(self, *args):
        """setStart(SensorLocation self, Time start)"""
        return _DataModel.SensorLocation_setStart(self, *args)

    def start(self):
        """start(SensorLocation self) -> Time"""
        return _DataModel.SensorLocation_start(self)

    def setEnd(self, *args):
        """setEnd(SensorLocation self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.SensorLocation_setEnd(self, *args)

    def end(self):
        """end(SensorLocation self) -> Time"""
        return _DataModel.SensorLocation_end(self)

    def setLatitude(self, *args):
        """setLatitude(SensorLocation self, Seiscomp::Core::Optional< double >::Impl const & latitude)"""
        return _DataModel.SensorLocation_setLatitude(self, *args)

    def latitude(self):
        """latitude(SensorLocation self) -> double"""
        return _DataModel.SensorLocation_latitude(self)

    def setLongitude(self, *args):
        """setLongitude(SensorLocation self, Seiscomp::Core::Optional< double >::Impl const & longitude)"""
        return _DataModel.SensorLocation_setLongitude(self, *args)

    def longitude(self):
        """longitude(SensorLocation self) -> double"""
        return _DataModel.SensorLocation_longitude(self)

    def setElevation(self, *args):
        """setElevation(SensorLocation self, Seiscomp::Core::Optional< double >::Impl const & elevation)"""
        return _DataModel.SensorLocation_setElevation(self, *args)

    def elevation(self):
        """elevation(SensorLocation self) -> double"""
        return _DataModel.SensorLocation_elevation(self)

    def index(self):
        """index(SensorLocation self) -> SensorLocationIndex"""
        return _DataModel.SensorLocation_index(self)

    def equalIndex(self, *args):
        """equalIndex(SensorLocation self, SensorLocation lhs) -> bool"""
        return _DataModel.SensorLocation_equalIndex(self, *args)

    def add(self, *args):
        """
        add(SensorLocation self, AuxStream obj) -> bool
        add(SensorLocation self, Stream obj) -> bool
        """
        return _DataModel.SensorLocation_add(self, *args)

    def remove(self, *args):
        """
        remove(SensorLocation self, AuxStream obj) -> bool
        remove(SensorLocation self, Stream obj) -> bool
        """
        return _DataModel.SensorLocation_remove(self, *args)

    def removeAuxStream(self, *args):
        """
        removeAuxStream(SensorLocation self, size_t i) -> bool
        removeAuxStream(SensorLocation self, AuxStreamIndex i) -> bool
        """
        return _DataModel.SensorLocation_removeAuxStream(self, *args)

    def removeStream(self, *args):
        """
        removeStream(SensorLocation self, size_t i) -> bool
        removeStream(SensorLocation self, StreamIndex i) -> bool
        """
        return _DataModel.SensorLocation_removeStream(self, *args)

    def auxStreamCount(self):
        """auxStreamCount(SensorLocation self) -> size_t"""
        return _DataModel.SensorLocation_auxStreamCount(self)

    def streamCount(self):
        """streamCount(SensorLocation self) -> size_t"""
        return _DataModel.SensorLocation_streamCount(self)

    def auxStream(self, *args):
        """
        auxStream(SensorLocation self, size_t i) -> AuxStream
        auxStream(SensorLocation self, AuxStreamIndex i) -> AuxStream
        """
        return _DataModel.SensorLocation_auxStream(self, *args)

    def stream(self, *args):
        """
        stream(SensorLocation self, size_t i) -> Stream
        stream(SensorLocation self, StreamIndex i) -> Stream
        """
        return _DataModel.SensorLocation_stream(self, *args)

    def station(self):
        """station(SensorLocation self) -> Station"""
        return _DataModel.SensorLocation_station(self)

    def assign(self, *args):
        """assign(SensorLocation self, Object other) -> bool"""
        return _DataModel.SensorLocation_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(SensorLocation self, PublicObject parent) -> bool"""
        return _DataModel.SensorLocation_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(SensorLocation self, PublicObject parent) -> bool"""
        return _DataModel.SensorLocation_detachFrom(self, *args)

    def detach(self):
        """detach(SensorLocation self) -> bool"""
        return _DataModel.SensorLocation_detach(self)

    def clone(self):
        """clone(SensorLocation self) -> Object"""
        return _DataModel.SensorLocation_clone(self)

    def updateChild(self, *args):
        """updateChild(SensorLocation self, Object child) -> bool"""
        return _DataModel.SensorLocation_updateChild(self, *args)

    def accept(self, *args):
        """accept(SensorLocation self, Visitor arg2)"""
        return _DataModel.SensorLocation_accept(self, *args)

SensorLocation_swigregister = _DataModel.SensorLocation_swigregister
SensorLocation_swigregister(SensorLocation)

def SensorLocation_ClassName():
  """SensorLocation_ClassName() -> char const *"""
  return _DataModel.SensorLocation_ClassName()

def SensorLocation_TypeInfo():
  """SensorLocation_TypeInfo() -> RTTI"""
  return _DataModel.SensorLocation_TypeInfo()

def SensorLocation_Cast(*args):
  """
    Cast(BaseObject o) -> SensorLocation
    SensorLocation_Cast(Seiscomp::Core::BaseObjectPtr o) -> SensorLocation
    """
  return _DataModel.SensorLocation_Cast(*args)

def SensorLocation_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> SensorLocation
    SensorLocation_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> SensorLocation
    """
  return _DataModel.SensorLocation_ConstCast(*args)

def SensorLocation_Create(*args):
  """
    Create() -> SensorLocation
    SensorLocation_Create(std::string const & publicID) -> SensorLocation
    """
  return _DataModel.SensorLocation_Create(*args)

def SensorLocation_Find(*args):
  """SensorLocation_Find(std::string const & publicID) -> SensorLocation"""
  return _DataModel.SensorLocation_Find(*args)

class StationIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::StationIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationIndex self) -> StationIndex
        __init__(Seiscomp::DataModel::StationIndex self, std::string const & code, Time start) -> StationIndex
        __init__(Seiscomp::DataModel::StationIndex self, StationIndex arg2) -> StationIndex
        """
        this = _DataModel.new_StationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(StationIndex self, StationIndex arg2) -> bool"""
        return _DataModel.StationIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationIndex self, StationIndex arg2) -> bool"""
        return _DataModel.StationIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.StationIndex_code_set
    __swig_getmethods__["code"] = _DataModel.StationIndex_code_get
    if _newclass:code = _swig_property(_DataModel.StationIndex_code_get, _DataModel.StationIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.StationIndex_start_set
    __swig_getmethods__["start"] = _DataModel.StationIndex_start_get
    if _newclass:start = _swig_property(_DataModel.StationIndex_start_get, _DataModel.StationIndex_start_set)
    __swig_destroy__ = _DataModel.delete_StationIndex
    __del__ = lambda self : None;
StationIndex_swigregister = _DataModel.StationIndex_swigregister
StationIndex_swigregister(StationIndex)

class Station(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Station class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Station, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Station, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Station_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Station_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Station self) -> char const *"""
        return _DataModel.Station_className(self)

    def typeInfo(self):
        """typeInfo(Station self) -> RTTI"""
        return _DataModel.Station_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Station
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Station
        """
        return _DataModel.Station_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Station
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Station
        """
        return _DataModel.Station_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Station self, GenericArchive ar)"""
        return _DataModel.Station_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Station self, Station other) -> Station
        __init__(Seiscomp::DataModel::Station self, std::string const & publicID) -> Station
        """
        this = _DataModel.new_Station(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Station
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Station
        Create(std::string const & publicID) -> Station
        """
        return _DataModel.Station_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Station"""
        return _DataModel.Station_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Station self, Station other) -> bool"""
        return _DataModel.Station___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Station self, Station other) -> bool"""
        return _DataModel.Station___ne__(self, *args)

    def equal(self, *args):
        """equal(Station self, Station other) -> bool"""
        return _DataModel.Station_equal(self, *args)

    def setCode(self, *args):
        """setCode(Station self, std::string const & code)"""
        return _DataModel.Station_setCode(self, *args)

    def code(self):
        """code(Station self) -> std::string const &"""
        return _DataModel.Station_code(self)

    def setStart(self, *args):
        """setStart(Station self, Time start)"""
        return _DataModel.Station_setStart(self, *args)

    def start(self):
        """start(Station self) -> Time"""
        return _DataModel.Station_start(self)

    def setEnd(self, *args):
        """setEnd(Station self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.Station_setEnd(self, *args)

    def end(self):
        """end(Station self) -> Time"""
        return _DataModel.Station_end(self)

    def setDescription(self, *args):
        """setDescription(Station self, std::string const & description)"""
        return _DataModel.Station_setDescription(self, *args)

    def description(self):
        """description(Station self) -> std::string const &"""
        return _DataModel.Station_description(self)

    def setLatitude(self, *args):
        """setLatitude(Station self, Seiscomp::Core::Optional< double >::Impl const & latitude)"""
        return _DataModel.Station_setLatitude(self, *args)

    def latitude(self):
        """latitude(Station self) -> double"""
        return _DataModel.Station_latitude(self)

    def setLongitude(self, *args):
        """setLongitude(Station self, Seiscomp::Core::Optional< double >::Impl const & longitude)"""
        return _DataModel.Station_setLongitude(self, *args)

    def longitude(self):
        """longitude(Station self) -> double"""
        return _DataModel.Station_longitude(self)

    def setElevation(self, *args):
        """setElevation(Station self, Seiscomp::Core::Optional< double >::Impl const & elevation)"""
        return _DataModel.Station_setElevation(self, *args)

    def elevation(self):
        """elevation(Station self) -> double"""
        return _DataModel.Station_elevation(self)

    def setPlace(self, *args):
        """setPlace(Station self, std::string const & place)"""
        return _DataModel.Station_setPlace(self, *args)

    def place(self):
        """place(Station self) -> std::string const &"""
        return _DataModel.Station_place(self)

    def setCountry(self, *args):
        """setCountry(Station self, std::string const & country)"""
        return _DataModel.Station_setCountry(self, *args)

    def country(self):
        """country(Station self) -> std::string const &"""
        return _DataModel.Station_country(self)

    def setAffiliation(self, *args):
        """setAffiliation(Station self, std::string const & affiliation)"""
        return _DataModel.Station_setAffiliation(self, *args)

    def affiliation(self):
        """affiliation(Station self) -> std::string const &"""
        return _DataModel.Station_affiliation(self)

    def setType(self, *args):
        """setType(Station self, std::string const & type)"""
        return _DataModel.Station_setType(self, *args)

    def type(self):
        """type(Station self) -> std::string const &"""
        return _DataModel.Station_type(self)

    def setArchive(self, *args):
        """setArchive(Station self, std::string const & archive)"""
        return _DataModel.Station_setArchive(self, *args)

    def archive(self):
        """archive(Station self) -> std::string const &"""
        return _DataModel.Station_archive(self)

    def setArchiveNetworkCode(self, *args):
        """setArchiveNetworkCode(Station self, std::string const & archiveNetworkCode)"""
        return _DataModel.Station_setArchiveNetworkCode(self, *args)

    def archiveNetworkCode(self):
        """archiveNetworkCode(Station self) -> std::string const &"""
        return _DataModel.Station_archiveNetworkCode(self)

    def setRestricted(self, *args):
        """setRestricted(Station self, Seiscomp::Core::Optional< bool >::Impl const & restricted)"""
        return _DataModel.Station_setRestricted(self, *args)

    def restricted(self):
        """restricted(Station self) -> bool"""
        return _DataModel.Station_restricted(self)

    def setShared(self, *args):
        """setShared(Station self, Seiscomp::Core::Optional< bool >::Impl const & shared)"""
        return _DataModel.Station_setShared(self, *args)

    def shared(self):
        """shared(Station self) -> bool"""
        return _DataModel.Station_shared(self)

    def setRemark(self, *args):
        """setRemark(Station self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.Station_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(Station self) -> Blob
        remark(Station self) -> Blob
        """
        return _DataModel.Station_remark(self, *args)

    def index(self):
        """index(Station self) -> StationIndex"""
        return _DataModel.Station_index(self)

    def equalIndex(self, *args):
        """equalIndex(Station self, Station lhs) -> bool"""
        return _DataModel.Station_equalIndex(self, *args)

    def add(self, *args):
        """add(Station self, SensorLocation obj) -> bool"""
        return _DataModel.Station_add(self, *args)

    def remove(self, *args):
        """remove(Station self, SensorLocation obj) -> bool"""
        return _DataModel.Station_remove(self, *args)

    def removeSensorLocation(self, *args):
        """
        removeSensorLocation(Station self, size_t i) -> bool
        removeSensorLocation(Station self, SensorLocationIndex i) -> bool
        """
        return _DataModel.Station_removeSensorLocation(self, *args)

    def sensorLocationCount(self):
        """sensorLocationCount(Station self) -> size_t"""
        return _DataModel.Station_sensorLocationCount(self)

    def sensorLocation(self, *args):
        """
        sensorLocation(Station self, size_t i) -> SensorLocation
        sensorLocation(Station self, SensorLocationIndex i) -> SensorLocation
        """
        return _DataModel.Station_sensorLocation(self, *args)

    def findSensorLocation(self, *args):
        """findSensorLocation(Station self, std::string const & publicID) -> SensorLocation"""
        return _DataModel.Station_findSensorLocation(self, *args)

    def network(self):
        """network(Station self) -> Network"""
        return _DataModel.Station_network(self)

    def assign(self, *args):
        """assign(Station self, Object other) -> bool"""
        return _DataModel.Station_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Station self, PublicObject parent) -> bool"""
        return _DataModel.Station_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Station self, PublicObject parent) -> bool"""
        return _DataModel.Station_detachFrom(self, *args)

    def detach(self):
        """detach(Station self) -> bool"""
        return _DataModel.Station_detach(self)

    def clone(self):
        """clone(Station self) -> Object"""
        return _DataModel.Station_clone(self)

    def updateChild(self, *args):
        """updateChild(Station self, Object child) -> bool"""
        return _DataModel.Station_updateChild(self, *args)

    def accept(self, *args):
        """accept(Station self, Visitor arg2)"""
        return _DataModel.Station_accept(self, *args)

Station_swigregister = _DataModel.Station_swigregister
Station_swigregister(Station)

def Station_ClassName():
  """Station_ClassName() -> char const *"""
  return _DataModel.Station_ClassName()

def Station_TypeInfo():
  """Station_TypeInfo() -> RTTI"""
  return _DataModel.Station_TypeInfo()

def Station_Cast(*args):
  """
    Cast(BaseObject o) -> Station
    Station_Cast(Seiscomp::Core::BaseObjectPtr o) -> Station
    """
  return _DataModel.Station_Cast(*args)

def Station_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Station
    Station_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Station
    """
  return _DataModel.Station_ConstCast(*args)

def Station_Create(*args):
  """
    Create() -> Station
    Station_Create(std::string const & publicID) -> Station
    """
  return _DataModel.Station_Create(*args)

def Station_Find(*args):
  """Station_Find(std::string const & publicID) -> Station"""
  return _DataModel.Station_Find(*args)

class NetworkIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::NetworkIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::NetworkIndex self) -> NetworkIndex
        __init__(Seiscomp::DataModel::NetworkIndex self, std::string const & code, Time start) -> NetworkIndex
        __init__(Seiscomp::DataModel::NetworkIndex self, NetworkIndex arg2) -> NetworkIndex
        """
        this = _DataModel.new_NetworkIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(NetworkIndex self, NetworkIndex arg2) -> bool"""
        return _DataModel.NetworkIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(NetworkIndex self, NetworkIndex arg2) -> bool"""
        return _DataModel.NetworkIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.NetworkIndex_code_set
    __swig_getmethods__["code"] = _DataModel.NetworkIndex_code_get
    if _newclass:code = _swig_property(_DataModel.NetworkIndex_code_get, _DataModel.NetworkIndex_code_set)
    __swig_setmethods__["start"] = _DataModel.NetworkIndex_start_set
    __swig_getmethods__["start"] = _DataModel.NetworkIndex_start_get
    if _newclass:start = _swig_property(_DataModel.NetworkIndex_start_get, _DataModel.NetworkIndex_start_set)
    __swig_destroy__ = _DataModel.delete_NetworkIndex
    __del__ = lambda self : None;
NetworkIndex_swigregister = _DataModel.NetworkIndex_swigregister
NetworkIndex_swigregister(NetworkIndex)

class Network(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Network class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Network_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Network_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Network self) -> char const *"""
        return _DataModel.Network_className(self)

    def typeInfo(self):
        """typeInfo(Network self) -> RTTI"""
        return _DataModel.Network_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Network
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Network
        """
        return _DataModel.Network_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Network
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Network
        """
        return _DataModel.Network_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Network self, GenericArchive ar)"""
        return _DataModel.Network_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Network self, Network other) -> Network
        __init__(Seiscomp::DataModel::Network self, std::string const & publicID) -> Network
        """
        this = _DataModel.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Network
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Network
        Create(std::string const & publicID) -> Network
        """
        return _DataModel.Network_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Network"""
        return _DataModel.Network_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Network self, Network other) -> bool"""
        return _DataModel.Network___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Network self, Network other) -> bool"""
        return _DataModel.Network___ne__(self, *args)

    def equal(self, *args):
        """equal(Network self, Network other) -> bool"""
        return _DataModel.Network_equal(self, *args)

    def setCode(self, *args):
        """setCode(Network self, std::string const & code)"""
        return _DataModel.Network_setCode(self, *args)

    def code(self):
        """code(Network self) -> std::string const &"""
        return _DataModel.Network_code(self)

    def setStart(self, *args):
        """setStart(Network self, Time start)"""
        return _DataModel.Network_setStart(self, *args)

    def start(self):
        """start(Network self) -> Time"""
        return _DataModel.Network_start(self)

    def setEnd(self, *args):
        """setEnd(Network self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.Network_setEnd(self, *args)

    def end(self):
        """end(Network self) -> Time"""
        return _DataModel.Network_end(self)

    def setDescription(self, *args):
        """setDescription(Network self, std::string const & description)"""
        return _DataModel.Network_setDescription(self, *args)

    def description(self):
        """description(Network self) -> std::string const &"""
        return _DataModel.Network_description(self)

    def setInstitutions(self, *args):
        """setInstitutions(Network self, std::string const & institutions)"""
        return _DataModel.Network_setInstitutions(self, *args)

    def institutions(self):
        """institutions(Network self) -> std::string const &"""
        return _DataModel.Network_institutions(self)

    def setRegion(self, *args):
        """setRegion(Network self, std::string const & region)"""
        return _DataModel.Network_setRegion(self, *args)

    def region(self):
        """region(Network self) -> std::string const &"""
        return _DataModel.Network_region(self)

    def setType(self, *args):
        """setType(Network self, std::string const & type)"""
        return _DataModel.Network_setType(self, *args)

    def type(self):
        """type(Network self) -> std::string const &"""
        return _DataModel.Network_type(self)

    def setNetClass(self, *args):
        """setNetClass(Network self, std::string const & netClass)"""
        return _DataModel.Network_setNetClass(self, *args)

    def netClass(self):
        """netClass(Network self) -> std::string const &"""
        return _DataModel.Network_netClass(self)

    def setArchive(self, *args):
        """setArchive(Network self, std::string const & archive)"""
        return _DataModel.Network_setArchive(self, *args)

    def archive(self):
        """archive(Network self) -> std::string const &"""
        return _DataModel.Network_archive(self)

    def setRestricted(self, *args):
        """setRestricted(Network self, Seiscomp::Core::Optional< bool >::Impl const & restricted)"""
        return _DataModel.Network_setRestricted(self, *args)

    def restricted(self):
        """restricted(Network self) -> bool"""
        return _DataModel.Network_restricted(self)

    def setShared(self, *args):
        """setShared(Network self, Seiscomp::Core::Optional< bool >::Impl const & shared)"""
        return _DataModel.Network_setShared(self, *args)

    def shared(self):
        """shared(Network self) -> bool"""
        return _DataModel.Network_shared(self)

    def setRemark(self, *args):
        """setRemark(Network self, Seiscomp::Core::Optional< Seiscomp::DataModel::Blob >::Impl const & remark)"""
        return _DataModel.Network_setRemark(self, *args)

    def remark(self, *args):
        """
        remark(Network self) -> Blob
        remark(Network self) -> Blob
        """
        return _DataModel.Network_remark(self, *args)

    def index(self):
        """index(Network self) -> NetworkIndex"""
        return _DataModel.Network_index(self)

    def equalIndex(self, *args):
        """equalIndex(Network self, Network lhs) -> bool"""
        return _DataModel.Network_equalIndex(self, *args)

    def add(self, *args):
        """add(Network self, Station obj) -> bool"""
        return _DataModel.Network_add(self, *args)

    def remove(self, *args):
        """remove(Network self, Station obj) -> bool"""
        return _DataModel.Network_remove(self, *args)

    def removeStation(self, *args):
        """
        removeStation(Network self, size_t i) -> bool
        removeStation(Network self, StationIndex i) -> bool
        """
        return _DataModel.Network_removeStation(self, *args)

    def stationCount(self):
        """stationCount(Network self) -> size_t"""
        return _DataModel.Network_stationCount(self)

    def station(self, *args):
        """
        station(Network self, size_t i) -> Station
        station(Network self, StationIndex i) -> Station
        """
        return _DataModel.Network_station(self, *args)

    def findStation(self, *args):
        """findStation(Network self, std::string const & publicID) -> Station"""
        return _DataModel.Network_findStation(self, *args)

    def inventory(self):
        """inventory(Network self) -> Inventory"""
        return _DataModel.Network_inventory(self)

    def assign(self, *args):
        """assign(Network self, Object other) -> bool"""
        return _DataModel.Network_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Network self, PublicObject parent) -> bool"""
        return _DataModel.Network_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Network self, PublicObject parent) -> bool"""
        return _DataModel.Network_detachFrom(self, *args)

    def detach(self):
        """detach(Network self) -> bool"""
        return _DataModel.Network_detach(self)

    def clone(self):
        """clone(Network self) -> Object"""
        return _DataModel.Network_clone(self)

    def updateChild(self, *args):
        """updateChild(Network self, Object child) -> bool"""
        return _DataModel.Network_updateChild(self, *args)

    def accept(self, *args):
        """accept(Network self, Visitor arg2)"""
        return _DataModel.Network_accept(self, *args)

Network_swigregister = _DataModel.Network_swigregister
Network_swigregister(Network)

def Network_ClassName():
  """Network_ClassName() -> char const *"""
  return _DataModel.Network_ClassName()

def Network_TypeInfo():
  """Network_TypeInfo() -> RTTI"""
  return _DataModel.Network_TypeInfo()

def Network_Cast(*args):
  """
    Cast(BaseObject o) -> Network
    Network_Cast(Seiscomp::Core::BaseObjectPtr o) -> Network
    """
  return _DataModel.Network_Cast(*args)

def Network_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Network
    Network_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Network
    """
  return _DataModel.Network_ConstCast(*args)

def Network_Create(*args):
  """
    Create() -> Network
    Network_Create(std::string const & publicID) -> Network
    """
  return _DataModel.Network_Create(*args)

def Network_Find(*args):
  """Network_Find(std::string const & publicID) -> Network"""
  return _DataModel.Network_Find(*args)

class Inventory(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Inventory class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inventory, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Inventory, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Inventory_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Inventory_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Inventory self) -> char const *"""
        return _DataModel.Inventory_className(self)

    def typeInfo(self):
        """typeInfo(Inventory self) -> RTTI"""
        return _DataModel.Inventory_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Inventory
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Inventory
        """
        return _DataModel.Inventory_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Inventory
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Inventory
        """
        return _DataModel.Inventory_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Inventory self, GenericArchive ar)"""
        return _DataModel.Inventory_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Inventory self) -> Inventory
        __init__(Seiscomp::DataModel::Inventory self, Inventory other) -> Inventory
        """
        this = _DataModel.new_Inventory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Inventory
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Inventory self, Inventory other) -> bool"""
        return _DataModel.Inventory___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Inventory self, Inventory other) -> bool"""
        return _DataModel.Inventory___ne__(self, *args)

    def equal(self, *args):
        """equal(Inventory self, Inventory other) -> bool"""
        return _DataModel.Inventory_equal(self, *args)

    def add(self, *args):
        """
        add(Inventory self, StationGroup obj) -> bool
        add(Inventory self, AuxDevice obj) -> bool
        add(Inventory self, Sensor obj) -> bool
        add(Inventory self, Datalogger obj) -> bool
        add(Inventory self, ResponsePAZ obj) -> bool
        add(Inventory self, ResponseFIR obj) -> bool
        add(Inventory self, ResponsePolynomial obj) -> bool
        add(Inventory self, ResponseFAP obj) -> bool
        add(Inventory self, Network obj) -> bool
        """
        return _DataModel.Inventory_add(self, *args)

    def remove(self, *args):
        """
        remove(Inventory self, StationGroup obj) -> bool
        remove(Inventory self, AuxDevice obj) -> bool
        remove(Inventory self, Sensor obj) -> bool
        remove(Inventory self, Datalogger obj) -> bool
        remove(Inventory self, ResponsePAZ obj) -> bool
        remove(Inventory self, ResponseFIR obj) -> bool
        remove(Inventory self, ResponsePolynomial obj) -> bool
        remove(Inventory self, ResponseFAP obj) -> bool
        remove(Inventory self, Network obj) -> bool
        """
        return _DataModel.Inventory_remove(self, *args)

    def removeStationGroup(self, *args):
        """
        removeStationGroup(Inventory self, size_t i) -> bool
        removeStationGroup(Inventory self, StationGroupIndex i) -> bool
        """
        return _DataModel.Inventory_removeStationGroup(self, *args)

    def removeAuxDevice(self, *args):
        """
        removeAuxDevice(Inventory self, size_t i) -> bool
        removeAuxDevice(Inventory self, AuxDeviceIndex i) -> bool
        """
        return _DataModel.Inventory_removeAuxDevice(self, *args)

    def removeSensor(self, *args):
        """
        removeSensor(Inventory self, size_t i) -> bool
        removeSensor(Inventory self, SensorIndex i) -> bool
        """
        return _DataModel.Inventory_removeSensor(self, *args)

    def removeDatalogger(self, *args):
        """
        removeDatalogger(Inventory self, size_t i) -> bool
        removeDatalogger(Inventory self, DataloggerIndex i) -> bool
        """
        return _DataModel.Inventory_removeDatalogger(self, *args)

    def removeResponsePAZ(self, *args):
        """
        removeResponsePAZ(Inventory self, size_t i) -> bool
        removeResponsePAZ(Inventory self, ResponsePAZIndex i) -> bool
        """
        return _DataModel.Inventory_removeResponsePAZ(self, *args)

    def removeResponseFIR(self, *args):
        """
        removeResponseFIR(Inventory self, size_t i) -> bool
        removeResponseFIR(Inventory self, ResponseFIRIndex i) -> bool
        """
        return _DataModel.Inventory_removeResponseFIR(self, *args)

    def removeResponsePolynomial(self, *args):
        """
        removeResponsePolynomial(Inventory self, size_t i) -> bool
        removeResponsePolynomial(Inventory self, ResponsePolynomialIndex i) -> bool
        """
        return _DataModel.Inventory_removeResponsePolynomial(self, *args)

    def removeResponseFAP(self, *args):
        """
        removeResponseFAP(Inventory self, size_t i) -> bool
        removeResponseFAP(Inventory self, ResponseFAPIndex i) -> bool
        """
        return _DataModel.Inventory_removeResponseFAP(self, *args)

    def removeNetwork(self, *args):
        """
        removeNetwork(Inventory self, size_t i) -> bool
        removeNetwork(Inventory self, NetworkIndex i) -> bool
        """
        return _DataModel.Inventory_removeNetwork(self, *args)

    def stationGroupCount(self):
        """stationGroupCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_stationGroupCount(self)

    def auxDeviceCount(self):
        """auxDeviceCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_auxDeviceCount(self)

    def sensorCount(self):
        """sensorCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_sensorCount(self)

    def dataloggerCount(self):
        """dataloggerCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_dataloggerCount(self)

    def responsePAZCount(self):
        """responsePAZCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_responsePAZCount(self)

    def responseFIRCount(self):
        """responseFIRCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_responseFIRCount(self)

    def responsePolynomialCount(self):
        """responsePolynomialCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_responsePolynomialCount(self)

    def responseFAPCount(self):
        """responseFAPCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_responseFAPCount(self)

    def networkCount(self):
        """networkCount(Inventory self) -> size_t"""
        return _DataModel.Inventory_networkCount(self)

    def stationGroup(self, *args):
        """
        stationGroup(Inventory self, size_t i) -> StationGroup
        stationGroup(Inventory self, StationGroupIndex i) -> StationGroup
        """
        return _DataModel.Inventory_stationGroup(self, *args)

    def auxDevice(self, *args):
        """
        auxDevice(Inventory self, size_t i) -> AuxDevice
        auxDevice(Inventory self, AuxDeviceIndex i) -> AuxDevice
        """
        return _DataModel.Inventory_auxDevice(self, *args)

    def sensor(self, *args):
        """
        sensor(Inventory self, size_t i) -> Sensor
        sensor(Inventory self, SensorIndex i) -> Sensor
        """
        return _DataModel.Inventory_sensor(self, *args)

    def datalogger(self, *args):
        """
        datalogger(Inventory self, size_t i) -> Datalogger
        datalogger(Inventory self, DataloggerIndex i) -> Datalogger
        """
        return _DataModel.Inventory_datalogger(self, *args)

    def responsePAZ(self, *args):
        """
        responsePAZ(Inventory self, size_t i) -> ResponsePAZ
        responsePAZ(Inventory self, ResponsePAZIndex i) -> ResponsePAZ
        """
        return _DataModel.Inventory_responsePAZ(self, *args)

    def responseFIR(self, *args):
        """
        responseFIR(Inventory self, size_t i) -> ResponseFIR
        responseFIR(Inventory self, ResponseFIRIndex i) -> ResponseFIR
        """
        return _DataModel.Inventory_responseFIR(self, *args)

    def responsePolynomial(self, *args):
        """
        responsePolynomial(Inventory self, size_t i) -> ResponsePolynomial
        responsePolynomial(Inventory self, ResponsePolynomialIndex i) -> ResponsePolynomial
        """
        return _DataModel.Inventory_responsePolynomial(self, *args)

    def responseFAP(self, *args):
        """
        responseFAP(Inventory self, size_t i) -> ResponseFAP
        responseFAP(Inventory self, ResponseFAPIndex i) -> ResponseFAP
        """
        return _DataModel.Inventory_responseFAP(self, *args)

    def network(self, *args):
        """
        network(Inventory self, size_t i) -> Network
        network(Inventory self, NetworkIndex i) -> Network
        """
        return _DataModel.Inventory_network(self, *args)

    def findStationGroup(self, *args):
        """findStationGroup(Inventory self, std::string const & publicID) -> StationGroup"""
        return _DataModel.Inventory_findStationGroup(self, *args)

    def findAuxDevice(self, *args):
        """findAuxDevice(Inventory self, std::string const & publicID) -> AuxDevice"""
        return _DataModel.Inventory_findAuxDevice(self, *args)

    def findSensor(self, *args):
        """findSensor(Inventory self, std::string const & publicID) -> Sensor"""
        return _DataModel.Inventory_findSensor(self, *args)

    def findDatalogger(self, *args):
        """findDatalogger(Inventory self, std::string const & publicID) -> Datalogger"""
        return _DataModel.Inventory_findDatalogger(self, *args)

    def findResponsePAZ(self, *args):
        """findResponsePAZ(Inventory self, std::string const & publicID) -> ResponsePAZ"""
        return _DataModel.Inventory_findResponsePAZ(self, *args)

    def findResponseFIR(self, *args):
        """findResponseFIR(Inventory self, std::string const & publicID) -> ResponseFIR"""
        return _DataModel.Inventory_findResponseFIR(self, *args)

    def findResponsePolynomial(self, *args):
        """findResponsePolynomial(Inventory self, std::string const & publicID) -> ResponsePolynomial"""
        return _DataModel.Inventory_findResponsePolynomial(self, *args)

    def findResponseFAP(self, *args):
        """findResponseFAP(Inventory self, std::string const & publicID) -> ResponseFAP"""
        return _DataModel.Inventory_findResponseFAP(self, *args)

    def findNetwork(self, *args):
        """findNetwork(Inventory self, std::string const & publicID) -> Network"""
        return _DataModel.Inventory_findNetwork(self, *args)

    def assign(self, *args):
        """assign(Inventory self, Object other) -> bool"""
        return _DataModel.Inventory_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Inventory self, PublicObject parent) -> bool"""
        return _DataModel.Inventory_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Inventory self, PublicObject parent) -> bool"""
        return _DataModel.Inventory_detachFrom(self, *args)

    def detach(self):
        """detach(Inventory self) -> bool"""
        return _DataModel.Inventory_detach(self)

    def clone(self):
        """clone(Inventory self) -> Object"""
        return _DataModel.Inventory_clone(self)

    def updateChild(self, *args):
        """updateChild(Inventory self, Object child) -> bool"""
        return _DataModel.Inventory_updateChild(self, *args)

    def accept(self, *args):
        """accept(Inventory self, Visitor arg2)"""
        return _DataModel.Inventory_accept(self, *args)

Inventory_swigregister = _DataModel.Inventory_swigregister
Inventory_swigregister(Inventory)

def Inventory_ClassName():
  """Inventory_ClassName() -> char const *"""
  return _DataModel.Inventory_ClassName()

def Inventory_TypeInfo():
  """Inventory_TypeInfo() -> RTTI"""
  return _DataModel.Inventory_TypeInfo()

def Inventory_Cast(*args):
  """
    Cast(BaseObject o) -> Inventory
    Inventory_Cast(Seiscomp::Core::BaseObjectPtr o) -> Inventory
    """
  return _DataModel.Inventory_Cast(*args)

def Inventory_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Inventory
    Inventory_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Inventory
    """
  return _DataModel.Inventory_ConstCast(*args)

class EventDescriptionIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::EventDescriptionIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDescriptionIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventDescriptionIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::EventDescriptionIndex self) -> EventDescriptionIndex
        __init__(Seiscomp::DataModel::EventDescriptionIndex self, Seiscomp::DataModel::EventDescriptionType type) -> EventDescriptionIndex
        __init__(Seiscomp::DataModel::EventDescriptionIndex self, EventDescriptionIndex arg2) -> EventDescriptionIndex
        """
        this = _DataModel.new_EventDescriptionIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(EventDescriptionIndex self, EventDescriptionIndex arg2) -> bool"""
        return _DataModel.EventDescriptionIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(EventDescriptionIndex self, EventDescriptionIndex arg2) -> bool"""
        return _DataModel.EventDescriptionIndex___ne__(self, *args)

    __swig_setmethods__["type"] = _DataModel.EventDescriptionIndex_type_set
    __swig_getmethods__["type"] = _DataModel.EventDescriptionIndex_type_get
    if _newclass:type = _swig_property(_DataModel.EventDescriptionIndex_type_get, _DataModel.EventDescriptionIndex_type_set)
    __swig_destroy__ = _DataModel.delete_EventDescriptionIndex
    __del__ = lambda self : None;
EventDescriptionIndex_swigregister = _DataModel.EventDescriptionIndex_swigregister
EventDescriptionIndex_swigregister(EventDescriptionIndex)

class EventDescription(Object):
    """Proxy of C++ Seiscomp::DataModel::EventDescription class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDescription, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventDescription, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.EventDescription_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.EventDescription_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(EventDescription self) -> char const *"""
        return _DataModel.EventDescription_className(self)

    def typeInfo(self):
        """typeInfo(EventDescription self) -> RTTI"""
        return _DataModel.EventDescription_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> EventDescription
        Cast(Seiscomp::Core::BaseObjectPtr o) -> EventDescription
        """
        return _DataModel.EventDescription_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> EventDescription
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> EventDescription
        """
        return _DataModel.EventDescription_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(EventDescription self, GenericArchive ar)"""
        return _DataModel.EventDescription_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::EventDescription self) -> EventDescription
        __init__(Seiscomp::DataModel::EventDescription self, EventDescription other) -> EventDescription
        __init__(Seiscomp::DataModel::EventDescription self, std::string const & text) -> EventDescription
        __init__(Seiscomp::DataModel::EventDescription self, std::string const & text, Seiscomp::DataModel::EventDescriptionType type) -> EventDescription
        """
        this = _DataModel.new_EventDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_EventDescription
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(EventDescription self, EventDescription other) -> bool"""
        return _DataModel.EventDescription___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(EventDescription self, EventDescription other) -> bool"""
        return _DataModel.EventDescription___ne__(self, *args)

    def equal(self, *args):
        """equal(EventDescription self, EventDescription other) -> bool"""
        return _DataModel.EventDescription_equal(self, *args)

    def setText(self, *args):
        """setText(EventDescription self, std::string const & text)"""
        return _DataModel.EventDescription_setText(self, *args)

    def text(self):
        """text(EventDescription self) -> std::string const &"""
        return _DataModel.EventDescription_text(self)

    def setType(self, *args):
        """setType(EventDescription self, Seiscomp::DataModel::EventDescriptionType type)"""
        return _DataModel.EventDescription_setType(self, *args)

    def type(self):
        """type(EventDescription self) -> Seiscomp::DataModel::EventDescriptionType"""
        return _DataModel.EventDescription_type(self)

    def index(self):
        """index(EventDescription self) -> EventDescriptionIndex"""
        return _DataModel.EventDescription_index(self)

    def equalIndex(self, *args):
        """equalIndex(EventDescription self, EventDescription lhs) -> bool"""
        return _DataModel.EventDescription_equalIndex(self, *args)

    def event(self):
        """event(EventDescription self) -> Event"""
        return _DataModel.EventDescription_event(self)

    def assign(self, *args):
        """assign(EventDescription self, Object other) -> bool"""
        return _DataModel.EventDescription_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(EventDescription self, PublicObject parent) -> bool"""
        return _DataModel.EventDescription_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(EventDescription self, PublicObject parent) -> bool"""
        return _DataModel.EventDescription_detachFrom(self, *args)

    def detach(self):
        """detach(EventDescription self) -> bool"""
        return _DataModel.EventDescription_detach(self)

    def clone(self):
        """clone(EventDescription self) -> Object"""
        return _DataModel.EventDescription_clone(self)

    def accept(self, *args):
        """accept(EventDescription self, Visitor arg2)"""
        return _DataModel.EventDescription_accept(self, *args)

EventDescription_swigregister = _DataModel.EventDescription_swigregister
EventDescription_swigregister(EventDescription)

def EventDescription_ClassName():
  """EventDescription_ClassName() -> char const *"""
  return _DataModel.EventDescription_ClassName()

def EventDescription_TypeInfo():
  """EventDescription_TypeInfo() -> RTTI"""
  return _DataModel.EventDescription_TypeInfo()

def EventDescription_Cast(*args):
  """
    Cast(BaseObject o) -> EventDescription
    EventDescription_Cast(Seiscomp::Core::BaseObjectPtr o) -> EventDescription
    """
  return _DataModel.EventDescription_Cast(*args)

def EventDescription_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> EventDescription
    EventDescription_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> EventDescription
    """
  return _DataModel.EventDescription_ConstCast(*args)

class DataUsed(Object):
    """Proxy of C++ Seiscomp::DataModel::DataUsed class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataUsed, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataUsed, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.DataUsed_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.DataUsed_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(DataUsed self) -> char const *"""
        return _DataModel.DataUsed_className(self)

    def typeInfo(self):
        """typeInfo(DataUsed self) -> RTTI"""
        return _DataModel.DataUsed_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> DataUsed
        Cast(Seiscomp::Core::BaseObjectPtr o) -> DataUsed
        """
        return _DataModel.DataUsed_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> DataUsed
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> DataUsed
        """
        return _DataModel.DataUsed_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(DataUsed self, GenericArchive ar)"""
        return _DataModel.DataUsed_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::DataUsed self) -> DataUsed
        __init__(Seiscomp::DataModel::DataUsed self, DataUsed other) -> DataUsed
        """
        this = _DataModel.new_DataUsed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DataUsed
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(DataUsed self, DataUsed other) -> bool"""
        return _DataModel.DataUsed___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DataUsed self, DataUsed other) -> bool"""
        return _DataModel.DataUsed___ne__(self, *args)

    def equal(self, *args):
        """equal(DataUsed self, DataUsed other) -> bool"""
        return _DataModel.DataUsed_equal(self, *args)

    def setWaveType(self, *args):
        """setWaveType(DataUsed self, Seiscomp::DataModel::DataUsedWaveType waveType)"""
        return _DataModel.DataUsed_setWaveType(self, *args)

    def waveType(self):
        """waveType(DataUsed self) -> Seiscomp::DataModel::DataUsedWaveType"""
        return _DataModel.DataUsed_waveType(self)

    def setStationCount(self, *args):
        """setStationCount(DataUsed self, int stationCount)"""
        return _DataModel.DataUsed_setStationCount(self, *args)

    def stationCount(self):
        """stationCount(DataUsed self) -> int"""
        return _DataModel.DataUsed_stationCount(self)

    def setComponentCount(self, *args):
        """setComponentCount(DataUsed self, int componentCount)"""
        return _DataModel.DataUsed_setComponentCount(self, *args)

    def componentCount(self):
        """componentCount(DataUsed self) -> int"""
        return _DataModel.DataUsed_componentCount(self)

    def setShortestPeriod(self, *args):
        """setShortestPeriod(DataUsed self, Seiscomp::Core::Optional< double >::Impl const & shortestPeriod)"""
        return _DataModel.DataUsed_setShortestPeriod(self, *args)

    def shortestPeriod(self):
        """shortestPeriod(DataUsed self) -> double"""
        return _DataModel.DataUsed_shortestPeriod(self)

    def momentTensor(self):
        """momentTensor(DataUsed self) -> MomentTensor"""
        return _DataModel.DataUsed_momentTensor(self)

    def assign(self, *args):
        """assign(DataUsed self, Object other) -> bool"""
        return _DataModel.DataUsed_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(DataUsed self, PublicObject parent) -> bool"""
        return _DataModel.DataUsed_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(DataUsed self, PublicObject parent) -> bool"""
        return _DataModel.DataUsed_detachFrom(self, *args)

    def detach(self):
        """detach(DataUsed self) -> bool"""
        return _DataModel.DataUsed_detach(self)

    def clone(self):
        """clone(DataUsed self) -> Object"""
        return _DataModel.DataUsed_clone(self)

    def accept(self, *args):
        """accept(DataUsed self, Visitor arg2)"""
        return _DataModel.DataUsed_accept(self, *args)

DataUsed_swigregister = _DataModel.DataUsed_swigregister
DataUsed_swigregister(DataUsed)

def DataUsed_ClassName():
  """DataUsed_ClassName() -> char const *"""
  return _DataModel.DataUsed_ClassName()

def DataUsed_TypeInfo():
  """DataUsed_TypeInfo() -> RTTI"""
  return _DataModel.DataUsed_TypeInfo()

def DataUsed_Cast(*args):
  """
    Cast(BaseObject o) -> DataUsed
    DataUsed_Cast(Seiscomp::Core::BaseObjectPtr o) -> DataUsed
    """
  return _DataModel.DataUsed_Cast(*args)

def DataUsed_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> DataUsed
    DataUsed_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> DataUsed
    """
  return _DataModel.DataUsed_ConstCast(*args)

class CompositeTime(Object):
    """Proxy of C++ Seiscomp::DataModel::CompositeTime class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeTime, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeTime, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.CompositeTime_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.CompositeTime_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(CompositeTime self) -> char const *"""
        return _DataModel.CompositeTime_className(self)

    def typeInfo(self):
        """typeInfo(CompositeTime self) -> RTTI"""
        return _DataModel.CompositeTime_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> CompositeTime
        Cast(Seiscomp::Core::BaseObjectPtr o) -> CompositeTime
        """
        return _DataModel.CompositeTime_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> CompositeTime
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> CompositeTime
        """
        return _DataModel.CompositeTime_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(CompositeTime self, GenericArchive ar)"""
        return _DataModel.CompositeTime_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::CompositeTime self) -> CompositeTime
        __init__(Seiscomp::DataModel::CompositeTime self, CompositeTime other) -> CompositeTime
        """
        this = _DataModel.new_CompositeTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_CompositeTime
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(CompositeTime self, CompositeTime other) -> bool"""
        return _DataModel.CompositeTime___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(CompositeTime self, CompositeTime other) -> bool"""
        return _DataModel.CompositeTime___ne__(self, *args)

    def equal(self, *args):
        """equal(CompositeTime self, CompositeTime other) -> bool"""
        return _DataModel.CompositeTime_equal(self, *args)

    def setYear(self, *args):
        """setYear(CompositeTime self, Seiscomp::Core::Optional< Seiscomp::DataModel::IntegerQuantity >::Impl const & year)"""
        return _DataModel.CompositeTime_setYear(self, *args)

    def year(self, *args):
        """
        year(CompositeTime self) -> IntegerQuantity
        year(CompositeTime self) -> IntegerQuantity
        """
        return _DataModel.CompositeTime_year(self, *args)

    def setMonth(self, *args):
        """setMonth(CompositeTime self, Seiscomp::Core::Optional< Seiscomp::DataModel::IntegerQuantity >::Impl const & month)"""
        return _DataModel.CompositeTime_setMonth(self, *args)

    def month(self, *args):
        """
        month(CompositeTime self) -> IntegerQuantity
        month(CompositeTime self) -> IntegerQuantity
        """
        return _DataModel.CompositeTime_month(self, *args)

    def setDay(self, *args):
        """setDay(CompositeTime self, Seiscomp::Core::Optional< Seiscomp::DataModel::IntegerQuantity >::Impl const & day)"""
        return _DataModel.CompositeTime_setDay(self, *args)

    def day(self, *args):
        """
        day(CompositeTime self) -> IntegerQuantity
        day(CompositeTime self) -> IntegerQuantity
        """
        return _DataModel.CompositeTime_day(self, *args)

    def setHour(self, *args):
        """setHour(CompositeTime self, Seiscomp::Core::Optional< Seiscomp::DataModel::IntegerQuantity >::Impl const & hour)"""
        return _DataModel.CompositeTime_setHour(self, *args)

    def hour(self, *args):
        """
        hour(CompositeTime self) -> IntegerQuantity
        hour(CompositeTime self) -> IntegerQuantity
        """
        return _DataModel.CompositeTime_hour(self, *args)

    def setMinute(self, *args):
        """setMinute(CompositeTime self, Seiscomp::Core::Optional< Seiscomp::DataModel::IntegerQuantity >::Impl const & minute)"""
        return _DataModel.CompositeTime_setMinute(self, *args)

    def minute(self, *args):
        """
        minute(CompositeTime self) -> IntegerQuantity
        minute(CompositeTime self) -> IntegerQuantity
        """
        return _DataModel.CompositeTime_minute(self, *args)

    def setSecond(self, *args):
        """setSecond(CompositeTime self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & second)"""
        return _DataModel.CompositeTime_setSecond(self, *args)

    def second(self, *args):
        """
        second(CompositeTime self) -> RealQuantity
        second(CompositeTime self) -> RealQuantity
        """
        return _DataModel.CompositeTime_second(self, *args)

    def origin(self):
        """origin(CompositeTime self) -> Origin"""
        return _DataModel.CompositeTime_origin(self)

    def assign(self, *args):
        """assign(CompositeTime self, Object other) -> bool"""
        return _DataModel.CompositeTime_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(CompositeTime self, PublicObject parent) -> bool"""
        return _DataModel.CompositeTime_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(CompositeTime self, PublicObject parent) -> bool"""
        return _DataModel.CompositeTime_detachFrom(self, *args)

    def detach(self):
        """detach(CompositeTime self) -> bool"""
        return _DataModel.CompositeTime_detach(self)

    def clone(self):
        """clone(CompositeTime self) -> Object"""
        return _DataModel.CompositeTime_clone(self)

    def accept(self, *args):
        """accept(CompositeTime self, Visitor arg2)"""
        return _DataModel.CompositeTime_accept(self, *args)

CompositeTime_swigregister = _DataModel.CompositeTime_swigregister
CompositeTime_swigregister(CompositeTime)

def CompositeTime_ClassName():
  """CompositeTime_ClassName() -> char const *"""
  return _DataModel.CompositeTime_ClassName()

def CompositeTime_TypeInfo():
  """CompositeTime_TypeInfo() -> RTTI"""
  return _DataModel.CompositeTime_TypeInfo()

def CompositeTime_Cast(*args):
  """
    Cast(BaseObject o) -> CompositeTime
    CompositeTime_Cast(Seiscomp::Core::BaseObjectPtr o) -> CompositeTime
    """
  return _DataModel.CompositeTime_Cast(*args)

def CompositeTime_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> CompositeTime
    CompositeTime_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> CompositeTime
    """
  return _DataModel.CompositeTime_ConstCast(*args)

class PickReferenceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::PickReferenceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PickReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::PickReferenceIndex self) -> PickReferenceIndex
        __init__(Seiscomp::DataModel::PickReferenceIndex self, std::string const & pickID) -> PickReferenceIndex
        __init__(Seiscomp::DataModel::PickReferenceIndex self, PickReferenceIndex arg2) -> PickReferenceIndex
        """
        this = _DataModel.new_PickReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(PickReferenceIndex self, PickReferenceIndex arg2) -> bool"""
        return _DataModel.PickReferenceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(PickReferenceIndex self, PickReferenceIndex arg2) -> bool"""
        return _DataModel.PickReferenceIndex___ne__(self, *args)

    __swig_setmethods__["pickID"] = _DataModel.PickReferenceIndex_pickID_set
    __swig_getmethods__["pickID"] = _DataModel.PickReferenceIndex_pickID_get
    if _newclass:pickID = _swig_property(_DataModel.PickReferenceIndex_pickID_get, _DataModel.PickReferenceIndex_pickID_set)
    __swig_destroy__ = _DataModel.delete_PickReferenceIndex
    __del__ = lambda self : None;
PickReferenceIndex_swigregister = _DataModel.PickReferenceIndex_swigregister
PickReferenceIndex_swigregister(PickReferenceIndex)

class PickReference(Object):
    """Proxy of C++ Seiscomp::DataModel::PickReference class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickReference, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.PickReference_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.PickReference_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(PickReference self) -> char const *"""
        return _DataModel.PickReference_className(self)

    def typeInfo(self):
        """typeInfo(PickReference self) -> RTTI"""
        return _DataModel.PickReference_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> PickReference
        Cast(Seiscomp::Core::BaseObjectPtr o) -> PickReference
        """
        return _DataModel.PickReference_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> PickReference
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> PickReference
        """
        return _DataModel.PickReference_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(PickReference self, GenericArchive ar)"""
        return _DataModel.PickReference_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::PickReference self) -> PickReference
        __init__(Seiscomp::DataModel::PickReference self, PickReference other) -> PickReference
        __init__(Seiscomp::DataModel::PickReference self, std::string const & pickID) -> PickReference
        """
        this = _DataModel.new_PickReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_PickReference
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(PickReference self, PickReference other) -> bool"""
        return _DataModel.PickReference___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(PickReference self, PickReference other) -> bool"""
        return _DataModel.PickReference___ne__(self, *args)

    def equal(self, *args):
        """equal(PickReference self, PickReference other) -> bool"""
        return _DataModel.PickReference_equal(self, *args)

    def setPickID(self, *args):
        """setPickID(PickReference self, std::string const & pickID)"""
        return _DataModel.PickReference_setPickID(self, *args)

    def pickID(self):
        """pickID(PickReference self) -> std::string const &"""
        return _DataModel.PickReference_pickID(self)

    def index(self):
        """index(PickReference self) -> PickReferenceIndex"""
        return _DataModel.PickReference_index(self)

    def equalIndex(self, *args):
        """equalIndex(PickReference self, PickReference lhs) -> bool"""
        return _DataModel.PickReference_equalIndex(self, *args)

    def reading(self):
        """reading(PickReference self) -> Reading"""
        return _DataModel.PickReference_reading(self)

    def assign(self, *args):
        """assign(PickReference self, Object other) -> bool"""
        return _DataModel.PickReference_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(PickReference self, PublicObject parent) -> bool"""
        return _DataModel.PickReference_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(PickReference self, PublicObject parent) -> bool"""
        return _DataModel.PickReference_detachFrom(self, *args)

    def detach(self):
        """detach(PickReference self) -> bool"""
        return _DataModel.PickReference_detach(self)

    def clone(self):
        """clone(PickReference self) -> Object"""
        return _DataModel.PickReference_clone(self)

    def accept(self, *args):
        """accept(PickReference self, Visitor arg2)"""
        return _DataModel.PickReference_accept(self, *args)

PickReference_swigregister = _DataModel.PickReference_swigregister
PickReference_swigregister(PickReference)

def PickReference_ClassName():
  """PickReference_ClassName() -> char const *"""
  return _DataModel.PickReference_ClassName()

def PickReference_TypeInfo():
  """PickReference_TypeInfo() -> RTTI"""
  return _DataModel.PickReference_TypeInfo()

def PickReference_Cast(*args):
  """
    Cast(BaseObject o) -> PickReference
    PickReference_Cast(Seiscomp::Core::BaseObjectPtr o) -> PickReference
    """
  return _DataModel.PickReference_Cast(*args)

def PickReference_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> PickReference
    PickReference_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> PickReference
    """
  return _DataModel.PickReference_ConstCast(*args)

class AmplitudeReferenceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::AmplitudeReferenceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmplitudeReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AmplitudeReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AmplitudeReferenceIndex self) -> AmplitudeReferenceIndex
        __init__(Seiscomp::DataModel::AmplitudeReferenceIndex self, std::string const & amplitudeID) -> AmplitudeReferenceIndex
        __init__(Seiscomp::DataModel::AmplitudeReferenceIndex self, AmplitudeReferenceIndex arg2) -> AmplitudeReferenceIndex
        """
        this = _DataModel.new_AmplitudeReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(AmplitudeReferenceIndex self, AmplitudeReferenceIndex arg2) -> bool"""
        return _DataModel.AmplitudeReferenceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AmplitudeReferenceIndex self, AmplitudeReferenceIndex arg2) -> bool"""
        return _DataModel.AmplitudeReferenceIndex___ne__(self, *args)

    __swig_setmethods__["amplitudeID"] = _DataModel.AmplitudeReferenceIndex_amplitudeID_set
    __swig_getmethods__["amplitudeID"] = _DataModel.AmplitudeReferenceIndex_amplitudeID_get
    if _newclass:amplitudeID = _swig_property(_DataModel.AmplitudeReferenceIndex_amplitudeID_get, _DataModel.AmplitudeReferenceIndex_amplitudeID_set)
    __swig_destroy__ = _DataModel.delete_AmplitudeReferenceIndex
    __del__ = lambda self : None;
AmplitudeReferenceIndex_swigregister = _DataModel.AmplitudeReferenceIndex_swigregister
AmplitudeReferenceIndex_swigregister(AmplitudeReferenceIndex)

class AmplitudeReference(Object):
    """Proxy of C++ Seiscomp::DataModel::AmplitudeReference class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmplitudeReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmplitudeReference, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.AmplitudeReference_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.AmplitudeReference_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(AmplitudeReference self) -> char const *"""
        return _DataModel.AmplitudeReference_className(self)

    def typeInfo(self):
        """typeInfo(AmplitudeReference self) -> RTTI"""
        return _DataModel.AmplitudeReference_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> AmplitudeReference
        Cast(Seiscomp::Core::BaseObjectPtr o) -> AmplitudeReference
        """
        return _DataModel.AmplitudeReference_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> AmplitudeReference
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AmplitudeReference
        """
        return _DataModel.AmplitudeReference_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(AmplitudeReference self, GenericArchive ar)"""
        return _DataModel.AmplitudeReference_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AmplitudeReference self) -> AmplitudeReference
        __init__(Seiscomp::DataModel::AmplitudeReference self, AmplitudeReference other) -> AmplitudeReference
        __init__(Seiscomp::DataModel::AmplitudeReference self, std::string const & amplitudeID) -> AmplitudeReference
        """
        this = _DataModel.new_AmplitudeReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_AmplitudeReference
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(AmplitudeReference self, AmplitudeReference other) -> bool"""
        return _DataModel.AmplitudeReference___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AmplitudeReference self, AmplitudeReference other) -> bool"""
        return _DataModel.AmplitudeReference___ne__(self, *args)

    def equal(self, *args):
        """equal(AmplitudeReference self, AmplitudeReference other) -> bool"""
        return _DataModel.AmplitudeReference_equal(self, *args)

    def setAmplitudeID(self, *args):
        """setAmplitudeID(AmplitudeReference self, std::string const & amplitudeID)"""
        return _DataModel.AmplitudeReference_setAmplitudeID(self, *args)

    def amplitudeID(self):
        """amplitudeID(AmplitudeReference self) -> std::string const &"""
        return _DataModel.AmplitudeReference_amplitudeID(self)

    def index(self):
        """index(AmplitudeReference self) -> AmplitudeReferenceIndex"""
        return _DataModel.AmplitudeReference_index(self)

    def equalIndex(self, *args):
        """equalIndex(AmplitudeReference self, AmplitudeReference lhs) -> bool"""
        return _DataModel.AmplitudeReference_equalIndex(self, *args)

    def reading(self):
        """reading(AmplitudeReference self) -> Reading"""
        return _DataModel.AmplitudeReference_reading(self)

    def assign(self, *args):
        """assign(AmplitudeReference self, Object other) -> bool"""
        return _DataModel.AmplitudeReference_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(AmplitudeReference self, PublicObject parent) -> bool"""
        return _DataModel.AmplitudeReference_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(AmplitudeReference self, PublicObject parent) -> bool"""
        return _DataModel.AmplitudeReference_detachFrom(self, *args)

    def detach(self):
        """detach(AmplitudeReference self) -> bool"""
        return _DataModel.AmplitudeReference_detach(self)

    def clone(self):
        """clone(AmplitudeReference self) -> Object"""
        return _DataModel.AmplitudeReference_clone(self)

    def accept(self, *args):
        """accept(AmplitudeReference self, Visitor arg2)"""
        return _DataModel.AmplitudeReference_accept(self, *args)

AmplitudeReference_swigregister = _DataModel.AmplitudeReference_swigregister
AmplitudeReference_swigregister(AmplitudeReference)

def AmplitudeReference_ClassName():
  """AmplitudeReference_ClassName() -> char const *"""
  return _DataModel.AmplitudeReference_ClassName()

def AmplitudeReference_TypeInfo():
  """AmplitudeReference_TypeInfo() -> RTTI"""
  return _DataModel.AmplitudeReference_TypeInfo()

def AmplitudeReference_Cast(*args):
  """
    Cast(BaseObject o) -> AmplitudeReference
    AmplitudeReference_Cast(Seiscomp::Core::BaseObjectPtr o) -> AmplitudeReference
    """
  return _DataModel.AmplitudeReference_Cast(*args)

def AmplitudeReference_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> AmplitudeReference
    AmplitudeReference_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> AmplitudeReference
    """
  return _DataModel.AmplitudeReference_ConstCast(*args)

class Reading(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Reading class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reading, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reading, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Reading_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Reading_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Reading self) -> char const *"""
        return _DataModel.Reading_className(self)

    def typeInfo(self):
        """typeInfo(Reading self) -> RTTI"""
        return _DataModel.Reading_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Reading
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Reading
        """
        return _DataModel.Reading_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Reading
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Reading
        """
        return _DataModel.Reading_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Reading self, GenericArchive ar)"""
        return _DataModel.Reading_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Reading self, Reading other) -> Reading
        __init__(Seiscomp::DataModel::Reading self, std::string const & publicID) -> Reading
        """
        this = _DataModel.new_Reading(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Reading
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Reading
        Create(std::string const & publicID) -> Reading
        """
        return _DataModel.Reading_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Reading"""
        return _DataModel.Reading_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Reading self, Reading other) -> bool"""
        return _DataModel.Reading___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Reading self, Reading other) -> bool"""
        return _DataModel.Reading___ne__(self, *args)

    def equal(self, *args):
        """equal(Reading self, Reading other) -> bool"""
        return _DataModel.Reading_equal(self, *args)

    def add(self, *args):
        """
        add(Reading self, PickReference obj) -> bool
        add(Reading self, AmplitudeReference obj) -> bool
        """
        return _DataModel.Reading_add(self, *args)

    def remove(self, *args):
        """
        remove(Reading self, PickReference obj) -> bool
        remove(Reading self, AmplitudeReference obj) -> bool
        """
        return _DataModel.Reading_remove(self, *args)

    def removePickReference(self, *args):
        """
        removePickReference(Reading self, size_t i) -> bool
        removePickReference(Reading self, PickReferenceIndex i) -> bool
        """
        return _DataModel.Reading_removePickReference(self, *args)

    def removeAmplitudeReference(self, *args):
        """
        removeAmplitudeReference(Reading self, size_t i) -> bool
        removeAmplitudeReference(Reading self, AmplitudeReferenceIndex i) -> bool
        """
        return _DataModel.Reading_removeAmplitudeReference(self, *args)

    def pickReferenceCount(self):
        """pickReferenceCount(Reading self) -> size_t"""
        return _DataModel.Reading_pickReferenceCount(self)

    def amplitudeReferenceCount(self):
        """amplitudeReferenceCount(Reading self) -> size_t"""
        return _DataModel.Reading_amplitudeReferenceCount(self)

    def pickReference(self, *args):
        """
        pickReference(Reading self, size_t i) -> PickReference
        pickReference(Reading self, PickReferenceIndex i) -> PickReference
        """
        return _DataModel.Reading_pickReference(self, *args)

    def amplitudeReference(self, *args):
        """
        amplitudeReference(Reading self, size_t i) -> AmplitudeReference
        amplitudeReference(Reading self, AmplitudeReferenceIndex i) -> AmplitudeReference
        """
        return _DataModel.Reading_amplitudeReference(self, *args)

    def eventParameters(self):
        """eventParameters(Reading self) -> EventParameters"""
        return _DataModel.Reading_eventParameters(self)

    def assign(self, *args):
        """assign(Reading self, Object other) -> bool"""
        return _DataModel.Reading_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Reading self, PublicObject parent) -> bool"""
        return _DataModel.Reading_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Reading self, PublicObject parent) -> bool"""
        return _DataModel.Reading_detachFrom(self, *args)

    def detach(self):
        """detach(Reading self) -> bool"""
        return _DataModel.Reading_detach(self)

    def clone(self):
        """clone(Reading self) -> Object"""
        return _DataModel.Reading_clone(self)

    def updateChild(self, *args):
        """updateChild(Reading self, Object child) -> bool"""
        return _DataModel.Reading_updateChild(self, *args)

    def accept(self, *args):
        """accept(Reading self, Visitor arg2)"""
        return _DataModel.Reading_accept(self, *args)

Reading_swigregister = _DataModel.Reading_swigregister
Reading_swigregister(Reading)

def Reading_ClassName():
  """Reading_ClassName() -> char const *"""
  return _DataModel.Reading_ClassName()

def Reading_TypeInfo():
  """Reading_TypeInfo() -> RTTI"""
  return _DataModel.Reading_TypeInfo()

def Reading_Cast(*args):
  """
    Cast(BaseObject o) -> Reading
    Reading_Cast(Seiscomp::Core::BaseObjectPtr o) -> Reading
    """
  return _DataModel.Reading_Cast(*args)

def Reading_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Reading
    Reading_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Reading
    """
  return _DataModel.Reading_ConstCast(*args)

def Reading_Create(*args):
  """
    Create() -> Reading
    Reading_Create(std::string const & publicID) -> Reading
    """
  return _DataModel.Reading_Create(*args)

def Reading_Find(*args):
  """Reading_Find(std::string const & publicID) -> Reading"""
  return _DataModel.Reading_Find(*args)

class MomentTensorComponentContributionIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::MomentTensorComponentContributionIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorComponentContributionIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorComponentContributionIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::MomentTensorComponentContributionIndex self) -> MomentTensorComponentContributionIndex
        __init__(Seiscomp::DataModel::MomentTensorComponentContributionIndex self, std::string const & phaseCode, int component) -> MomentTensorComponentContributionIndex
        __init__(Seiscomp::DataModel::MomentTensorComponentContributionIndex self, MomentTensorComponentContributionIndex arg2) -> MomentTensorComponentContributionIndex
        """
        this = _DataModel.new_MomentTensorComponentContributionIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(MomentTensorComponentContributionIndex self, MomentTensorComponentContributionIndex arg2) -> bool"""
        return _DataModel.MomentTensorComponentContributionIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MomentTensorComponentContributionIndex self, MomentTensorComponentContributionIndex arg2) -> bool"""
        return _DataModel.MomentTensorComponentContributionIndex___ne__(self, *args)

    __swig_setmethods__["phaseCode"] = _DataModel.MomentTensorComponentContributionIndex_phaseCode_set
    __swig_getmethods__["phaseCode"] = _DataModel.MomentTensorComponentContributionIndex_phaseCode_get
    if _newclass:phaseCode = _swig_property(_DataModel.MomentTensorComponentContributionIndex_phaseCode_get, _DataModel.MomentTensorComponentContributionIndex_phaseCode_set)
    __swig_setmethods__["component"] = _DataModel.MomentTensorComponentContributionIndex_component_set
    __swig_getmethods__["component"] = _DataModel.MomentTensorComponentContributionIndex_component_get
    if _newclass:component = _swig_property(_DataModel.MomentTensorComponentContributionIndex_component_get, _DataModel.MomentTensorComponentContributionIndex_component_set)
    __swig_destroy__ = _DataModel.delete_MomentTensorComponentContributionIndex
    __del__ = lambda self : None;
MomentTensorComponentContributionIndex_swigregister = _DataModel.MomentTensorComponentContributionIndex_swigregister
MomentTensorComponentContributionIndex_swigregister(MomentTensorComponentContributionIndex)

class MomentTensorComponentContribution(Object):
    """Proxy of C++ Seiscomp::DataModel::MomentTensorComponentContribution class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorComponentContribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorComponentContribution, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.MomentTensorComponentContribution_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.MomentTensorComponentContribution_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(MomentTensorComponentContribution self) -> char const *"""
        return _DataModel.MomentTensorComponentContribution_className(self)

    def typeInfo(self):
        """typeInfo(MomentTensorComponentContribution self) -> RTTI"""
        return _DataModel.MomentTensorComponentContribution_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> MomentTensorComponentContribution
        Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensorComponentContribution
        """
        return _DataModel.MomentTensorComponentContribution_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> MomentTensorComponentContribution
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensorComponentContribution
        """
        return _DataModel.MomentTensorComponentContribution_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(MomentTensorComponentContribution self, GenericArchive ar)"""
        return _DataModel.MomentTensorComponentContribution_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::MomentTensorComponentContribution self) -> MomentTensorComponentContribution
        __init__(Seiscomp::DataModel::MomentTensorComponentContribution self, MomentTensorComponentContribution other) -> MomentTensorComponentContribution
        __init__(Seiscomp::DataModel::MomentTensorComponentContribution self, std::string const & phaseCode) -> MomentTensorComponentContribution
        __init__(Seiscomp::DataModel::MomentTensorComponentContribution self, std::string const & phaseCode, int component, bool active, double weight, double timeShift, 
            double dataTimeWindow, Seiscomp::Core::Optional< double >::Impl const & misfit, 
            Seiscomp::Core::Optional< double >::Impl const & snr) -> MomentTensorComponentContribution
        """
        this = _DataModel.new_MomentTensorComponentContribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensorComponentContribution
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(MomentTensorComponentContribution self, MomentTensorComponentContribution other) -> bool"""
        return _DataModel.MomentTensorComponentContribution___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MomentTensorComponentContribution self, MomentTensorComponentContribution other) -> bool"""
        return _DataModel.MomentTensorComponentContribution___ne__(self, *args)

    def equal(self, *args):
        """equal(MomentTensorComponentContribution self, MomentTensorComponentContribution other) -> bool"""
        return _DataModel.MomentTensorComponentContribution_equal(self, *args)

    def setPhaseCode(self, *args):
        """setPhaseCode(MomentTensorComponentContribution self, std::string const & phaseCode)"""
        return _DataModel.MomentTensorComponentContribution_setPhaseCode(self, *args)

    def phaseCode(self):
        """phaseCode(MomentTensorComponentContribution self) -> std::string const &"""
        return _DataModel.MomentTensorComponentContribution_phaseCode(self)

    def setComponent(self, *args):
        """setComponent(MomentTensorComponentContribution self, int component)"""
        return _DataModel.MomentTensorComponentContribution_setComponent(self, *args)

    def component(self):
        """component(MomentTensorComponentContribution self) -> int"""
        return _DataModel.MomentTensorComponentContribution_component(self)

    def setActive(self, *args):
        """setActive(MomentTensorComponentContribution self, bool active)"""
        return _DataModel.MomentTensorComponentContribution_setActive(self, *args)

    def active(self):
        """active(MomentTensorComponentContribution self) -> bool"""
        return _DataModel.MomentTensorComponentContribution_active(self)

    def setWeight(self, *args):
        """setWeight(MomentTensorComponentContribution self, double weight)"""
        return _DataModel.MomentTensorComponentContribution_setWeight(self, *args)

    def weight(self):
        """weight(MomentTensorComponentContribution self) -> double"""
        return _DataModel.MomentTensorComponentContribution_weight(self)

    def setTimeShift(self, *args):
        """setTimeShift(MomentTensorComponentContribution self, double timeShift)"""
        return _DataModel.MomentTensorComponentContribution_setTimeShift(self, *args)

    def timeShift(self):
        """timeShift(MomentTensorComponentContribution self) -> double"""
        return _DataModel.MomentTensorComponentContribution_timeShift(self)

    def setDataTimeWindow(self, *args):
        """setDataTimeWindow(MomentTensorComponentContribution self, vectord arg2)"""
        return _DataModel.MomentTensorComponentContribution_setDataTimeWindow(self, *args)

    def dataTimeWindow(self, *args):
        """
        dataTimeWindow(MomentTensorComponentContribution self) -> vectord
        dataTimeWindow(MomentTensorComponentContribution self) -> vectord
        """
        return _DataModel.MomentTensorComponentContribution_dataTimeWindow(self, *args)

    def setMisfit(self, *args):
        """setMisfit(MomentTensorComponentContribution self, Seiscomp::Core::Optional< double >::Impl const & misfit)"""
        return _DataModel.MomentTensorComponentContribution_setMisfit(self, *args)

    def misfit(self):
        """misfit(MomentTensorComponentContribution self) -> double"""
        return _DataModel.MomentTensorComponentContribution_misfit(self)

    def setSnr(self, *args):
        """setSnr(MomentTensorComponentContribution self, Seiscomp::Core::Optional< double >::Impl const & snr)"""
        return _DataModel.MomentTensorComponentContribution_setSnr(self, *args)

    def snr(self):
        """snr(MomentTensorComponentContribution self) -> double"""
        return _DataModel.MomentTensorComponentContribution_snr(self)

    def index(self):
        """index(MomentTensorComponentContribution self) -> MomentTensorComponentContributionIndex"""
        return _DataModel.MomentTensorComponentContribution_index(self)

    def equalIndex(self, *args):
        """equalIndex(MomentTensorComponentContribution self, MomentTensorComponentContribution lhs) -> bool"""
        return _DataModel.MomentTensorComponentContribution_equalIndex(self, *args)

    def momentTensorStationContribution(self):
        """momentTensorStationContribution(MomentTensorComponentContribution self) -> MomentTensorStationContribution"""
        return _DataModel.MomentTensorComponentContribution_momentTensorStationContribution(self)

    def assign(self, *args):
        """assign(MomentTensorComponentContribution self, Object other) -> bool"""
        return _DataModel.MomentTensorComponentContribution_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(MomentTensorComponentContribution self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensorComponentContribution_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(MomentTensorComponentContribution self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensorComponentContribution_detachFrom(self, *args)

    def detach(self):
        """detach(MomentTensorComponentContribution self) -> bool"""
        return _DataModel.MomentTensorComponentContribution_detach(self)

    def clone(self):
        """clone(MomentTensorComponentContribution self) -> Object"""
        return _DataModel.MomentTensorComponentContribution_clone(self)

    def accept(self, *args):
        """accept(MomentTensorComponentContribution self, Visitor arg2)"""
        return _DataModel.MomentTensorComponentContribution_accept(self, *args)

MomentTensorComponentContribution_swigregister = _DataModel.MomentTensorComponentContribution_swigregister
MomentTensorComponentContribution_swigregister(MomentTensorComponentContribution)

def MomentTensorComponentContribution_ClassName():
  """MomentTensorComponentContribution_ClassName() -> char const *"""
  return _DataModel.MomentTensorComponentContribution_ClassName()

def MomentTensorComponentContribution_TypeInfo():
  """MomentTensorComponentContribution_TypeInfo() -> RTTI"""
  return _DataModel.MomentTensorComponentContribution_TypeInfo()

def MomentTensorComponentContribution_Cast(*args):
  """
    Cast(BaseObject o) -> MomentTensorComponentContribution
    MomentTensorComponentContribution_Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensorComponentContribution
    """
  return _DataModel.MomentTensorComponentContribution_Cast(*args)

def MomentTensorComponentContribution_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> MomentTensorComponentContribution
    MomentTensorComponentContribution_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensorComponentContribution
    """
  return _DataModel.MomentTensorComponentContribution_ConstCast(*args)

class MomentTensorStationContribution(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::MomentTensorStationContribution class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorStationContribution, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorStationContribution, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.MomentTensorStationContribution_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.MomentTensorStationContribution_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(MomentTensorStationContribution self) -> char const *"""
        return _DataModel.MomentTensorStationContribution_className(self)

    def typeInfo(self):
        """typeInfo(MomentTensorStationContribution self) -> RTTI"""
        return _DataModel.MomentTensorStationContribution_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> MomentTensorStationContribution
        Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensorStationContribution
        """
        return _DataModel.MomentTensorStationContribution_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> MomentTensorStationContribution
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensorStationContribution
        """
        return _DataModel.MomentTensorStationContribution_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(MomentTensorStationContribution self, GenericArchive ar)"""
        return _DataModel.MomentTensorStationContribution_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::MomentTensorStationContribution self, MomentTensorStationContribution other) -> MomentTensorStationContribution
        __init__(Seiscomp::DataModel::MomentTensorStationContribution self, std::string const & publicID) -> MomentTensorStationContribution
        """
        this = _DataModel.new_MomentTensorStationContribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensorStationContribution
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> MomentTensorStationContribution
        Create(std::string const & publicID) -> MomentTensorStationContribution
        """
        return _DataModel.MomentTensorStationContribution_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> MomentTensorStationContribution"""
        return _DataModel.MomentTensorStationContribution_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(MomentTensorStationContribution self, MomentTensorStationContribution other) -> bool"""
        return _DataModel.MomentTensorStationContribution___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MomentTensorStationContribution self, MomentTensorStationContribution other) -> bool"""
        return _DataModel.MomentTensorStationContribution___ne__(self, *args)

    def equal(self, *args):
        """equal(MomentTensorStationContribution self, MomentTensorStationContribution other) -> bool"""
        return _DataModel.MomentTensorStationContribution_equal(self, *args)

    def setActive(self, *args):
        """setActive(MomentTensorStationContribution self, bool active)"""
        return _DataModel.MomentTensorStationContribution_setActive(self, *args)

    def active(self):
        """active(MomentTensorStationContribution self) -> bool"""
        return _DataModel.MomentTensorStationContribution_active(self)

    def setWaveformID(self, *args):
        """setWaveformID(MomentTensorStationContribution self, Seiscomp::Core::Optional< Seiscomp::DataModel::WaveformStreamID >::Impl const & waveformID)"""
        return _DataModel.MomentTensorStationContribution_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(MomentTensorStationContribution self) -> WaveformStreamID
        waveformID(MomentTensorStationContribution self) -> WaveformStreamID
        """
        return _DataModel.MomentTensorStationContribution_waveformID(self, *args)

    def setWeight(self, *args):
        """setWeight(MomentTensorStationContribution self, Seiscomp::Core::Optional< double >::Impl const & weight)"""
        return _DataModel.MomentTensorStationContribution_setWeight(self, *args)

    def weight(self):
        """weight(MomentTensorStationContribution self) -> double"""
        return _DataModel.MomentTensorStationContribution_weight(self)

    def setTimeShift(self, *args):
        """setTimeShift(MomentTensorStationContribution self, Seiscomp::Core::Optional< double >::Impl const & timeShift)"""
        return _DataModel.MomentTensorStationContribution_setTimeShift(self, *args)

    def timeShift(self):
        """timeShift(MomentTensorStationContribution self) -> double"""
        return _DataModel.MomentTensorStationContribution_timeShift(self)

    def add(self, *args):
        """add(MomentTensorStationContribution self, MomentTensorComponentContribution obj) -> bool"""
        return _DataModel.MomentTensorStationContribution_add(self, *args)

    def remove(self, *args):
        """remove(MomentTensorStationContribution self, MomentTensorComponentContribution obj) -> bool"""
        return _DataModel.MomentTensorStationContribution_remove(self, *args)

    def removeMomentTensorComponentContribution(self, *args):
        """
        removeMomentTensorComponentContribution(MomentTensorStationContribution self, size_t i) -> bool
        removeMomentTensorComponentContribution(MomentTensorStationContribution self, MomentTensorComponentContributionIndex i) -> bool
        """
        return _DataModel.MomentTensorStationContribution_removeMomentTensorComponentContribution(self, *args)

    def momentTensorComponentContributionCount(self):
        """momentTensorComponentContributionCount(MomentTensorStationContribution self) -> size_t"""
        return _DataModel.MomentTensorStationContribution_momentTensorComponentContributionCount(self)

    def momentTensorComponentContribution(self, *args):
        """
        momentTensorComponentContribution(MomentTensorStationContribution self, size_t i) -> MomentTensorComponentContribution
        momentTensorComponentContribution(MomentTensorStationContribution self, MomentTensorComponentContributionIndex i) -> MomentTensorComponentContribution
        """
        return _DataModel.MomentTensorStationContribution_momentTensorComponentContribution(self, *args)

    def momentTensor(self):
        """momentTensor(MomentTensorStationContribution self) -> MomentTensor"""
        return _DataModel.MomentTensorStationContribution_momentTensor(self)

    def assign(self, *args):
        """assign(MomentTensorStationContribution self, Object other) -> bool"""
        return _DataModel.MomentTensorStationContribution_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(MomentTensorStationContribution self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensorStationContribution_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(MomentTensorStationContribution self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensorStationContribution_detachFrom(self, *args)

    def detach(self):
        """detach(MomentTensorStationContribution self) -> bool"""
        return _DataModel.MomentTensorStationContribution_detach(self)

    def clone(self):
        """clone(MomentTensorStationContribution self) -> Object"""
        return _DataModel.MomentTensorStationContribution_clone(self)

    def updateChild(self, *args):
        """updateChild(MomentTensorStationContribution self, Object child) -> bool"""
        return _DataModel.MomentTensorStationContribution_updateChild(self, *args)

    def accept(self, *args):
        """accept(MomentTensorStationContribution self, Visitor arg2)"""
        return _DataModel.MomentTensorStationContribution_accept(self, *args)

MomentTensorStationContribution_swigregister = _DataModel.MomentTensorStationContribution_swigregister
MomentTensorStationContribution_swigregister(MomentTensorStationContribution)

def MomentTensorStationContribution_ClassName():
  """MomentTensorStationContribution_ClassName() -> char const *"""
  return _DataModel.MomentTensorStationContribution_ClassName()

def MomentTensorStationContribution_TypeInfo():
  """MomentTensorStationContribution_TypeInfo() -> RTTI"""
  return _DataModel.MomentTensorStationContribution_TypeInfo()

def MomentTensorStationContribution_Cast(*args):
  """
    Cast(BaseObject o) -> MomentTensorStationContribution
    MomentTensorStationContribution_Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensorStationContribution
    """
  return _DataModel.MomentTensorStationContribution_Cast(*args)

def MomentTensorStationContribution_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> MomentTensorStationContribution
    MomentTensorStationContribution_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensorStationContribution
    """
  return _DataModel.MomentTensorStationContribution_ConstCast(*args)

def MomentTensorStationContribution_Create(*args):
  """
    Create() -> MomentTensorStationContribution
    MomentTensorStationContribution_Create(std::string const & publicID) -> MomentTensorStationContribution
    """
  return _DataModel.MomentTensorStationContribution_Create(*args)

def MomentTensorStationContribution_Find(*args):
  """MomentTensorStationContribution_Find(std::string const & publicID) -> MomentTensorStationContribution"""
  return _DataModel.MomentTensorStationContribution_Find(*args)

class MomentTensorPhaseSettingIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::MomentTensorPhaseSettingIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorPhaseSettingIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorPhaseSettingIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::MomentTensorPhaseSettingIndex self) -> MomentTensorPhaseSettingIndex
        __init__(Seiscomp::DataModel::MomentTensorPhaseSettingIndex self, std::string const & code) -> MomentTensorPhaseSettingIndex
        __init__(Seiscomp::DataModel::MomentTensorPhaseSettingIndex self, MomentTensorPhaseSettingIndex arg2) -> MomentTensorPhaseSettingIndex
        """
        this = _DataModel.new_MomentTensorPhaseSettingIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(MomentTensorPhaseSettingIndex self, MomentTensorPhaseSettingIndex arg2) -> bool"""
        return _DataModel.MomentTensorPhaseSettingIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MomentTensorPhaseSettingIndex self, MomentTensorPhaseSettingIndex arg2) -> bool"""
        return _DataModel.MomentTensorPhaseSettingIndex___ne__(self, *args)

    __swig_setmethods__["code"] = _DataModel.MomentTensorPhaseSettingIndex_code_set
    __swig_getmethods__["code"] = _DataModel.MomentTensorPhaseSettingIndex_code_get
    if _newclass:code = _swig_property(_DataModel.MomentTensorPhaseSettingIndex_code_get, _DataModel.MomentTensorPhaseSettingIndex_code_set)
    __swig_destroy__ = _DataModel.delete_MomentTensorPhaseSettingIndex
    __del__ = lambda self : None;
MomentTensorPhaseSettingIndex_swigregister = _DataModel.MomentTensorPhaseSettingIndex_swigregister
MomentTensorPhaseSettingIndex_swigregister(MomentTensorPhaseSettingIndex)

class MomentTensorPhaseSetting(Object):
    """Proxy of C++ Seiscomp::DataModel::MomentTensorPhaseSetting class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensorPhaseSetting, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensorPhaseSetting, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.MomentTensorPhaseSetting_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.MomentTensorPhaseSetting_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(MomentTensorPhaseSetting self) -> char const *"""
        return _DataModel.MomentTensorPhaseSetting_className(self)

    def typeInfo(self):
        """typeInfo(MomentTensorPhaseSetting self) -> RTTI"""
        return _DataModel.MomentTensorPhaseSetting_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> MomentTensorPhaseSetting
        Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensorPhaseSetting
        """
        return _DataModel.MomentTensorPhaseSetting_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> MomentTensorPhaseSetting
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensorPhaseSetting
        """
        return _DataModel.MomentTensorPhaseSetting_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(MomentTensorPhaseSetting self, GenericArchive ar)"""
        return _DataModel.MomentTensorPhaseSetting_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::MomentTensorPhaseSetting self) -> MomentTensorPhaseSetting
        __init__(Seiscomp::DataModel::MomentTensorPhaseSetting self, MomentTensorPhaseSetting other) -> MomentTensorPhaseSetting
        __init__(Seiscomp::DataModel::MomentTensorPhaseSetting self, std::string const & code) -> MomentTensorPhaseSetting
        __init__(Seiscomp::DataModel::MomentTensorPhaseSetting self, std::string const & code, double lowerPeriod, double upperPeriod, Seiscomp::Core::Optional< double >::Impl const & minimumSNR, 
            Seiscomp::Core::Optional< double >::Impl const & maximumTimeShift) -> MomentTensorPhaseSetting
        """
        this = _DataModel.new_MomentTensorPhaseSetting(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensorPhaseSetting
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(MomentTensorPhaseSetting self, MomentTensorPhaseSetting other) -> bool"""
        return _DataModel.MomentTensorPhaseSetting___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MomentTensorPhaseSetting self, MomentTensorPhaseSetting other) -> bool"""
        return _DataModel.MomentTensorPhaseSetting___ne__(self, *args)

    def equal(self, *args):
        """equal(MomentTensorPhaseSetting self, MomentTensorPhaseSetting other) -> bool"""
        return _DataModel.MomentTensorPhaseSetting_equal(self, *args)

    def setCode(self, *args):
        """setCode(MomentTensorPhaseSetting self, std::string const & code)"""
        return _DataModel.MomentTensorPhaseSetting_setCode(self, *args)

    def code(self):
        """code(MomentTensorPhaseSetting self) -> std::string const &"""
        return _DataModel.MomentTensorPhaseSetting_code(self)

    def setLowerPeriod(self, *args):
        """setLowerPeriod(MomentTensorPhaseSetting self, double lowerPeriod)"""
        return _DataModel.MomentTensorPhaseSetting_setLowerPeriod(self, *args)

    def lowerPeriod(self):
        """lowerPeriod(MomentTensorPhaseSetting self) -> double"""
        return _DataModel.MomentTensorPhaseSetting_lowerPeriod(self)

    def setUpperPeriod(self, *args):
        """setUpperPeriod(MomentTensorPhaseSetting self, double upperPeriod)"""
        return _DataModel.MomentTensorPhaseSetting_setUpperPeriod(self, *args)

    def upperPeriod(self):
        """upperPeriod(MomentTensorPhaseSetting self) -> double"""
        return _DataModel.MomentTensorPhaseSetting_upperPeriod(self)

    def setMinimumSNR(self, *args):
        """setMinimumSNR(MomentTensorPhaseSetting self, Seiscomp::Core::Optional< double >::Impl const & minimumSNR)"""
        return _DataModel.MomentTensorPhaseSetting_setMinimumSNR(self, *args)

    def minimumSNR(self):
        """minimumSNR(MomentTensorPhaseSetting self) -> double"""
        return _DataModel.MomentTensorPhaseSetting_minimumSNR(self)

    def setMaximumTimeShift(self, *args):
        """setMaximumTimeShift(MomentTensorPhaseSetting self, Seiscomp::Core::Optional< double >::Impl const & maximumTimeShift)"""
        return _DataModel.MomentTensorPhaseSetting_setMaximumTimeShift(self, *args)

    def maximumTimeShift(self):
        """maximumTimeShift(MomentTensorPhaseSetting self) -> double"""
        return _DataModel.MomentTensorPhaseSetting_maximumTimeShift(self)

    def index(self):
        """index(MomentTensorPhaseSetting self) -> MomentTensorPhaseSettingIndex"""
        return _DataModel.MomentTensorPhaseSetting_index(self)

    def equalIndex(self, *args):
        """equalIndex(MomentTensorPhaseSetting self, MomentTensorPhaseSetting lhs) -> bool"""
        return _DataModel.MomentTensorPhaseSetting_equalIndex(self, *args)

    def momentTensor(self):
        """momentTensor(MomentTensorPhaseSetting self) -> MomentTensor"""
        return _DataModel.MomentTensorPhaseSetting_momentTensor(self)

    def assign(self, *args):
        """assign(MomentTensorPhaseSetting self, Object other) -> bool"""
        return _DataModel.MomentTensorPhaseSetting_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(MomentTensorPhaseSetting self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensorPhaseSetting_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(MomentTensorPhaseSetting self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensorPhaseSetting_detachFrom(self, *args)

    def detach(self):
        """detach(MomentTensorPhaseSetting self) -> bool"""
        return _DataModel.MomentTensorPhaseSetting_detach(self)

    def clone(self):
        """clone(MomentTensorPhaseSetting self) -> Object"""
        return _DataModel.MomentTensorPhaseSetting_clone(self)

    def accept(self, *args):
        """accept(MomentTensorPhaseSetting self, Visitor arg2)"""
        return _DataModel.MomentTensorPhaseSetting_accept(self, *args)

MomentTensorPhaseSetting_swigregister = _DataModel.MomentTensorPhaseSetting_swigregister
MomentTensorPhaseSetting_swigregister(MomentTensorPhaseSetting)

def MomentTensorPhaseSetting_ClassName():
  """MomentTensorPhaseSetting_ClassName() -> char const *"""
  return _DataModel.MomentTensorPhaseSetting_ClassName()

def MomentTensorPhaseSetting_TypeInfo():
  """MomentTensorPhaseSetting_TypeInfo() -> RTTI"""
  return _DataModel.MomentTensorPhaseSetting_TypeInfo()

def MomentTensorPhaseSetting_Cast(*args):
  """
    Cast(BaseObject o) -> MomentTensorPhaseSetting
    MomentTensorPhaseSetting_Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensorPhaseSetting
    """
  return _DataModel.MomentTensorPhaseSetting_Cast(*args)

def MomentTensorPhaseSetting_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> MomentTensorPhaseSetting
    MomentTensorPhaseSetting_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensorPhaseSetting
    """
  return _DataModel.MomentTensorPhaseSetting_ConstCast(*args)

class MomentTensor(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::MomentTensor class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentTensor, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentTensor, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.MomentTensor_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.MomentTensor_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(MomentTensor self) -> char const *"""
        return _DataModel.MomentTensor_className(self)

    def typeInfo(self):
        """typeInfo(MomentTensor self) -> RTTI"""
        return _DataModel.MomentTensor_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> MomentTensor
        Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensor
        """
        return _DataModel.MomentTensor_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> MomentTensor
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensor
        """
        return _DataModel.MomentTensor_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(MomentTensor self, GenericArchive ar)"""
        return _DataModel.MomentTensor_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::MomentTensor self, MomentTensor other) -> MomentTensor
        __init__(Seiscomp::DataModel::MomentTensor self, std::string const & publicID) -> MomentTensor
        """
        this = _DataModel.new_MomentTensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_MomentTensor
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> MomentTensor
        Create(std::string const & publicID) -> MomentTensor
        """
        return _DataModel.MomentTensor_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> MomentTensor"""
        return _DataModel.MomentTensor_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(MomentTensor self, MomentTensor other) -> bool"""
        return _DataModel.MomentTensor___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(MomentTensor self, MomentTensor other) -> bool"""
        return _DataModel.MomentTensor___ne__(self, *args)

    def equal(self, *args):
        """equal(MomentTensor self, MomentTensor other) -> bool"""
        return _DataModel.MomentTensor_equal(self, *args)

    def setDerivedOriginID(self, *args):
        """setDerivedOriginID(MomentTensor self, std::string const & derivedOriginID)"""
        return _DataModel.MomentTensor_setDerivedOriginID(self, *args)

    def derivedOriginID(self):
        """derivedOriginID(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_derivedOriginID(self)

    def setMomentMagnitudeID(self, *args):
        """setMomentMagnitudeID(MomentTensor self, std::string const & momentMagnitudeID)"""
        return _DataModel.MomentTensor_setMomentMagnitudeID(self, *args)

    def momentMagnitudeID(self):
        """momentMagnitudeID(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_momentMagnitudeID(self)

    def setScalarMoment(self, *args):
        """setScalarMoment(MomentTensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & scalarMoment)"""
        return _DataModel.MomentTensor_setScalarMoment(self, *args)

    def scalarMoment(self, *args):
        """
        scalarMoment(MomentTensor self) -> RealQuantity
        scalarMoment(MomentTensor self) -> RealQuantity
        """
        return _DataModel.MomentTensor_scalarMoment(self, *args)

    def setTensor(self, *args):
        """setTensor(MomentTensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::Tensor >::Impl const & tensor)"""
        return _DataModel.MomentTensor_setTensor(self, *args)

    def tensor(self, *args):
        """
        tensor(MomentTensor self) -> Tensor
        tensor(MomentTensor self) -> Tensor
        """
        return _DataModel.MomentTensor_tensor(self, *args)

    def setVariance(self, *args):
        """setVariance(MomentTensor self, Seiscomp::Core::Optional< double >::Impl const & variance)"""
        return _DataModel.MomentTensor_setVariance(self, *args)

    def variance(self):
        """variance(MomentTensor self) -> double"""
        return _DataModel.MomentTensor_variance(self)

    def setVarianceReduction(self, *args):
        """setVarianceReduction(MomentTensor self, Seiscomp::Core::Optional< double >::Impl const & varianceReduction)"""
        return _DataModel.MomentTensor_setVarianceReduction(self, *args)

    def varianceReduction(self):
        """varianceReduction(MomentTensor self) -> double"""
        return _DataModel.MomentTensor_varianceReduction(self)

    def setDoubleCouple(self, *args):
        """setDoubleCouple(MomentTensor self, Seiscomp::Core::Optional< double >::Impl const & doubleCouple)"""
        return _DataModel.MomentTensor_setDoubleCouple(self, *args)

    def doubleCouple(self):
        """doubleCouple(MomentTensor self) -> double"""
        return _DataModel.MomentTensor_doubleCouple(self)

    def setClvd(self, *args):
        """setClvd(MomentTensor self, Seiscomp::Core::Optional< double >::Impl const & clvd)"""
        return _DataModel.MomentTensor_setClvd(self, *args)

    def clvd(self):
        """clvd(MomentTensor self) -> double"""
        return _DataModel.MomentTensor_clvd(self)

    def setIso(self, *args):
        """setIso(MomentTensor self, Seiscomp::Core::Optional< double >::Impl const & iso)"""
        return _DataModel.MomentTensor_setIso(self, *args)

    def iso(self):
        """iso(MomentTensor self) -> double"""
        return _DataModel.MomentTensor_iso(self)

    def setGreensFunctionID(self, *args):
        """setGreensFunctionID(MomentTensor self, std::string const & greensFunctionID)"""
        return _DataModel.MomentTensor_setGreensFunctionID(self, *args)

    def greensFunctionID(self):
        """greensFunctionID(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_greensFunctionID(self)

    def setFilterID(self, *args):
        """setFilterID(MomentTensor self, std::string const & filterID)"""
        return _DataModel.MomentTensor_setFilterID(self, *args)

    def filterID(self):
        """filterID(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_filterID(self)

    def setSourceTimeFunction(self, *args):
        """setSourceTimeFunction(MomentTensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::SourceTimeFunction >::Impl const & sourceTimeFunction)"""
        return _DataModel.MomentTensor_setSourceTimeFunction(self, *args)

    def sourceTimeFunction(self, *args):
        """
        sourceTimeFunction(MomentTensor self) -> SourceTimeFunction
        sourceTimeFunction(MomentTensor self) -> SourceTimeFunction
        """
        return _DataModel.MomentTensor_sourceTimeFunction(self, *args)

    def setMethodID(self, *args):
        """setMethodID(MomentTensor self, std::string const & methodID)"""
        return _DataModel.MomentTensor_setMethodID(self, *args)

    def methodID(self):
        """methodID(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_methodID(self)

    def setMethod(self, *args):
        """setMethod(MomentTensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::MomentTensorMethod >::Impl const & method)"""
        return _DataModel.MomentTensor_setMethod(self, *args)

    def method(self):
        """method(MomentTensor self) -> Seiscomp::DataModel::MomentTensorMethod"""
        return _DataModel.MomentTensor_method(self)

    def setStatus(self, *args):
        """setStatus(MomentTensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::MomentTensorStatus >::Impl const & status)"""
        return _DataModel.MomentTensor_setStatus(self, *args)

    def status(self):
        """status(MomentTensor self) -> Seiscomp::DataModel::MomentTensorStatus"""
        return _DataModel.MomentTensor_status(self)

    def setCmtName(self, *args):
        """setCmtName(MomentTensor self, std::string const & cmtName)"""
        return _DataModel.MomentTensor_setCmtName(self, *args)

    def cmtName(self):
        """cmtName(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_cmtName(self)

    def setCmtVersion(self, *args):
        """setCmtVersion(MomentTensor self, std::string const & cmtVersion)"""
        return _DataModel.MomentTensor_setCmtVersion(self, *args)

    def cmtVersion(self):
        """cmtVersion(MomentTensor self) -> std::string const &"""
        return _DataModel.MomentTensor_cmtVersion(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(MomentTensor self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.MomentTensor_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(MomentTensor self) -> CreationInfo
        creationInfo(MomentTensor self) -> CreationInfo
        """
        return _DataModel.MomentTensor_creationInfo(self, *args)

    def add(self, *args):
        """
        add(MomentTensor self, Comment obj) -> bool
        add(MomentTensor self, DataUsed obj) -> bool
        add(MomentTensor self, MomentTensorPhaseSetting obj) -> bool
        add(MomentTensor self, MomentTensorStationContribution obj) -> bool
        """
        return _DataModel.MomentTensor_add(self, *args)

    def remove(self, *args):
        """
        remove(MomentTensor self, Comment obj) -> bool
        remove(MomentTensor self, DataUsed obj) -> bool
        remove(MomentTensor self, MomentTensorPhaseSetting obj) -> bool
        remove(MomentTensor self, MomentTensorStationContribution obj) -> bool
        """
        return _DataModel.MomentTensor_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(MomentTensor self, size_t i) -> bool
        removeComment(MomentTensor self, CommentIndex i) -> bool
        """
        return _DataModel.MomentTensor_removeComment(self, *args)

    def removeDataUsed(self, *args):
        """removeDataUsed(MomentTensor self, size_t i) -> bool"""
        return _DataModel.MomentTensor_removeDataUsed(self, *args)

    def removeMomentTensorPhaseSetting(self, *args):
        """
        removeMomentTensorPhaseSetting(MomentTensor self, size_t i) -> bool
        removeMomentTensorPhaseSetting(MomentTensor self, MomentTensorPhaseSettingIndex i) -> bool
        """
        return _DataModel.MomentTensor_removeMomentTensorPhaseSetting(self, *args)

    def removeMomentTensorStationContribution(self, *args):
        """removeMomentTensorStationContribution(MomentTensor self, size_t i) -> bool"""
        return _DataModel.MomentTensor_removeMomentTensorStationContribution(self, *args)

    def commentCount(self):
        """commentCount(MomentTensor self) -> size_t"""
        return _DataModel.MomentTensor_commentCount(self)

    def dataUsedCount(self):
        """dataUsedCount(MomentTensor self) -> size_t"""
        return _DataModel.MomentTensor_dataUsedCount(self)

    def momentTensorPhaseSettingCount(self):
        """momentTensorPhaseSettingCount(MomentTensor self) -> size_t"""
        return _DataModel.MomentTensor_momentTensorPhaseSettingCount(self)

    def momentTensorStationContributionCount(self):
        """momentTensorStationContributionCount(MomentTensor self) -> size_t"""
        return _DataModel.MomentTensor_momentTensorStationContributionCount(self)

    def comment(self, *args):
        """
        comment(MomentTensor self, size_t i) -> Comment
        comment(MomentTensor self, CommentIndex i) -> Comment
        """
        return _DataModel.MomentTensor_comment(self, *args)

    def dataUsed(self, *args):
        """dataUsed(MomentTensor self, size_t i) -> DataUsed"""
        return _DataModel.MomentTensor_dataUsed(self, *args)

    def momentTensorPhaseSetting(self, *args):
        """
        momentTensorPhaseSetting(MomentTensor self, size_t i) -> MomentTensorPhaseSetting
        momentTensorPhaseSetting(MomentTensor self, MomentTensorPhaseSettingIndex i) -> MomentTensorPhaseSetting
        """
        return _DataModel.MomentTensor_momentTensorPhaseSetting(self, *args)

    def momentTensorStationContribution(self, *args):
        """momentTensorStationContribution(MomentTensor self, size_t i) -> MomentTensorStationContribution"""
        return _DataModel.MomentTensor_momentTensorStationContribution(self, *args)

    def findDataUsed(self, *args):
        """findDataUsed(MomentTensor self, DataUsed dataUsed) -> DataUsed"""
        return _DataModel.MomentTensor_findDataUsed(self, *args)

    def findMomentTensorStationContribution(self, *args):
        """findMomentTensorStationContribution(MomentTensor self, std::string const & publicID) -> MomentTensorStationContribution"""
        return _DataModel.MomentTensor_findMomentTensorStationContribution(self, *args)

    def focalMechanism(self):
        """focalMechanism(MomentTensor self) -> FocalMechanism"""
        return _DataModel.MomentTensor_focalMechanism(self)

    def assign(self, *args):
        """assign(MomentTensor self, Object other) -> bool"""
        return _DataModel.MomentTensor_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(MomentTensor self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensor_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(MomentTensor self, PublicObject parent) -> bool"""
        return _DataModel.MomentTensor_detachFrom(self, *args)

    def detach(self):
        """detach(MomentTensor self) -> bool"""
        return _DataModel.MomentTensor_detach(self)

    def clone(self):
        """clone(MomentTensor self) -> Object"""
        return _DataModel.MomentTensor_clone(self)

    def updateChild(self, *args):
        """updateChild(MomentTensor self, Object child) -> bool"""
        return _DataModel.MomentTensor_updateChild(self, *args)

    def accept(self, *args):
        """accept(MomentTensor self, Visitor arg2)"""
        return _DataModel.MomentTensor_accept(self, *args)

MomentTensor_swigregister = _DataModel.MomentTensor_swigregister
MomentTensor_swigregister(MomentTensor)

def MomentTensor_ClassName():
  """MomentTensor_ClassName() -> char const *"""
  return _DataModel.MomentTensor_ClassName()

def MomentTensor_TypeInfo():
  """MomentTensor_TypeInfo() -> RTTI"""
  return _DataModel.MomentTensor_TypeInfo()

def MomentTensor_Cast(*args):
  """
    Cast(BaseObject o) -> MomentTensor
    MomentTensor_Cast(Seiscomp::Core::BaseObjectPtr o) -> MomentTensor
    """
  return _DataModel.MomentTensor_Cast(*args)

def MomentTensor_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> MomentTensor
    MomentTensor_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> MomentTensor
    """
  return _DataModel.MomentTensor_ConstCast(*args)

def MomentTensor_Create(*args):
  """
    Create() -> MomentTensor
    MomentTensor_Create(std::string const & publicID) -> MomentTensor
    """
  return _DataModel.MomentTensor_Create(*args)

def MomentTensor_Find(*args):
  """MomentTensor_Find(std::string const & publicID) -> MomentTensor"""
  return _DataModel.MomentTensor_Find(*args)

class FocalMechanism(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::FocalMechanism class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalMechanism, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalMechanism, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.FocalMechanism_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.FocalMechanism_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(FocalMechanism self) -> char const *"""
        return _DataModel.FocalMechanism_className(self)

    def typeInfo(self):
        """typeInfo(FocalMechanism self) -> RTTI"""
        return _DataModel.FocalMechanism_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> FocalMechanism
        Cast(Seiscomp::Core::BaseObjectPtr o) -> FocalMechanism
        """
        return _DataModel.FocalMechanism_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> FocalMechanism
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> FocalMechanism
        """
        return _DataModel.FocalMechanism_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(FocalMechanism self, GenericArchive ar)"""
        return _DataModel.FocalMechanism_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::FocalMechanism self, FocalMechanism other) -> FocalMechanism
        __init__(Seiscomp::DataModel::FocalMechanism self, std::string const & publicID) -> FocalMechanism
        """
        this = _DataModel.new_FocalMechanism(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_FocalMechanism
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> FocalMechanism
        Create(std::string const & publicID) -> FocalMechanism
        """
        return _DataModel.FocalMechanism_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> FocalMechanism"""
        return _DataModel.FocalMechanism_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(FocalMechanism self, FocalMechanism other) -> bool"""
        return _DataModel.FocalMechanism___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(FocalMechanism self, FocalMechanism other) -> bool"""
        return _DataModel.FocalMechanism___ne__(self, *args)

    def equal(self, *args):
        """equal(FocalMechanism self, FocalMechanism other) -> bool"""
        return _DataModel.FocalMechanism_equal(self, *args)

    def setTriggeringOriginID(self, *args):
        """setTriggeringOriginID(FocalMechanism self, std::string const & triggeringOriginID)"""
        return _DataModel.FocalMechanism_setTriggeringOriginID(self, *args)

    def triggeringOriginID(self):
        """triggeringOriginID(FocalMechanism self) -> std::string const &"""
        return _DataModel.FocalMechanism_triggeringOriginID(self)

    def setNodalPlanes(self, *args):
        """setNodalPlanes(FocalMechanism self, Seiscomp::Core::Optional< Seiscomp::DataModel::NodalPlanes >::Impl const & nodalPlanes)"""
        return _DataModel.FocalMechanism_setNodalPlanes(self, *args)

    def nodalPlanes(self, *args):
        """
        nodalPlanes(FocalMechanism self) -> NodalPlanes
        nodalPlanes(FocalMechanism self) -> NodalPlanes
        """
        return _DataModel.FocalMechanism_nodalPlanes(self, *args)

    def setPrincipalAxes(self, *args):
        """setPrincipalAxes(FocalMechanism self, Seiscomp::Core::Optional< Seiscomp::DataModel::PrincipalAxes >::Impl const & principalAxes)"""
        return _DataModel.FocalMechanism_setPrincipalAxes(self, *args)

    def principalAxes(self, *args):
        """
        principalAxes(FocalMechanism self) -> PrincipalAxes
        principalAxes(FocalMechanism self) -> PrincipalAxes
        """
        return _DataModel.FocalMechanism_principalAxes(self, *args)

    def setAzimuthalGap(self, *args):
        """setAzimuthalGap(FocalMechanism self, Seiscomp::Core::Optional< double >::Impl const & azimuthalGap)"""
        return _DataModel.FocalMechanism_setAzimuthalGap(self, *args)

    def azimuthalGap(self):
        """azimuthalGap(FocalMechanism self) -> double"""
        return _DataModel.FocalMechanism_azimuthalGap(self)

    def setStationPolarityCount(self, *args):
        """setStationPolarityCount(FocalMechanism self, Seiscomp::Core::Optional< int >::Impl const & stationPolarityCount)"""
        return _DataModel.FocalMechanism_setStationPolarityCount(self, *args)

    def stationPolarityCount(self):
        """stationPolarityCount(FocalMechanism self) -> int"""
        return _DataModel.FocalMechanism_stationPolarityCount(self)

    def setMisfit(self, *args):
        """setMisfit(FocalMechanism self, Seiscomp::Core::Optional< double >::Impl const & misfit)"""
        return _DataModel.FocalMechanism_setMisfit(self, *args)

    def misfit(self):
        """misfit(FocalMechanism self) -> double"""
        return _DataModel.FocalMechanism_misfit(self)

    def setStationDistributionRatio(self, *args):
        """setStationDistributionRatio(FocalMechanism self, Seiscomp::Core::Optional< double >::Impl const & stationDistributionRatio)"""
        return _DataModel.FocalMechanism_setStationDistributionRatio(self, *args)

    def stationDistributionRatio(self):
        """stationDistributionRatio(FocalMechanism self) -> double"""
        return _DataModel.FocalMechanism_stationDistributionRatio(self)

    def setMethodID(self, *args):
        """setMethodID(FocalMechanism self, std::string const & methodID)"""
        return _DataModel.FocalMechanism_setMethodID(self, *args)

    def methodID(self):
        """methodID(FocalMechanism self) -> std::string const &"""
        return _DataModel.FocalMechanism_methodID(self)

    def setEvaluationMode(self, *args):
        """setEvaluationMode(FocalMechanism self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationMode >::Impl const & evaluationMode)"""
        return _DataModel.FocalMechanism_setEvaluationMode(self, *args)

    def evaluationMode(self):
        """evaluationMode(FocalMechanism self) -> Seiscomp::DataModel::EvaluationMode"""
        return _DataModel.FocalMechanism_evaluationMode(self)

    def setEvaluationStatus(self, *args):
        """setEvaluationStatus(FocalMechanism self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationStatus >::Impl const & evaluationStatus)"""
        return _DataModel.FocalMechanism_setEvaluationStatus(self, *args)

    def evaluationStatus(self):
        """evaluationStatus(FocalMechanism self) -> Seiscomp::DataModel::EvaluationStatus"""
        return _DataModel.FocalMechanism_evaluationStatus(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(FocalMechanism self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.FocalMechanism_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(FocalMechanism self) -> CreationInfo
        creationInfo(FocalMechanism self) -> CreationInfo
        """
        return _DataModel.FocalMechanism_creationInfo(self, *args)

    def add(self, *args):
        """
        add(FocalMechanism self, Comment obj) -> bool
        add(FocalMechanism self, MomentTensor obj) -> bool
        """
        return _DataModel.FocalMechanism_add(self, *args)

    def remove(self, *args):
        """
        remove(FocalMechanism self, Comment obj) -> bool
        remove(FocalMechanism self, MomentTensor obj) -> bool
        """
        return _DataModel.FocalMechanism_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(FocalMechanism self, size_t i) -> bool
        removeComment(FocalMechanism self, CommentIndex i) -> bool
        """
        return _DataModel.FocalMechanism_removeComment(self, *args)

    def removeMomentTensor(self, *args):
        """removeMomentTensor(FocalMechanism self, size_t i) -> bool"""
        return _DataModel.FocalMechanism_removeMomentTensor(self, *args)

    def commentCount(self):
        """commentCount(FocalMechanism self) -> size_t"""
        return _DataModel.FocalMechanism_commentCount(self)

    def momentTensorCount(self):
        """momentTensorCount(FocalMechanism self) -> size_t"""
        return _DataModel.FocalMechanism_momentTensorCount(self)

    def comment(self, *args):
        """
        comment(FocalMechanism self, size_t i) -> Comment
        comment(FocalMechanism self, CommentIndex i) -> Comment
        """
        return _DataModel.FocalMechanism_comment(self, *args)

    def momentTensor(self, *args):
        """momentTensor(FocalMechanism self, size_t i) -> MomentTensor"""
        return _DataModel.FocalMechanism_momentTensor(self, *args)

    def findMomentTensor(self, *args):
        """findMomentTensor(FocalMechanism self, std::string const & publicID) -> MomentTensor"""
        return _DataModel.FocalMechanism_findMomentTensor(self, *args)

    def eventParameters(self):
        """eventParameters(FocalMechanism self) -> EventParameters"""
        return _DataModel.FocalMechanism_eventParameters(self)

    def assign(self, *args):
        """assign(FocalMechanism self, Object other) -> bool"""
        return _DataModel.FocalMechanism_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(FocalMechanism self, PublicObject parent) -> bool"""
        return _DataModel.FocalMechanism_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(FocalMechanism self, PublicObject parent) -> bool"""
        return _DataModel.FocalMechanism_detachFrom(self, *args)

    def detach(self):
        """detach(FocalMechanism self) -> bool"""
        return _DataModel.FocalMechanism_detach(self)

    def clone(self):
        """clone(FocalMechanism self) -> Object"""
        return _DataModel.FocalMechanism_clone(self)

    def updateChild(self, *args):
        """updateChild(FocalMechanism self, Object child) -> bool"""
        return _DataModel.FocalMechanism_updateChild(self, *args)

    def accept(self, *args):
        """accept(FocalMechanism self, Visitor arg2)"""
        return _DataModel.FocalMechanism_accept(self, *args)

FocalMechanism_swigregister = _DataModel.FocalMechanism_swigregister
FocalMechanism_swigregister(FocalMechanism)

def FocalMechanism_ClassName():
  """FocalMechanism_ClassName() -> char const *"""
  return _DataModel.FocalMechanism_ClassName()

def FocalMechanism_TypeInfo():
  """FocalMechanism_TypeInfo() -> RTTI"""
  return _DataModel.FocalMechanism_TypeInfo()

def FocalMechanism_Cast(*args):
  """
    Cast(BaseObject o) -> FocalMechanism
    FocalMechanism_Cast(Seiscomp::Core::BaseObjectPtr o) -> FocalMechanism
    """
  return _DataModel.FocalMechanism_Cast(*args)

def FocalMechanism_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> FocalMechanism
    FocalMechanism_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> FocalMechanism
    """
  return _DataModel.FocalMechanism_ConstCast(*args)

def FocalMechanism_Create(*args):
  """
    Create() -> FocalMechanism
    FocalMechanism_Create(std::string const & publicID) -> FocalMechanism
    """
  return _DataModel.FocalMechanism_Create(*args)

def FocalMechanism_Find(*args):
  """FocalMechanism_Find(std::string const & publicID) -> FocalMechanism"""
  return _DataModel.FocalMechanism_Find(*args)

class Amplitude(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Amplitude class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Amplitude, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Amplitude, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Amplitude_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Amplitude_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Amplitude self) -> char const *"""
        return _DataModel.Amplitude_className(self)

    def typeInfo(self):
        """typeInfo(Amplitude self) -> RTTI"""
        return _DataModel.Amplitude_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Amplitude
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Amplitude
        """
        return _DataModel.Amplitude_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Amplitude
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Amplitude
        """
        return _DataModel.Amplitude_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Amplitude self, GenericArchive ar)"""
        return _DataModel.Amplitude_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Amplitude self, Amplitude other) -> Amplitude
        __init__(Seiscomp::DataModel::Amplitude self, std::string const & publicID) -> Amplitude
        """
        this = _DataModel.new_Amplitude(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Amplitude
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Amplitude
        Create(std::string const & publicID) -> Amplitude
        """
        return _DataModel.Amplitude_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Amplitude"""
        return _DataModel.Amplitude_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Amplitude self, Amplitude other) -> bool"""
        return _DataModel.Amplitude___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Amplitude self, Amplitude other) -> bool"""
        return _DataModel.Amplitude___ne__(self, *args)

    def equal(self, *args):
        """equal(Amplitude self, Amplitude other) -> bool"""
        return _DataModel.Amplitude_equal(self, *args)

    def setType(self, *args):
        """setType(Amplitude self, std::string const & type)"""
        return _DataModel.Amplitude_setType(self, *args)

    def type(self):
        """type(Amplitude self) -> std::string const &"""
        return _DataModel.Amplitude_type(self)

    def setAmplitude(self, *args):
        """setAmplitude(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & amplitude)"""
        return _DataModel.Amplitude_setAmplitude(self, *args)

    def amplitude(self, *args):
        """
        amplitude(Amplitude self) -> RealQuantity
        amplitude(Amplitude self) -> RealQuantity
        """
        return _DataModel.Amplitude_amplitude(self, *args)

    def setTimeWindow(self, *args):
        """setTimeWindow(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::TimeWindow >::Impl const & timeWindow)"""
        return _DataModel.Amplitude_setTimeWindow(self, *args)

    def timeWindow(self, *args):
        """
        timeWindow(Amplitude self) -> TimeWindow
        timeWindow(Amplitude self) -> TimeWindow
        """
        return _DataModel.Amplitude_timeWindow(self, *args)

    def setPeriod(self, *args):
        """setPeriod(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & period)"""
        return _DataModel.Amplitude_setPeriod(self, *args)

    def period(self, *args):
        """
        period(Amplitude self) -> RealQuantity
        period(Amplitude self) -> RealQuantity
        """
        return _DataModel.Amplitude_period(self, *args)

    def setSnr(self, *args):
        """setSnr(Amplitude self, Seiscomp::Core::Optional< double >::Impl const & snr)"""
        return _DataModel.Amplitude_setSnr(self, *args)

    def snr(self):
        """snr(Amplitude self) -> double"""
        return _DataModel.Amplitude_snr(self)

    def setUnit(self, *args):
        """setUnit(Amplitude self, std::string const & unit)"""
        return _DataModel.Amplitude_setUnit(self, *args)

    def unit(self):
        """unit(Amplitude self) -> std::string const &"""
        return _DataModel.Amplitude_unit(self)

    def setPickID(self, *args):
        """setPickID(Amplitude self, std::string const & pickID)"""
        return _DataModel.Amplitude_setPickID(self, *args)

    def pickID(self):
        """pickID(Amplitude self) -> std::string const &"""
        return _DataModel.Amplitude_pickID(self)

    def setWaveformID(self, *args):
        """setWaveformID(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::WaveformStreamID >::Impl const & waveformID)"""
        return _DataModel.Amplitude_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(Amplitude self) -> WaveformStreamID
        waveformID(Amplitude self) -> WaveformStreamID
        """
        return _DataModel.Amplitude_waveformID(self, *args)

    def setFilterID(self, *args):
        """setFilterID(Amplitude self, std::string const & filterID)"""
        return _DataModel.Amplitude_setFilterID(self, *args)

    def filterID(self):
        """filterID(Amplitude self) -> std::string const &"""
        return _DataModel.Amplitude_filterID(self)

    def setMethodID(self, *args):
        """setMethodID(Amplitude self, std::string const & methodID)"""
        return _DataModel.Amplitude_setMethodID(self, *args)

    def methodID(self):
        """methodID(Amplitude self) -> std::string const &"""
        return _DataModel.Amplitude_methodID(self)

    def setScalingTime(self, *args):
        """setScalingTime(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::TimeQuantity >::Impl const & scalingTime)"""
        return _DataModel.Amplitude_setScalingTime(self, *args)

    def scalingTime(self, *args):
        """
        scalingTime(Amplitude self) -> TimeQuantity
        scalingTime(Amplitude self) -> TimeQuantity
        """
        return _DataModel.Amplitude_scalingTime(self, *args)

    def setMagnitudeHint(self, *args):
        """setMagnitudeHint(Amplitude self, std::string const & magnitudeHint)"""
        return _DataModel.Amplitude_setMagnitudeHint(self, *args)

    def magnitudeHint(self):
        """magnitudeHint(Amplitude self) -> std::string const &"""
        return _DataModel.Amplitude_magnitudeHint(self)

    def setEvaluationMode(self, *args):
        """setEvaluationMode(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationMode >::Impl const & evaluationMode)"""
        return _DataModel.Amplitude_setEvaluationMode(self, *args)

    def evaluationMode(self):
        """evaluationMode(Amplitude self) -> Seiscomp::DataModel::EvaluationMode"""
        return _DataModel.Amplitude_evaluationMode(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Amplitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Amplitude_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Amplitude self) -> CreationInfo
        creationInfo(Amplitude self) -> CreationInfo
        """
        return _DataModel.Amplitude_creationInfo(self, *args)

    def add(self, *args):
        """add(Amplitude self, Comment obj) -> bool"""
        return _DataModel.Amplitude_add(self, *args)

    def remove(self, *args):
        """remove(Amplitude self, Comment obj) -> bool"""
        return _DataModel.Amplitude_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(Amplitude self, size_t i) -> bool
        removeComment(Amplitude self, CommentIndex i) -> bool
        """
        return _DataModel.Amplitude_removeComment(self, *args)

    def commentCount(self):
        """commentCount(Amplitude self) -> size_t"""
        return _DataModel.Amplitude_commentCount(self)

    def comment(self, *args):
        """
        comment(Amplitude self, size_t i) -> Comment
        comment(Amplitude self, CommentIndex i) -> Comment
        """
        return _DataModel.Amplitude_comment(self, *args)

    def eventParameters(self):
        """eventParameters(Amplitude self) -> EventParameters"""
        return _DataModel.Amplitude_eventParameters(self)

    def assign(self, *args):
        """assign(Amplitude self, Object other) -> bool"""
        return _DataModel.Amplitude_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Amplitude self, PublicObject parent) -> bool"""
        return _DataModel.Amplitude_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Amplitude self, PublicObject parent) -> bool"""
        return _DataModel.Amplitude_detachFrom(self, *args)

    def detach(self):
        """detach(Amplitude self) -> bool"""
        return _DataModel.Amplitude_detach(self)

    def clone(self):
        """clone(Amplitude self) -> Object"""
        return _DataModel.Amplitude_clone(self)

    def updateChild(self, *args):
        """updateChild(Amplitude self, Object child) -> bool"""
        return _DataModel.Amplitude_updateChild(self, *args)

    def accept(self, *args):
        """accept(Amplitude self, Visitor arg2)"""
        return _DataModel.Amplitude_accept(self, *args)

Amplitude_swigregister = _DataModel.Amplitude_swigregister
Amplitude_swigregister(Amplitude)

def Amplitude_ClassName():
  """Amplitude_ClassName() -> char const *"""
  return _DataModel.Amplitude_ClassName()

def Amplitude_TypeInfo():
  """Amplitude_TypeInfo() -> RTTI"""
  return _DataModel.Amplitude_TypeInfo()

def Amplitude_Cast(*args):
  """
    Cast(BaseObject o) -> Amplitude
    Amplitude_Cast(Seiscomp::Core::BaseObjectPtr o) -> Amplitude
    """
  return _DataModel.Amplitude_Cast(*args)

def Amplitude_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Amplitude
    Amplitude_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Amplitude
    """
  return _DataModel.Amplitude_ConstCast(*args)

def Amplitude_Create(*args):
  """
    Create() -> Amplitude
    Amplitude_Create(std::string const & publicID) -> Amplitude
    """
  return _DataModel.Amplitude_Create(*args)

def Amplitude_Find(*args):
  """Amplitude_Find(std::string const & publicID) -> Amplitude"""
  return _DataModel.Amplitude_Find(*args)

class StationMagnitudeContributionIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::StationMagnitudeContributionIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationMagnitudeContributionIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StationMagnitudeContributionIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationMagnitudeContributionIndex self) -> StationMagnitudeContributionIndex
        __init__(Seiscomp::DataModel::StationMagnitudeContributionIndex self, std::string const & stationMagnitudeID) -> StationMagnitudeContributionIndex
        __init__(Seiscomp::DataModel::StationMagnitudeContributionIndex self, StationMagnitudeContributionIndex arg2) -> StationMagnitudeContributionIndex
        """
        this = _DataModel.new_StationMagnitudeContributionIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(StationMagnitudeContributionIndex self, StationMagnitudeContributionIndex arg2) -> bool"""
        return _DataModel.StationMagnitudeContributionIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationMagnitudeContributionIndex self, StationMagnitudeContributionIndex arg2) -> bool"""
        return _DataModel.StationMagnitudeContributionIndex___ne__(self, *args)

    __swig_setmethods__["stationMagnitudeID"] = _DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_set
    __swig_getmethods__["stationMagnitudeID"] = _DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_get
    if _newclass:stationMagnitudeID = _swig_property(_DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_get, _DataModel.StationMagnitudeContributionIndex_stationMagnitudeID_set)
    __swig_destroy__ = _DataModel.delete_StationMagnitudeContributionIndex
    __del__ = lambda self : None;
StationMagnitudeContributionIndex_swigregister = _DataModel.StationMagnitudeContributionIndex_swigregister
StationMagnitudeContributionIndex_swigregister(StationMagnitudeContributionIndex)

class StationMagnitudeContribution(Object):
    """Proxy of C++ Seiscomp::DataModel::StationMagnitudeContribution class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationMagnitudeContribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationMagnitudeContribution, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.StationMagnitudeContribution_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.StationMagnitudeContribution_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(StationMagnitudeContribution self) -> char const *"""
        return _DataModel.StationMagnitudeContribution_className(self)

    def typeInfo(self):
        """typeInfo(StationMagnitudeContribution self) -> RTTI"""
        return _DataModel.StationMagnitudeContribution_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> StationMagnitudeContribution
        Cast(Seiscomp::Core::BaseObjectPtr o) -> StationMagnitudeContribution
        """
        return _DataModel.StationMagnitudeContribution_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> StationMagnitudeContribution
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationMagnitudeContribution
        """
        return _DataModel.StationMagnitudeContribution_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(StationMagnitudeContribution self, GenericArchive ar)"""
        return _DataModel.StationMagnitudeContribution_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationMagnitudeContribution self) -> StationMagnitudeContribution
        __init__(Seiscomp::DataModel::StationMagnitudeContribution self, StationMagnitudeContribution other) -> StationMagnitudeContribution
        __init__(Seiscomp::DataModel::StationMagnitudeContribution self, std::string const & stationMagnitudeID) -> StationMagnitudeContribution
        __init__(Seiscomp::DataModel::StationMagnitudeContribution self, std::string const & stationMagnitudeID, Seiscomp::Core::Optional< double >::Impl const & residual, 
            Seiscomp::Core::Optional< double >::Impl const & weight) -> StationMagnitudeContribution
        """
        this = _DataModel.new_StationMagnitudeContribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationMagnitudeContribution
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(StationMagnitudeContribution self, StationMagnitudeContribution other) -> bool"""
        return _DataModel.StationMagnitudeContribution___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationMagnitudeContribution self, StationMagnitudeContribution other) -> bool"""
        return _DataModel.StationMagnitudeContribution___ne__(self, *args)

    def equal(self, *args):
        """equal(StationMagnitudeContribution self, StationMagnitudeContribution other) -> bool"""
        return _DataModel.StationMagnitudeContribution_equal(self, *args)

    def setStationMagnitudeID(self, *args):
        """setStationMagnitudeID(StationMagnitudeContribution self, std::string const & stationMagnitudeID)"""
        return _DataModel.StationMagnitudeContribution_setStationMagnitudeID(self, *args)

    def stationMagnitudeID(self):
        """stationMagnitudeID(StationMagnitudeContribution self) -> std::string const &"""
        return _DataModel.StationMagnitudeContribution_stationMagnitudeID(self)

    def setResidual(self, *args):
        """setResidual(StationMagnitudeContribution self, Seiscomp::Core::Optional< double >::Impl const & residual)"""
        return _DataModel.StationMagnitudeContribution_setResidual(self, *args)

    def residual(self):
        """residual(StationMagnitudeContribution self) -> double"""
        return _DataModel.StationMagnitudeContribution_residual(self)

    def setWeight(self, *args):
        """setWeight(StationMagnitudeContribution self, Seiscomp::Core::Optional< double >::Impl const & weight)"""
        return _DataModel.StationMagnitudeContribution_setWeight(self, *args)

    def weight(self):
        """weight(StationMagnitudeContribution self) -> double"""
        return _DataModel.StationMagnitudeContribution_weight(self)

    def index(self):
        """index(StationMagnitudeContribution self) -> StationMagnitudeContributionIndex"""
        return _DataModel.StationMagnitudeContribution_index(self)

    def equalIndex(self, *args):
        """equalIndex(StationMagnitudeContribution self, StationMagnitudeContribution lhs) -> bool"""
        return _DataModel.StationMagnitudeContribution_equalIndex(self, *args)

    def magnitude(self):
        """magnitude(StationMagnitudeContribution self) -> Magnitude"""
        return _DataModel.StationMagnitudeContribution_magnitude(self)

    def assign(self, *args):
        """assign(StationMagnitudeContribution self, Object other) -> bool"""
        return _DataModel.StationMagnitudeContribution_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(StationMagnitudeContribution self, PublicObject parent) -> bool"""
        return _DataModel.StationMagnitudeContribution_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(StationMagnitudeContribution self, PublicObject parent) -> bool"""
        return _DataModel.StationMagnitudeContribution_detachFrom(self, *args)

    def detach(self):
        """detach(StationMagnitudeContribution self) -> bool"""
        return _DataModel.StationMagnitudeContribution_detach(self)

    def clone(self):
        """clone(StationMagnitudeContribution self) -> Object"""
        return _DataModel.StationMagnitudeContribution_clone(self)

    def accept(self, *args):
        """accept(StationMagnitudeContribution self, Visitor arg2)"""
        return _DataModel.StationMagnitudeContribution_accept(self, *args)

StationMagnitudeContribution_swigregister = _DataModel.StationMagnitudeContribution_swigregister
StationMagnitudeContribution_swigregister(StationMagnitudeContribution)

def StationMagnitudeContribution_ClassName():
  """StationMagnitudeContribution_ClassName() -> char const *"""
  return _DataModel.StationMagnitudeContribution_ClassName()

def StationMagnitudeContribution_TypeInfo():
  """StationMagnitudeContribution_TypeInfo() -> RTTI"""
  return _DataModel.StationMagnitudeContribution_TypeInfo()

def StationMagnitudeContribution_Cast(*args):
  """
    Cast(BaseObject o) -> StationMagnitudeContribution
    StationMagnitudeContribution_Cast(Seiscomp::Core::BaseObjectPtr o) -> StationMagnitudeContribution
    """
  return _DataModel.StationMagnitudeContribution_Cast(*args)

def StationMagnitudeContribution_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> StationMagnitudeContribution
    StationMagnitudeContribution_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationMagnitudeContribution
    """
  return _DataModel.StationMagnitudeContribution_ConstCast(*args)

class Magnitude(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Magnitude class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Magnitude, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Magnitude, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Magnitude_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Magnitude_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Magnitude self) -> char const *"""
        return _DataModel.Magnitude_className(self)

    def typeInfo(self):
        """typeInfo(Magnitude self) -> RTTI"""
        return _DataModel.Magnitude_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Magnitude
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Magnitude
        """
        return _DataModel.Magnitude_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Magnitude
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Magnitude
        """
        return _DataModel.Magnitude_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Magnitude self, GenericArchive ar)"""
        return _DataModel.Magnitude_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Magnitude self, Magnitude other) -> Magnitude
        __init__(Seiscomp::DataModel::Magnitude self, std::string const & publicID) -> Magnitude
        """
        this = _DataModel.new_Magnitude(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Magnitude
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Magnitude
        Create(std::string const & publicID) -> Magnitude
        """
        return _DataModel.Magnitude_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Magnitude"""
        return _DataModel.Magnitude_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Magnitude self, Magnitude other) -> bool"""
        return _DataModel.Magnitude___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Magnitude self, Magnitude other) -> bool"""
        return _DataModel.Magnitude___ne__(self, *args)

    def equal(self, *args):
        """equal(Magnitude self, Magnitude other) -> bool"""
        return _DataModel.Magnitude_equal(self, *args)

    def setMagnitude(self, *args):
        """setMagnitude(Magnitude self, RealQuantity magnitude)"""
        return _DataModel.Magnitude_setMagnitude(self, *args)

    def magnitude(self, *args):
        """
        magnitude(Magnitude self) -> RealQuantity
        magnitude(Magnitude self) -> RealQuantity
        """
        return _DataModel.Magnitude_magnitude(self, *args)

    def setType(self, *args):
        """setType(Magnitude self, std::string const & type)"""
        return _DataModel.Magnitude_setType(self, *args)

    def type(self):
        """type(Magnitude self) -> std::string const &"""
        return _DataModel.Magnitude_type(self)

    def setOriginID(self, *args):
        """setOriginID(Magnitude self, std::string const & originID)"""
        return _DataModel.Magnitude_setOriginID(self, *args)

    def originID(self):
        """originID(Magnitude self) -> std::string const &"""
        return _DataModel.Magnitude_originID(self)

    def setMethodID(self, *args):
        """setMethodID(Magnitude self, std::string const & methodID)"""
        return _DataModel.Magnitude_setMethodID(self, *args)

    def methodID(self):
        """methodID(Magnitude self) -> std::string const &"""
        return _DataModel.Magnitude_methodID(self)

    def setStationCount(self, *args):
        """setStationCount(Magnitude self, Seiscomp::Core::Optional< int >::Impl const & stationCount)"""
        return _DataModel.Magnitude_setStationCount(self, *args)

    def stationCount(self):
        """stationCount(Magnitude self) -> int"""
        return _DataModel.Magnitude_stationCount(self)

    def setAzimuthalGap(self, *args):
        """setAzimuthalGap(Magnitude self, Seiscomp::Core::Optional< double >::Impl const & azimuthalGap)"""
        return _DataModel.Magnitude_setAzimuthalGap(self, *args)

    def azimuthalGap(self):
        """azimuthalGap(Magnitude self) -> double"""
        return _DataModel.Magnitude_azimuthalGap(self)

    def setEvaluationStatus(self, *args):
        """setEvaluationStatus(Magnitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationStatus >::Impl const & evaluationStatus)"""
        return _DataModel.Magnitude_setEvaluationStatus(self, *args)

    def evaluationStatus(self):
        """evaluationStatus(Magnitude self) -> Seiscomp::DataModel::EvaluationStatus"""
        return _DataModel.Magnitude_evaluationStatus(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Magnitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Magnitude_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Magnitude self) -> CreationInfo
        creationInfo(Magnitude self) -> CreationInfo
        """
        return _DataModel.Magnitude_creationInfo(self, *args)

    def add(self, *args):
        """
        add(Magnitude self, Comment obj) -> bool
        add(Magnitude self, StationMagnitudeContribution obj) -> bool
        """
        return _DataModel.Magnitude_add(self, *args)

    def remove(self, *args):
        """
        remove(Magnitude self, Comment obj) -> bool
        remove(Magnitude self, StationMagnitudeContribution obj) -> bool
        """
        return _DataModel.Magnitude_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(Magnitude self, size_t i) -> bool
        removeComment(Magnitude self, CommentIndex i) -> bool
        """
        return _DataModel.Magnitude_removeComment(self, *args)

    def removeStationMagnitudeContribution(self, *args):
        """
        removeStationMagnitudeContribution(Magnitude self, size_t i) -> bool
        removeStationMagnitudeContribution(Magnitude self, StationMagnitudeContributionIndex i) -> bool
        """
        return _DataModel.Magnitude_removeStationMagnitudeContribution(self, *args)

    def commentCount(self):
        """commentCount(Magnitude self) -> size_t"""
        return _DataModel.Magnitude_commentCount(self)

    def stationMagnitudeContributionCount(self):
        """stationMagnitudeContributionCount(Magnitude self) -> size_t"""
        return _DataModel.Magnitude_stationMagnitudeContributionCount(self)

    def comment(self, *args):
        """
        comment(Magnitude self, size_t i) -> Comment
        comment(Magnitude self, CommentIndex i) -> Comment
        """
        return _DataModel.Magnitude_comment(self, *args)

    def stationMagnitudeContribution(self, *args):
        """
        stationMagnitudeContribution(Magnitude self, size_t i) -> StationMagnitudeContribution
        stationMagnitudeContribution(Magnitude self, StationMagnitudeContributionIndex i) -> StationMagnitudeContribution
        """
        return _DataModel.Magnitude_stationMagnitudeContribution(self, *args)

    def origin(self):
        """origin(Magnitude self) -> Origin"""
        return _DataModel.Magnitude_origin(self)

    def assign(self, *args):
        """assign(Magnitude self, Object other) -> bool"""
        return _DataModel.Magnitude_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Magnitude self, PublicObject parent) -> bool"""
        return _DataModel.Magnitude_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Magnitude self, PublicObject parent) -> bool"""
        return _DataModel.Magnitude_detachFrom(self, *args)

    def detach(self):
        """detach(Magnitude self) -> bool"""
        return _DataModel.Magnitude_detach(self)

    def clone(self):
        """clone(Magnitude self) -> Object"""
        return _DataModel.Magnitude_clone(self)

    def updateChild(self, *args):
        """updateChild(Magnitude self, Object child) -> bool"""
        return _DataModel.Magnitude_updateChild(self, *args)

    def accept(self, *args):
        """accept(Magnitude self, Visitor arg2)"""
        return _DataModel.Magnitude_accept(self, *args)

Magnitude_swigregister = _DataModel.Magnitude_swigregister
Magnitude_swigregister(Magnitude)

def Magnitude_ClassName():
  """Magnitude_ClassName() -> char const *"""
  return _DataModel.Magnitude_ClassName()

def Magnitude_TypeInfo():
  """Magnitude_TypeInfo() -> RTTI"""
  return _DataModel.Magnitude_TypeInfo()

def Magnitude_Cast(*args):
  """
    Cast(BaseObject o) -> Magnitude
    Magnitude_Cast(Seiscomp::Core::BaseObjectPtr o) -> Magnitude
    """
  return _DataModel.Magnitude_Cast(*args)

def Magnitude_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Magnitude
    Magnitude_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Magnitude
    """
  return _DataModel.Magnitude_ConstCast(*args)

def Magnitude_Create(*args):
  """
    Create() -> Magnitude
    Magnitude_Create(std::string const & publicID) -> Magnitude
    """
  return _DataModel.Magnitude_Create(*args)

def Magnitude_Find(*args):
  """Magnitude_Find(std::string const & publicID) -> Magnitude"""
  return _DataModel.Magnitude_Find(*args)

class StationMagnitude(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::StationMagnitude class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StationMagnitude, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StationMagnitude, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.StationMagnitude_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.StationMagnitude_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(StationMagnitude self) -> char const *"""
        return _DataModel.StationMagnitude_className(self)

    def typeInfo(self):
        """typeInfo(StationMagnitude self) -> RTTI"""
        return _DataModel.StationMagnitude_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> StationMagnitude
        Cast(Seiscomp::Core::BaseObjectPtr o) -> StationMagnitude
        """
        return _DataModel.StationMagnitude_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> StationMagnitude
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationMagnitude
        """
        return _DataModel.StationMagnitude_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(StationMagnitude self, GenericArchive ar)"""
        return _DataModel.StationMagnitude_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::StationMagnitude self, StationMagnitude other) -> StationMagnitude
        __init__(Seiscomp::DataModel::StationMagnitude self, std::string const & publicID) -> StationMagnitude
        """
        this = _DataModel.new_StationMagnitude(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_StationMagnitude
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> StationMagnitude
        Create(std::string const & publicID) -> StationMagnitude
        """
        return _DataModel.StationMagnitude_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> StationMagnitude"""
        return _DataModel.StationMagnitude_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(StationMagnitude self, StationMagnitude other) -> bool"""
        return _DataModel.StationMagnitude___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StationMagnitude self, StationMagnitude other) -> bool"""
        return _DataModel.StationMagnitude___ne__(self, *args)

    def equal(self, *args):
        """equal(StationMagnitude self, StationMagnitude other) -> bool"""
        return _DataModel.StationMagnitude_equal(self, *args)

    def setOriginID(self, *args):
        """setOriginID(StationMagnitude self, std::string const & originID)"""
        return _DataModel.StationMagnitude_setOriginID(self, *args)

    def originID(self):
        """originID(StationMagnitude self) -> std::string const &"""
        return _DataModel.StationMagnitude_originID(self)

    def setMagnitude(self, *args):
        """setMagnitude(StationMagnitude self, RealQuantity magnitude)"""
        return _DataModel.StationMagnitude_setMagnitude(self, *args)

    def magnitude(self, *args):
        """
        magnitude(StationMagnitude self) -> RealQuantity
        magnitude(StationMagnitude self) -> RealQuantity
        """
        return _DataModel.StationMagnitude_magnitude(self, *args)

    def setType(self, *args):
        """setType(StationMagnitude self, std::string const & type)"""
        return _DataModel.StationMagnitude_setType(self, *args)

    def type(self):
        """type(StationMagnitude self) -> std::string const &"""
        return _DataModel.StationMagnitude_type(self)

    def setAmplitudeID(self, *args):
        """setAmplitudeID(StationMagnitude self, std::string const & amplitudeID)"""
        return _DataModel.StationMagnitude_setAmplitudeID(self, *args)

    def amplitudeID(self):
        """amplitudeID(StationMagnitude self) -> std::string const &"""
        return _DataModel.StationMagnitude_amplitudeID(self)

    def setMethodID(self, *args):
        """setMethodID(StationMagnitude self, std::string const & methodID)"""
        return _DataModel.StationMagnitude_setMethodID(self, *args)

    def methodID(self):
        """methodID(StationMagnitude self) -> std::string const &"""
        return _DataModel.StationMagnitude_methodID(self)

    def setWaveformID(self, *args):
        """setWaveformID(StationMagnitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::WaveformStreamID >::Impl const & waveformID)"""
        return _DataModel.StationMagnitude_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(StationMagnitude self) -> WaveformStreamID
        waveformID(StationMagnitude self) -> WaveformStreamID
        """
        return _DataModel.StationMagnitude_waveformID(self, *args)

    def setCreationInfo(self, *args):
        """setCreationInfo(StationMagnitude self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.StationMagnitude_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(StationMagnitude self) -> CreationInfo
        creationInfo(StationMagnitude self) -> CreationInfo
        """
        return _DataModel.StationMagnitude_creationInfo(self, *args)

    def add(self, *args):
        """add(StationMagnitude self, Comment obj) -> bool"""
        return _DataModel.StationMagnitude_add(self, *args)

    def remove(self, *args):
        """remove(StationMagnitude self, Comment obj) -> bool"""
        return _DataModel.StationMagnitude_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(StationMagnitude self, size_t i) -> bool
        removeComment(StationMagnitude self, CommentIndex i) -> bool
        """
        return _DataModel.StationMagnitude_removeComment(self, *args)

    def commentCount(self):
        """commentCount(StationMagnitude self) -> size_t"""
        return _DataModel.StationMagnitude_commentCount(self)

    def comment(self, *args):
        """
        comment(StationMagnitude self, size_t i) -> Comment
        comment(StationMagnitude self, CommentIndex i) -> Comment
        """
        return _DataModel.StationMagnitude_comment(self, *args)

    def origin(self):
        """origin(StationMagnitude self) -> Origin"""
        return _DataModel.StationMagnitude_origin(self)

    def assign(self, *args):
        """assign(StationMagnitude self, Object other) -> bool"""
        return _DataModel.StationMagnitude_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(StationMagnitude self, PublicObject parent) -> bool"""
        return _DataModel.StationMagnitude_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(StationMagnitude self, PublicObject parent) -> bool"""
        return _DataModel.StationMagnitude_detachFrom(self, *args)

    def detach(self):
        """detach(StationMagnitude self) -> bool"""
        return _DataModel.StationMagnitude_detach(self)

    def clone(self):
        """clone(StationMagnitude self) -> Object"""
        return _DataModel.StationMagnitude_clone(self)

    def updateChild(self, *args):
        """updateChild(StationMagnitude self, Object child) -> bool"""
        return _DataModel.StationMagnitude_updateChild(self, *args)

    def accept(self, *args):
        """accept(StationMagnitude self, Visitor arg2)"""
        return _DataModel.StationMagnitude_accept(self, *args)

StationMagnitude_swigregister = _DataModel.StationMagnitude_swigregister
StationMagnitude_swigregister(StationMagnitude)

def StationMagnitude_ClassName():
  """StationMagnitude_ClassName() -> char const *"""
  return _DataModel.StationMagnitude_ClassName()

def StationMagnitude_TypeInfo():
  """StationMagnitude_TypeInfo() -> RTTI"""
  return _DataModel.StationMagnitude_TypeInfo()

def StationMagnitude_Cast(*args):
  """
    Cast(BaseObject o) -> StationMagnitude
    StationMagnitude_Cast(Seiscomp::Core::BaseObjectPtr o) -> StationMagnitude
    """
  return _DataModel.StationMagnitude_Cast(*args)

def StationMagnitude_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> StationMagnitude
    StationMagnitude_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> StationMagnitude
    """
  return _DataModel.StationMagnitude_ConstCast(*args)

def StationMagnitude_Create(*args):
  """
    Create() -> StationMagnitude
    StationMagnitude_Create(std::string const & publicID) -> StationMagnitude
    """
  return _DataModel.StationMagnitude_Create(*args)

def StationMagnitude_Find(*args):
  """StationMagnitude_Find(std::string const & publicID) -> StationMagnitude"""
  return _DataModel.StationMagnitude_Find(*args)

class Pick(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Pick class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pick, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Pick_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Pick_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Pick self) -> char const *"""
        return _DataModel.Pick_className(self)

    def typeInfo(self):
        """typeInfo(Pick self) -> RTTI"""
        return _DataModel.Pick_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Pick
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Pick
        """
        return _DataModel.Pick_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Pick
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Pick
        """
        return _DataModel.Pick_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Pick self, GenericArchive ar)"""
        return _DataModel.Pick_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Pick self, Pick other) -> Pick
        __init__(Seiscomp::DataModel::Pick self, std::string const & publicID) -> Pick
        """
        this = _DataModel.new_Pick(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Pick
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Pick
        Create(std::string const & publicID) -> Pick
        """
        return _DataModel.Pick_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Pick"""
        return _DataModel.Pick_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Pick self, Pick other) -> bool"""
        return _DataModel.Pick___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Pick self, Pick other) -> bool"""
        return _DataModel.Pick___ne__(self, *args)

    def equal(self, *args):
        """equal(Pick self, Pick other) -> bool"""
        return _DataModel.Pick_equal(self, *args)

    def setTime(self, *args):
        """setTime(Pick self, TimeQuantity time)"""
        return _DataModel.Pick_setTime(self, *args)

    def time(self, *args):
        """
        time(Pick self) -> TimeQuantity
        time(Pick self) -> TimeQuantity
        """
        return _DataModel.Pick_time(self, *args)

    def setWaveformID(self, *args):
        """setWaveformID(Pick self, WaveformStreamID waveformID)"""
        return _DataModel.Pick_setWaveformID(self, *args)

    def waveformID(self, *args):
        """
        waveformID(Pick self) -> WaveformStreamID
        waveformID(Pick self) -> WaveformStreamID
        """
        return _DataModel.Pick_waveformID(self, *args)

    def setFilterID(self, *args):
        """setFilterID(Pick self, std::string const & filterID)"""
        return _DataModel.Pick_setFilterID(self, *args)

    def filterID(self):
        """filterID(Pick self) -> std::string const &"""
        return _DataModel.Pick_filterID(self)

    def setMethodID(self, *args):
        """setMethodID(Pick self, std::string const & methodID)"""
        return _DataModel.Pick_setMethodID(self, *args)

    def methodID(self):
        """methodID(Pick self) -> std::string const &"""
        return _DataModel.Pick_methodID(self)

    def setHorizontalSlowness(self, *args):
        """setHorizontalSlowness(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & horizontalSlowness)"""
        return _DataModel.Pick_setHorizontalSlowness(self, *args)

    def horizontalSlowness(self, *args):
        """
        horizontalSlowness(Pick self) -> RealQuantity
        horizontalSlowness(Pick self) -> RealQuantity
        """
        return _DataModel.Pick_horizontalSlowness(self, *args)

    def setBackazimuth(self, *args):
        """setBackazimuth(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & backazimuth)"""
        return _DataModel.Pick_setBackazimuth(self, *args)

    def backazimuth(self, *args):
        """
        backazimuth(Pick self) -> RealQuantity
        backazimuth(Pick self) -> RealQuantity
        """
        return _DataModel.Pick_backazimuth(self, *args)

    def setSlownessMethodID(self, *args):
        """setSlownessMethodID(Pick self, std::string const & slownessMethodID)"""
        return _DataModel.Pick_setSlownessMethodID(self, *args)

    def slownessMethodID(self):
        """slownessMethodID(Pick self) -> std::string const &"""
        return _DataModel.Pick_slownessMethodID(self)

    def setOnset(self, *args):
        """setOnset(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::PickOnset >::Impl const & onset)"""
        return _DataModel.Pick_setOnset(self, *args)

    def onset(self):
        """onset(Pick self) -> Seiscomp::DataModel::PickOnset"""
        return _DataModel.Pick_onset(self)

    def setPhaseHint(self, *args):
        """setPhaseHint(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::Phase >::Impl const & phaseHint)"""
        return _DataModel.Pick_setPhaseHint(self, *args)

    def phaseHint(self, *args):
        """
        phaseHint(Pick self) -> Phase
        phaseHint(Pick self) -> Phase
        """
        return _DataModel.Pick_phaseHint(self, *args)

    def setPolarity(self, *args):
        """setPolarity(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::PickPolarity >::Impl const & polarity)"""
        return _DataModel.Pick_setPolarity(self, *args)

    def polarity(self):
        """polarity(Pick self) -> Seiscomp::DataModel::PickPolarity"""
        return _DataModel.Pick_polarity(self)

    def setEvaluationMode(self, *args):
        """setEvaluationMode(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationMode >::Impl const & evaluationMode)"""
        return _DataModel.Pick_setEvaluationMode(self, *args)

    def evaluationMode(self):
        """evaluationMode(Pick self) -> Seiscomp::DataModel::EvaluationMode"""
        return _DataModel.Pick_evaluationMode(self)

    def setEvaluationStatus(self, *args):
        """setEvaluationStatus(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationStatus >::Impl const & evaluationStatus)"""
        return _DataModel.Pick_setEvaluationStatus(self, *args)

    def evaluationStatus(self):
        """evaluationStatus(Pick self) -> Seiscomp::DataModel::EvaluationStatus"""
        return _DataModel.Pick_evaluationStatus(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Pick self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Pick_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Pick self) -> CreationInfo
        creationInfo(Pick self) -> CreationInfo
        """
        return _DataModel.Pick_creationInfo(self, *args)

    def add(self, *args):
        """add(Pick self, Comment obj) -> bool"""
        return _DataModel.Pick_add(self, *args)

    def remove(self, *args):
        """remove(Pick self, Comment obj) -> bool"""
        return _DataModel.Pick_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(Pick self, size_t i) -> bool
        removeComment(Pick self, CommentIndex i) -> bool
        """
        return _DataModel.Pick_removeComment(self, *args)

    def commentCount(self):
        """commentCount(Pick self) -> size_t"""
        return _DataModel.Pick_commentCount(self)

    def comment(self, *args):
        """
        comment(Pick self, size_t i) -> Comment
        comment(Pick self, CommentIndex i) -> Comment
        """
        return _DataModel.Pick_comment(self, *args)

    def eventParameters(self):
        """eventParameters(Pick self) -> EventParameters"""
        return _DataModel.Pick_eventParameters(self)

    def assign(self, *args):
        """assign(Pick self, Object other) -> bool"""
        return _DataModel.Pick_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Pick self, PublicObject parent) -> bool"""
        return _DataModel.Pick_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Pick self, PublicObject parent) -> bool"""
        return _DataModel.Pick_detachFrom(self, *args)

    def detach(self):
        """detach(Pick self) -> bool"""
        return _DataModel.Pick_detach(self)

    def clone(self):
        """clone(Pick self) -> Object"""
        return _DataModel.Pick_clone(self)

    def updateChild(self, *args):
        """updateChild(Pick self, Object child) -> bool"""
        return _DataModel.Pick_updateChild(self, *args)

    def accept(self, *args):
        """accept(Pick self, Visitor arg2)"""
        return _DataModel.Pick_accept(self, *args)

Pick_swigregister = _DataModel.Pick_swigregister
Pick_swigregister(Pick)

def Pick_ClassName():
  """Pick_ClassName() -> char const *"""
  return _DataModel.Pick_ClassName()

def Pick_TypeInfo():
  """Pick_TypeInfo() -> RTTI"""
  return _DataModel.Pick_TypeInfo()

def Pick_Cast(*args):
  """
    Cast(BaseObject o) -> Pick
    Pick_Cast(Seiscomp::Core::BaseObjectPtr o) -> Pick
    """
  return _DataModel.Pick_Cast(*args)

def Pick_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Pick
    Pick_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Pick
    """
  return _DataModel.Pick_ConstCast(*args)

def Pick_Create(*args):
  """
    Create() -> Pick
    Pick_Create(std::string const & publicID) -> Pick
    """
  return _DataModel.Pick_Create(*args)

def Pick_Find(*args):
  """Pick_Find(std::string const & publicID) -> Pick"""
  return _DataModel.Pick_Find(*args)

class OriginReferenceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::OriginReferenceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OriginReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::OriginReferenceIndex self) -> OriginReferenceIndex
        __init__(Seiscomp::DataModel::OriginReferenceIndex self, std::string const & originID) -> OriginReferenceIndex
        __init__(Seiscomp::DataModel::OriginReferenceIndex self, OriginReferenceIndex arg2) -> OriginReferenceIndex
        """
        this = _DataModel.new_OriginReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(OriginReferenceIndex self, OriginReferenceIndex arg2) -> bool"""
        return _DataModel.OriginReferenceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(OriginReferenceIndex self, OriginReferenceIndex arg2) -> bool"""
        return _DataModel.OriginReferenceIndex___ne__(self, *args)

    __swig_setmethods__["originID"] = _DataModel.OriginReferenceIndex_originID_set
    __swig_getmethods__["originID"] = _DataModel.OriginReferenceIndex_originID_get
    if _newclass:originID = _swig_property(_DataModel.OriginReferenceIndex_originID_get, _DataModel.OriginReferenceIndex_originID_set)
    __swig_destroy__ = _DataModel.delete_OriginReferenceIndex
    __del__ = lambda self : None;
OriginReferenceIndex_swigregister = _DataModel.OriginReferenceIndex_swigregister
OriginReferenceIndex_swigregister(OriginReferenceIndex)

class OriginReference(Object):
    """Proxy of C++ Seiscomp::DataModel::OriginReference class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginReference, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.OriginReference_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.OriginReference_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(OriginReference self) -> char const *"""
        return _DataModel.OriginReference_className(self)

    def typeInfo(self):
        """typeInfo(OriginReference self) -> RTTI"""
        return _DataModel.OriginReference_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> OriginReference
        Cast(Seiscomp::Core::BaseObjectPtr o) -> OriginReference
        """
        return _DataModel.OriginReference_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> OriginReference
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> OriginReference
        """
        return _DataModel.OriginReference_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(OriginReference self, GenericArchive ar)"""
        return _DataModel.OriginReference_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::OriginReference self) -> OriginReference
        __init__(Seiscomp::DataModel::OriginReference self, OriginReference other) -> OriginReference
        __init__(Seiscomp::DataModel::OriginReference self, std::string const & originID) -> OriginReference
        """
        this = _DataModel.new_OriginReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_OriginReference
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(OriginReference self, OriginReference other) -> bool"""
        return _DataModel.OriginReference___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(OriginReference self, OriginReference other) -> bool"""
        return _DataModel.OriginReference___ne__(self, *args)

    def equal(self, *args):
        """equal(OriginReference self, OriginReference other) -> bool"""
        return _DataModel.OriginReference_equal(self, *args)

    def setOriginID(self, *args):
        """setOriginID(OriginReference self, std::string const & originID)"""
        return _DataModel.OriginReference_setOriginID(self, *args)

    def originID(self):
        """originID(OriginReference self) -> std::string const &"""
        return _DataModel.OriginReference_originID(self)

    def index(self):
        """index(OriginReference self) -> OriginReferenceIndex"""
        return _DataModel.OriginReference_index(self)

    def equalIndex(self, *args):
        """equalIndex(OriginReference self, OriginReference lhs) -> bool"""
        return _DataModel.OriginReference_equalIndex(self, *args)

    def event(self):
        """event(OriginReference self) -> Event"""
        return _DataModel.OriginReference_event(self)

    def assign(self, *args):
        """assign(OriginReference self, Object other) -> bool"""
        return _DataModel.OriginReference_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(OriginReference self, PublicObject parent) -> bool"""
        return _DataModel.OriginReference_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(OriginReference self, PublicObject parent) -> bool"""
        return _DataModel.OriginReference_detachFrom(self, *args)

    def detach(self):
        """detach(OriginReference self) -> bool"""
        return _DataModel.OriginReference_detach(self)

    def clone(self):
        """clone(OriginReference self) -> Object"""
        return _DataModel.OriginReference_clone(self)

    def accept(self, *args):
        """accept(OriginReference self, Visitor arg2)"""
        return _DataModel.OriginReference_accept(self, *args)

OriginReference_swigregister = _DataModel.OriginReference_swigregister
OriginReference_swigregister(OriginReference)

def OriginReference_ClassName():
  """OriginReference_ClassName() -> char const *"""
  return _DataModel.OriginReference_ClassName()

def OriginReference_TypeInfo():
  """OriginReference_TypeInfo() -> RTTI"""
  return _DataModel.OriginReference_TypeInfo()

def OriginReference_Cast(*args):
  """
    Cast(BaseObject o) -> OriginReference
    OriginReference_Cast(Seiscomp::Core::BaseObjectPtr o) -> OriginReference
    """
  return _DataModel.OriginReference_Cast(*args)

def OriginReference_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> OriginReference
    OriginReference_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> OriginReference
    """
  return _DataModel.OriginReference_ConstCast(*args)

class FocalMechanismReferenceIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::FocalMechanismReferenceIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalMechanismReferenceIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FocalMechanismReferenceIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::FocalMechanismReferenceIndex self) -> FocalMechanismReferenceIndex
        __init__(Seiscomp::DataModel::FocalMechanismReferenceIndex self, std::string const & focalMechanismID) -> FocalMechanismReferenceIndex
        __init__(Seiscomp::DataModel::FocalMechanismReferenceIndex self, FocalMechanismReferenceIndex arg2) -> FocalMechanismReferenceIndex
        """
        this = _DataModel.new_FocalMechanismReferenceIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(FocalMechanismReferenceIndex self, FocalMechanismReferenceIndex arg2) -> bool"""
        return _DataModel.FocalMechanismReferenceIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(FocalMechanismReferenceIndex self, FocalMechanismReferenceIndex arg2) -> bool"""
        return _DataModel.FocalMechanismReferenceIndex___ne__(self, *args)

    __swig_setmethods__["focalMechanismID"] = _DataModel.FocalMechanismReferenceIndex_focalMechanismID_set
    __swig_getmethods__["focalMechanismID"] = _DataModel.FocalMechanismReferenceIndex_focalMechanismID_get
    if _newclass:focalMechanismID = _swig_property(_DataModel.FocalMechanismReferenceIndex_focalMechanismID_get, _DataModel.FocalMechanismReferenceIndex_focalMechanismID_set)
    __swig_destroy__ = _DataModel.delete_FocalMechanismReferenceIndex
    __del__ = lambda self : None;
FocalMechanismReferenceIndex_swigregister = _DataModel.FocalMechanismReferenceIndex_swigregister
FocalMechanismReferenceIndex_swigregister(FocalMechanismReferenceIndex)

class FocalMechanismReference(Object):
    """Proxy of C++ Seiscomp::DataModel::FocalMechanismReference class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalMechanismReference, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalMechanismReference, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.FocalMechanismReference_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.FocalMechanismReference_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(FocalMechanismReference self) -> char const *"""
        return _DataModel.FocalMechanismReference_className(self)

    def typeInfo(self):
        """typeInfo(FocalMechanismReference self) -> RTTI"""
        return _DataModel.FocalMechanismReference_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> FocalMechanismReference
        Cast(Seiscomp::Core::BaseObjectPtr o) -> FocalMechanismReference
        """
        return _DataModel.FocalMechanismReference_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> FocalMechanismReference
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> FocalMechanismReference
        """
        return _DataModel.FocalMechanismReference_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(FocalMechanismReference self, GenericArchive ar)"""
        return _DataModel.FocalMechanismReference_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::FocalMechanismReference self) -> FocalMechanismReference
        __init__(Seiscomp::DataModel::FocalMechanismReference self, FocalMechanismReference other) -> FocalMechanismReference
        __init__(Seiscomp::DataModel::FocalMechanismReference self, std::string const & focalMechanismID) -> FocalMechanismReference
        """
        this = _DataModel.new_FocalMechanismReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_FocalMechanismReference
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(FocalMechanismReference self, FocalMechanismReference other) -> bool"""
        return _DataModel.FocalMechanismReference___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(FocalMechanismReference self, FocalMechanismReference other) -> bool"""
        return _DataModel.FocalMechanismReference___ne__(self, *args)

    def equal(self, *args):
        """equal(FocalMechanismReference self, FocalMechanismReference other) -> bool"""
        return _DataModel.FocalMechanismReference_equal(self, *args)

    def setFocalMechanismID(self, *args):
        """setFocalMechanismID(FocalMechanismReference self, std::string const & focalMechanismID)"""
        return _DataModel.FocalMechanismReference_setFocalMechanismID(self, *args)

    def focalMechanismID(self):
        """focalMechanismID(FocalMechanismReference self) -> std::string const &"""
        return _DataModel.FocalMechanismReference_focalMechanismID(self)

    def index(self):
        """index(FocalMechanismReference self) -> FocalMechanismReferenceIndex"""
        return _DataModel.FocalMechanismReference_index(self)

    def equalIndex(self, *args):
        """equalIndex(FocalMechanismReference self, FocalMechanismReference lhs) -> bool"""
        return _DataModel.FocalMechanismReference_equalIndex(self, *args)

    def event(self):
        """event(FocalMechanismReference self) -> Event"""
        return _DataModel.FocalMechanismReference_event(self)

    def assign(self, *args):
        """assign(FocalMechanismReference self, Object other) -> bool"""
        return _DataModel.FocalMechanismReference_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(FocalMechanismReference self, PublicObject parent) -> bool"""
        return _DataModel.FocalMechanismReference_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(FocalMechanismReference self, PublicObject parent) -> bool"""
        return _DataModel.FocalMechanismReference_detachFrom(self, *args)

    def detach(self):
        """detach(FocalMechanismReference self) -> bool"""
        return _DataModel.FocalMechanismReference_detach(self)

    def clone(self):
        """clone(FocalMechanismReference self) -> Object"""
        return _DataModel.FocalMechanismReference_clone(self)

    def accept(self, *args):
        """accept(FocalMechanismReference self, Visitor arg2)"""
        return _DataModel.FocalMechanismReference_accept(self, *args)

FocalMechanismReference_swigregister = _DataModel.FocalMechanismReference_swigregister
FocalMechanismReference_swigregister(FocalMechanismReference)

def FocalMechanismReference_ClassName():
  """FocalMechanismReference_ClassName() -> char const *"""
  return _DataModel.FocalMechanismReference_ClassName()

def FocalMechanismReference_TypeInfo():
  """FocalMechanismReference_TypeInfo() -> RTTI"""
  return _DataModel.FocalMechanismReference_TypeInfo()

def FocalMechanismReference_Cast(*args):
  """
    Cast(BaseObject o) -> FocalMechanismReference
    FocalMechanismReference_Cast(Seiscomp::Core::BaseObjectPtr o) -> FocalMechanismReference
    """
  return _DataModel.FocalMechanismReference_Cast(*args)

def FocalMechanismReference_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> FocalMechanismReference
    FocalMechanismReference_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> FocalMechanismReference
    """
  return _DataModel.FocalMechanismReference_ConstCast(*args)

class Event(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Event class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Event_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Event_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Event self) -> char const *"""
        return _DataModel.Event_className(self)

    def typeInfo(self):
        """typeInfo(Event self) -> RTTI"""
        return _DataModel.Event_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Event
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Event
        """
        return _DataModel.Event_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Event
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Event
        """
        return _DataModel.Event_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Event self, GenericArchive ar)"""
        return _DataModel.Event_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Event self, Event other) -> Event
        __init__(Seiscomp::DataModel::Event self, std::string const & publicID) -> Event
        """
        this = _DataModel.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Event
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Event
        Create(std::string const & publicID) -> Event
        """
        return _DataModel.Event_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Event"""
        return _DataModel.Event_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Event self, Event other) -> bool"""
        return _DataModel.Event___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Event self, Event other) -> bool"""
        return _DataModel.Event___ne__(self, *args)

    def equal(self, *args):
        """equal(Event self, Event other) -> bool"""
        return _DataModel.Event_equal(self, *args)

    def setPreferredOriginID(self, *args):
        """setPreferredOriginID(Event self, std::string const & preferredOriginID)"""
        return _DataModel.Event_setPreferredOriginID(self, *args)

    def preferredOriginID(self):
        """preferredOriginID(Event self) -> std::string const &"""
        return _DataModel.Event_preferredOriginID(self)

    def setPreferredMagnitudeID(self, *args):
        """setPreferredMagnitudeID(Event self, std::string const & preferredMagnitudeID)"""
        return _DataModel.Event_setPreferredMagnitudeID(self, *args)

    def preferredMagnitudeID(self):
        """preferredMagnitudeID(Event self) -> std::string const &"""
        return _DataModel.Event_preferredMagnitudeID(self)

    def setPreferredFocalMechanismID(self, *args):
        """setPreferredFocalMechanismID(Event self, std::string const & preferredFocalMechanismID)"""
        return _DataModel.Event_setPreferredFocalMechanismID(self, *args)

    def preferredFocalMechanismID(self):
        """preferredFocalMechanismID(Event self) -> std::string const &"""
        return _DataModel.Event_preferredFocalMechanismID(self)

    def setType(self, *args):
        """setType(Event self, Seiscomp::Core::Optional< Seiscomp::DataModel::EventType >::Impl const & type)"""
        return _DataModel.Event_setType(self, *args)

    def type(self):
        """type(Event self) -> Seiscomp::DataModel::EventType"""
        return _DataModel.Event_type(self)

    def setTypeCertainty(self, *args):
        """setTypeCertainty(Event self, Seiscomp::Core::Optional< Seiscomp::DataModel::EventTypeCertainty >::Impl const & typeCertainty)"""
        return _DataModel.Event_setTypeCertainty(self, *args)

    def typeCertainty(self):
        """typeCertainty(Event self) -> Seiscomp::DataModel::EventTypeCertainty"""
        return _DataModel.Event_typeCertainty(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Event self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Event_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Event self) -> CreationInfo
        creationInfo(Event self) -> CreationInfo
        """
        return _DataModel.Event_creationInfo(self, *args)

    def add(self, *args):
        """
        add(Event self, EventDescription obj) -> bool
        add(Event self, Comment obj) -> bool
        add(Event self, OriginReference obj) -> bool
        add(Event self, FocalMechanismReference obj) -> bool
        """
        return _DataModel.Event_add(self, *args)

    def remove(self, *args):
        """
        remove(Event self, EventDescription obj) -> bool
        remove(Event self, Comment obj) -> bool
        remove(Event self, OriginReference obj) -> bool
        remove(Event self, FocalMechanismReference obj) -> bool
        """
        return _DataModel.Event_remove(self, *args)

    def removeEventDescription(self, *args):
        """
        removeEventDescription(Event self, size_t i) -> bool
        removeEventDescription(Event self, EventDescriptionIndex i) -> bool
        """
        return _DataModel.Event_removeEventDescription(self, *args)

    def removeComment(self, *args):
        """
        removeComment(Event self, size_t i) -> bool
        removeComment(Event self, CommentIndex i) -> bool
        """
        return _DataModel.Event_removeComment(self, *args)

    def removeOriginReference(self, *args):
        """
        removeOriginReference(Event self, size_t i) -> bool
        removeOriginReference(Event self, OriginReferenceIndex i) -> bool
        """
        return _DataModel.Event_removeOriginReference(self, *args)

    def removeFocalMechanismReference(self, *args):
        """
        removeFocalMechanismReference(Event self, size_t i) -> bool
        removeFocalMechanismReference(Event self, FocalMechanismReferenceIndex i) -> bool
        """
        return _DataModel.Event_removeFocalMechanismReference(self, *args)

    def eventDescriptionCount(self):
        """eventDescriptionCount(Event self) -> size_t"""
        return _DataModel.Event_eventDescriptionCount(self)

    def commentCount(self):
        """commentCount(Event self) -> size_t"""
        return _DataModel.Event_commentCount(self)

    def originReferenceCount(self):
        """originReferenceCount(Event self) -> size_t"""
        return _DataModel.Event_originReferenceCount(self)

    def focalMechanismReferenceCount(self):
        """focalMechanismReferenceCount(Event self) -> size_t"""
        return _DataModel.Event_focalMechanismReferenceCount(self)

    def eventDescription(self, *args):
        """
        eventDescription(Event self, size_t i) -> EventDescription
        eventDescription(Event self, EventDescriptionIndex i) -> EventDescription
        """
        return _DataModel.Event_eventDescription(self, *args)

    def comment(self, *args):
        """
        comment(Event self, size_t i) -> Comment
        comment(Event self, CommentIndex i) -> Comment
        """
        return _DataModel.Event_comment(self, *args)

    def originReference(self, *args):
        """
        originReference(Event self, size_t i) -> OriginReference
        originReference(Event self, OriginReferenceIndex i) -> OriginReference
        """
        return _DataModel.Event_originReference(self, *args)

    def focalMechanismReference(self, *args):
        """
        focalMechanismReference(Event self, size_t i) -> FocalMechanismReference
        focalMechanismReference(Event self, FocalMechanismReferenceIndex i) -> FocalMechanismReference
        """
        return _DataModel.Event_focalMechanismReference(self, *args)

    def eventParameters(self):
        """eventParameters(Event self) -> EventParameters"""
        return _DataModel.Event_eventParameters(self)

    def assign(self, *args):
        """assign(Event self, Object other) -> bool"""
        return _DataModel.Event_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Event self, PublicObject parent) -> bool"""
        return _DataModel.Event_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Event self, PublicObject parent) -> bool"""
        return _DataModel.Event_detachFrom(self, *args)

    def detach(self):
        """detach(Event self) -> bool"""
        return _DataModel.Event_detach(self)

    def clone(self):
        """clone(Event self) -> Object"""
        return _DataModel.Event_clone(self)

    def updateChild(self, *args):
        """updateChild(Event self, Object child) -> bool"""
        return _DataModel.Event_updateChild(self, *args)

    def accept(self, *args):
        """accept(Event self, Visitor arg2)"""
        return _DataModel.Event_accept(self, *args)

Event_swigregister = _DataModel.Event_swigregister
Event_swigregister(Event)

def Event_ClassName():
  """Event_ClassName() -> char const *"""
  return _DataModel.Event_ClassName()

def Event_TypeInfo():
  """Event_TypeInfo() -> RTTI"""
  return _DataModel.Event_TypeInfo()

def Event_Cast(*args):
  """
    Cast(BaseObject o) -> Event
    Event_Cast(Seiscomp::Core::BaseObjectPtr o) -> Event
    """
  return _DataModel.Event_Cast(*args)

def Event_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Event
    Event_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Event
    """
  return _DataModel.Event_ConstCast(*args)

def Event_Create(*args):
  """
    Create() -> Event
    Event_Create(std::string const & publicID) -> Event
    """
  return _DataModel.Event_Create(*args)

def Event_Find(*args):
  """Event_Find(std::string const & publicID) -> Event"""
  return _DataModel.Event_Find(*args)

class ArrivalIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ArrivalIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrivalIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrivalIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ArrivalIndex self) -> ArrivalIndex
        __init__(Seiscomp::DataModel::ArrivalIndex self, std::string const & pickID) -> ArrivalIndex
        __init__(Seiscomp::DataModel::ArrivalIndex self, ArrivalIndex arg2) -> ArrivalIndex
        """
        this = _DataModel.new_ArrivalIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ArrivalIndex self, ArrivalIndex arg2) -> bool"""
        return _DataModel.ArrivalIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ArrivalIndex self, ArrivalIndex arg2) -> bool"""
        return _DataModel.ArrivalIndex___ne__(self, *args)

    __swig_setmethods__["pickID"] = _DataModel.ArrivalIndex_pickID_set
    __swig_getmethods__["pickID"] = _DataModel.ArrivalIndex_pickID_get
    if _newclass:pickID = _swig_property(_DataModel.ArrivalIndex_pickID_get, _DataModel.ArrivalIndex_pickID_set)
    __swig_destroy__ = _DataModel.delete_ArrivalIndex
    __del__ = lambda self : None;
ArrivalIndex_swigregister = _DataModel.ArrivalIndex_swigregister
ArrivalIndex_swigregister(ArrivalIndex)

class Arrival(Object):
    """Proxy of C++ Seiscomp::DataModel::Arrival class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arrival, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Arrival, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Arrival_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Arrival_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Arrival self) -> char const *"""
        return _DataModel.Arrival_className(self)

    def typeInfo(self):
        """typeInfo(Arrival self) -> RTTI"""
        return _DataModel.Arrival_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Arrival
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Arrival
        """
        return _DataModel.Arrival_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Arrival
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Arrival
        """
        return _DataModel.Arrival_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Arrival self, GenericArchive ar)"""
        return _DataModel.Arrival_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Arrival self) -> Arrival
        __init__(Seiscomp::DataModel::Arrival self, Arrival other) -> Arrival
        """
        this = _DataModel.new_Arrival(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Arrival
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Arrival self, Arrival other) -> bool"""
        return _DataModel.Arrival___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Arrival self, Arrival other) -> bool"""
        return _DataModel.Arrival___ne__(self, *args)

    def equal(self, *args):
        """equal(Arrival self, Arrival other) -> bool"""
        return _DataModel.Arrival_equal(self, *args)

    def setPickID(self, *args):
        """setPickID(Arrival self, std::string const & pickID)"""
        return _DataModel.Arrival_setPickID(self, *args)

    def pickID(self):
        """pickID(Arrival self) -> std::string const &"""
        return _DataModel.Arrival_pickID(self)

    def setPhase(self, *args):
        """setPhase(Arrival self, Phase phase)"""
        return _DataModel.Arrival_setPhase(self, *args)

    def phase(self, *args):
        """
        phase(Arrival self) -> Phase
        phase(Arrival self) -> Phase
        """
        return _DataModel.Arrival_phase(self, *args)

    def setTimeCorrection(self, *args):
        """setTimeCorrection(Arrival self, Seiscomp::Core::Optional< double >::Impl const & timeCorrection)"""
        return _DataModel.Arrival_setTimeCorrection(self, *args)

    def timeCorrection(self):
        """timeCorrection(Arrival self) -> double"""
        return _DataModel.Arrival_timeCorrection(self)

    def setAzimuth(self, *args):
        """setAzimuth(Arrival self, Seiscomp::Core::Optional< double >::Impl const & azimuth)"""
        return _DataModel.Arrival_setAzimuth(self, *args)

    def azimuth(self):
        """azimuth(Arrival self) -> double"""
        return _DataModel.Arrival_azimuth(self)

    def setDistance(self, *args):
        """setDistance(Arrival self, Seiscomp::Core::Optional< double >::Impl const & distance)"""
        return _DataModel.Arrival_setDistance(self, *args)

    def distance(self):
        """distance(Arrival self) -> double"""
        return _DataModel.Arrival_distance(self)

    def setTakeOffAngle(self, *args):
        """setTakeOffAngle(Arrival self, Seiscomp::Core::Optional< double >::Impl const & takeOffAngle)"""
        return _DataModel.Arrival_setTakeOffAngle(self, *args)

    def takeOffAngle(self):
        """takeOffAngle(Arrival self) -> double"""
        return _DataModel.Arrival_takeOffAngle(self)

    def setTimeResidual(self, *args):
        """setTimeResidual(Arrival self, Seiscomp::Core::Optional< double >::Impl const & timeResidual)"""
        return _DataModel.Arrival_setTimeResidual(self, *args)

    def timeResidual(self):
        """timeResidual(Arrival self) -> double"""
        return _DataModel.Arrival_timeResidual(self)

    def setHorizontalSlownessResidual(self, *args):
        """setHorizontalSlownessResidual(Arrival self, Seiscomp::Core::Optional< double >::Impl const & horizontalSlownessResidual)"""
        return _DataModel.Arrival_setHorizontalSlownessResidual(self, *args)

    def horizontalSlownessResidual(self):
        """horizontalSlownessResidual(Arrival self) -> double"""
        return _DataModel.Arrival_horizontalSlownessResidual(self)

    def setBackazimuthResidual(self, *args):
        """setBackazimuthResidual(Arrival self, Seiscomp::Core::Optional< double >::Impl const & backazimuthResidual)"""
        return _DataModel.Arrival_setBackazimuthResidual(self, *args)

    def backazimuthResidual(self):
        """backazimuthResidual(Arrival self) -> double"""
        return _DataModel.Arrival_backazimuthResidual(self)

    def setTimeUsed(self, *args):
        """setTimeUsed(Arrival self, Seiscomp::Core::Optional< bool >::Impl const & timeUsed)"""
        return _DataModel.Arrival_setTimeUsed(self, *args)

    def timeUsed(self):
        """timeUsed(Arrival self) -> bool"""
        return _DataModel.Arrival_timeUsed(self)

    def setHorizontalSlownessUsed(self, *args):
        """setHorizontalSlownessUsed(Arrival self, Seiscomp::Core::Optional< bool >::Impl const & horizontalSlownessUsed)"""
        return _DataModel.Arrival_setHorizontalSlownessUsed(self, *args)

    def horizontalSlownessUsed(self):
        """horizontalSlownessUsed(Arrival self) -> bool"""
        return _DataModel.Arrival_horizontalSlownessUsed(self)

    def setBackazimuthUsed(self, *args):
        """setBackazimuthUsed(Arrival self, Seiscomp::Core::Optional< bool >::Impl const & backazimuthUsed)"""
        return _DataModel.Arrival_setBackazimuthUsed(self, *args)

    def backazimuthUsed(self):
        """backazimuthUsed(Arrival self) -> bool"""
        return _DataModel.Arrival_backazimuthUsed(self)

    def setWeight(self, *args):
        """setWeight(Arrival self, Seiscomp::Core::Optional< double >::Impl const & weight)"""
        return _DataModel.Arrival_setWeight(self, *args)

    def weight(self):
        """weight(Arrival self) -> double"""
        return _DataModel.Arrival_weight(self)

    def setEarthModelID(self, *args):
        """setEarthModelID(Arrival self, std::string const & earthModelID)"""
        return _DataModel.Arrival_setEarthModelID(self, *args)

    def earthModelID(self):
        """earthModelID(Arrival self) -> std::string const &"""
        return _DataModel.Arrival_earthModelID(self)

    def setPreliminary(self, *args):
        """setPreliminary(Arrival self, Seiscomp::Core::Optional< bool >::Impl const & preliminary)"""
        return _DataModel.Arrival_setPreliminary(self, *args)

    def preliminary(self):
        """preliminary(Arrival self) -> bool"""
        return _DataModel.Arrival_preliminary(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Arrival self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Arrival_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Arrival self) -> CreationInfo
        creationInfo(Arrival self) -> CreationInfo
        """
        return _DataModel.Arrival_creationInfo(self, *args)

    def index(self):
        """index(Arrival self) -> ArrivalIndex"""
        return _DataModel.Arrival_index(self)

    def equalIndex(self, *args):
        """equalIndex(Arrival self, Arrival lhs) -> bool"""
        return _DataModel.Arrival_equalIndex(self, *args)

    def origin(self):
        """origin(Arrival self) -> Origin"""
        return _DataModel.Arrival_origin(self)

    def assign(self, *args):
        """assign(Arrival self, Object other) -> bool"""
        return _DataModel.Arrival_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Arrival self, PublicObject parent) -> bool"""
        return _DataModel.Arrival_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Arrival self, PublicObject parent) -> bool"""
        return _DataModel.Arrival_detachFrom(self, *args)

    def detach(self):
        """detach(Arrival self) -> bool"""
        return _DataModel.Arrival_detach(self)

    def clone(self):
        """clone(Arrival self) -> Object"""
        return _DataModel.Arrival_clone(self)

    def accept(self, *args):
        """accept(Arrival self, Visitor arg2)"""
        return _DataModel.Arrival_accept(self, *args)

Arrival_swigregister = _DataModel.Arrival_swigregister
Arrival_swigregister(Arrival)

def Arrival_ClassName():
  """Arrival_ClassName() -> char const *"""
  return _DataModel.Arrival_ClassName()

def Arrival_TypeInfo():
  """Arrival_TypeInfo() -> RTTI"""
  return _DataModel.Arrival_TypeInfo()

def Arrival_Cast(*args):
  """
    Cast(BaseObject o) -> Arrival
    Arrival_Cast(Seiscomp::Core::BaseObjectPtr o) -> Arrival
    """
  return _DataModel.Arrival_Cast(*args)

def Arrival_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Arrival
    Arrival_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Arrival
    """
  return _DataModel.Arrival_ConstCast(*args)

class Origin(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Origin class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Origin, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Origin, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Origin_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Origin_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Origin self) -> char const *"""
        return _DataModel.Origin_className(self)

    def typeInfo(self):
        """typeInfo(Origin self) -> RTTI"""
        return _DataModel.Origin_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Origin
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Origin
        """
        return _DataModel.Origin_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Origin
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Origin
        """
        return _DataModel.Origin_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Origin self, GenericArchive ar)"""
        return _DataModel.Origin_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Origin self, Origin other) -> Origin
        __init__(Seiscomp::DataModel::Origin self, std::string const & publicID) -> Origin
        """
        this = _DataModel.new_Origin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Origin
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Origin
        Create(std::string const & publicID) -> Origin
        """
        return _DataModel.Origin_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Origin"""
        return _DataModel.Origin_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Origin self, Origin other) -> bool"""
        return _DataModel.Origin___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Origin self, Origin other) -> bool"""
        return _DataModel.Origin___ne__(self, *args)

    def equal(self, *args):
        """equal(Origin self, Origin other) -> bool"""
        return _DataModel.Origin_equal(self, *args)

    def setTime(self, *args):
        """setTime(Origin self, TimeQuantity time)"""
        return _DataModel.Origin_setTime(self, *args)

    def time(self, *args):
        """
        time(Origin self) -> TimeQuantity
        time(Origin self) -> TimeQuantity
        """
        return _DataModel.Origin_time(self, *args)

    def setLatitude(self, *args):
        """setLatitude(Origin self, RealQuantity latitude)"""
        return _DataModel.Origin_setLatitude(self, *args)

    def latitude(self, *args):
        """
        latitude(Origin self) -> RealQuantity
        latitude(Origin self) -> RealQuantity
        """
        return _DataModel.Origin_latitude(self, *args)

    def setLongitude(self, *args):
        """setLongitude(Origin self, RealQuantity longitude)"""
        return _DataModel.Origin_setLongitude(self, *args)

    def longitude(self, *args):
        """
        longitude(Origin self) -> RealQuantity
        longitude(Origin self) -> RealQuantity
        """
        return _DataModel.Origin_longitude(self, *args)

    def setDepth(self, *args):
        """setDepth(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::RealQuantity >::Impl const & depth)"""
        return _DataModel.Origin_setDepth(self, *args)

    def depth(self, *args):
        """
        depth(Origin self) -> RealQuantity
        depth(Origin self) -> RealQuantity
        """
        return _DataModel.Origin_depth(self, *args)

    def setDepthType(self, *args):
        """setDepthType(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::OriginDepthType >::Impl const & depthType)"""
        return _DataModel.Origin_setDepthType(self, *args)

    def depthType(self):
        """depthType(Origin self) -> Seiscomp::DataModel::OriginDepthType"""
        return _DataModel.Origin_depthType(self)

    def setTimeFixed(self, *args):
        """setTimeFixed(Origin self, Seiscomp::Core::Optional< bool >::Impl const & timeFixed)"""
        return _DataModel.Origin_setTimeFixed(self, *args)

    def timeFixed(self):
        """timeFixed(Origin self) -> bool"""
        return _DataModel.Origin_timeFixed(self)

    def setEpicenterFixed(self, *args):
        """setEpicenterFixed(Origin self, Seiscomp::Core::Optional< bool >::Impl const & epicenterFixed)"""
        return _DataModel.Origin_setEpicenterFixed(self, *args)

    def epicenterFixed(self):
        """epicenterFixed(Origin self) -> bool"""
        return _DataModel.Origin_epicenterFixed(self)

    def setReferenceSystemID(self, *args):
        """setReferenceSystemID(Origin self, std::string const & referenceSystemID)"""
        return _DataModel.Origin_setReferenceSystemID(self, *args)

    def referenceSystemID(self):
        """referenceSystemID(Origin self) -> std::string const &"""
        return _DataModel.Origin_referenceSystemID(self)

    def setMethodID(self, *args):
        """setMethodID(Origin self, std::string const & methodID)"""
        return _DataModel.Origin_setMethodID(self, *args)

    def methodID(self):
        """methodID(Origin self) -> std::string const &"""
        return _DataModel.Origin_methodID(self)

    def setEarthModelID(self, *args):
        """setEarthModelID(Origin self, std::string const & earthModelID)"""
        return _DataModel.Origin_setEarthModelID(self, *args)

    def earthModelID(self):
        """earthModelID(Origin self) -> std::string const &"""
        return _DataModel.Origin_earthModelID(self)

    def setQuality(self, *args):
        """setQuality(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::OriginQuality >::Impl const & quality)"""
        return _DataModel.Origin_setQuality(self, *args)

    def quality(self, *args):
        """
        quality(Origin self) -> OriginQuality
        quality(Origin self) -> OriginQuality
        """
        return _DataModel.Origin_quality(self, *args)

    def setUncertainty(self, *args):
        """setUncertainty(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::OriginUncertainty >::Impl const & uncertainty)"""
        return _DataModel.Origin_setUncertainty(self, *args)

    def uncertainty(self, *args):
        """
        uncertainty(Origin self) -> OriginUncertainty
        uncertainty(Origin self) -> OriginUncertainty
        """
        return _DataModel.Origin_uncertainty(self, *args)

    def setType(self, *args):
        """setType(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::OriginType >::Impl const & type)"""
        return _DataModel.Origin_setType(self, *args)

    def type(self):
        """type(Origin self) -> Seiscomp::DataModel::OriginType"""
        return _DataModel.Origin_type(self)

    def setEvaluationMode(self, *args):
        """setEvaluationMode(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationMode >::Impl const & evaluationMode)"""
        return _DataModel.Origin_setEvaluationMode(self, *args)

    def evaluationMode(self):
        """evaluationMode(Origin self) -> Seiscomp::DataModel::EvaluationMode"""
        return _DataModel.Origin_evaluationMode(self)

    def setEvaluationStatus(self, *args):
        """setEvaluationStatus(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::EvaluationStatus >::Impl const & evaluationStatus)"""
        return _DataModel.Origin_setEvaluationStatus(self, *args)

    def evaluationStatus(self):
        """evaluationStatus(Origin self) -> Seiscomp::DataModel::EvaluationStatus"""
        return _DataModel.Origin_evaluationStatus(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(Origin self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.Origin_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(Origin self) -> CreationInfo
        creationInfo(Origin self) -> CreationInfo
        """
        return _DataModel.Origin_creationInfo(self, *args)

    def add(self, *args):
        """
        add(Origin self, Comment obj) -> bool
        add(Origin self, CompositeTime obj) -> bool
        add(Origin self, Arrival obj) -> bool
        add(Origin self, StationMagnitude obj) -> bool
        add(Origin self, Magnitude obj) -> bool
        """
        return _DataModel.Origin_add(self, *args)

    def remove(self, *args):
        """
        remove(Origin self, Comment obj) -> bool
        remove(Origin self, CompositeTime obj) -> bool
        remove(Origin self, Arrival obj) -> bool
        remove(Origin self, StationMagnitude obj) -> bool
        remove(Origin self, Magnitude obj) -> bool
        """
        return _DataModel.Origin_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(Origin self, size_t i) -> bool
        removeComment(Origin self, CommentIndex i) -> bool
        """
        return _DataModel.Origin_removeComment(self, *args)

    def removeCompositeTime(self, *args):
        """removeCompositeTime(Origin self, size_t i) -> bool"""
        return _DataModel.Origin_removeCompositeTime(self, *args)

    def removeArrival(self, *args):
        """
        removeArrival(Origin self, size_t i) -> bool
        removeArrival(Origin self, ArrivalIndex i) -> bool
        """
        return _DataModel.Origin_removeArrival(self, *args)

    def removeStationMagnitude(self, *args):
        """removeStationMagnitude(Origin self, size_t i) -> bool"""
        return _DataModel.Origin_removeStationMagnitude(self, *args)

    def removeMagnitude(self, *args):
        """removeMagnitude(Origin self, size_t i) -> bool"""
        return _DataModel.Origin_removeMagnitude(self, *args)

    def commentCount(self):
        """commentCount(Origin self) -> size_t"""
        return _DataModel.Origin_commentCount(self)

    def compositeTimeCount(self):
        """compositeTimeCount(Origin self) -> size_t"""
        return _DataModel.Origin_compositeTimeCount(self)

    def arrivalCount(self):
        """arrivalCount(Origin self) -> size_t"""
        return _DataModel.Origin_arrivalCount(self)

    def stationMagnitudeCount(self):
        """stationMagnitudeCount(Origin self) -> size_t"""
        return _DataModel.Origin_stationMagnitudeCount(self)

    def magnitudeCount(self):
        """magnitudeCount(Origin self) -> size_t"""
        return _DataModel.Origin_magnitudeCount(self)

    def comment(self, *args):
        """
        comment(Origin self, size_t i) -> Comment
        comment(Origin self, CommentIndex i) -> Comment
        """
        return _DataModel.Origin_comment(self, *args)

    def compositeTime(self, *args):
        """compositeTime(Origin self, size_t i) -> CompositeTime"""
        return _DataModel.Origin_compositeTime(self, *args)

    def arrival(self, *args):
        """
        arrival(Origin self, size_t i) -> Arrival
        arrival(Origin self, ArrivalIndex i) -> Arrival
        """
        return _DataModel.Origin_arrival(self, *args)

    def stationMagnitude(self, *args):
        """stationMagnitude(Origin self, size_t i) -> StationMagnitude"""
        return _DataModel.Origin_stationMagnitude(self, *args)

    def magnitude(self, *args):
        """magnitude(Origin self, size_t i) -> Magnitude"""
        return _DataModel.Origin_magnitude(self, *args)

    def findCompositeTime(self, *args):
        """findCompositeTime(Origin self, CompositeTime compositeTime) -> CompositeTime"""
        return _DataModel.Origin_findCompositeTime(self, *args)

    def findStationMagnitude(self, *args):
        """findStationMagnitude(Origin self, std::string const & publicID) -> StationMagnitude"""
        return _DataModel.Origin_findStationMagnitude(self, *args)

    def findMagnitude(self, *args):
        """findMagnitude(Origin self, std::string const & publicID) -> Magnitude"""
        return _DataModel.Origin_findMagnitude(self, *args)

    def eventParameters(self):
        """eventParameters(Origin self) -> EventParameters"""
        return _DataModel.Origin_eventParameters(self)

    def assign(self, *args):
        """assign(Origin self, Object other) -> bool"""
        return _DataModel.Origin_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Origin self, PublicObject parent) -> bool"""
        return _DataModel.Origin_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Origin self, PublicObject parent) -> bool"""
        return _DataModel.Origin_detachFrom(self, *args)

    def detach(self):
        """detach(Origin self) -> bool"""
        return _DataModel.Origin_detach(self)

    def clone(self):
        """clone(Origin self) -> Object"""
        return _DataModel.Origin_clone(self)

    def updateChild(self, *args):
        """updateChild(Origin self, Object child) -> bool"""
        return _DataModel.Origin_updateChild(self, *args)

    def accept(self, *args):
        """accept(Origin self, Visitor arg2)"""
        return _DataModel.Origin_accept(self, *args)

Origin_swigregister = _DataModel.Origin_swigregister
Origin_swigregister(Origin)

def Origin_ClassName():
  """Origin_ClassName() -> char const *"""
  return _DataModel.Origin_ClassName()

def Origin_TypeInfo():
  """Origin_TypeInfo() -> RTTI"""
  return _DataModel.Origin_TypeInfo()

def Origin_Cast(*args):
  """
    Cast(BaseObject o) -> Origin
    Origin_Cast(Seiscomp::Core::BaseObjectPtr o) -> Origin
    """
  return _DataModel.Origin_Cast(*args)

def Origin_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Origin
    Origin_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Origin
    """
  return _DataModel.Origin_ConstCast(*args)

def Origin_Create(*args):
  """
    Create() -> Origin
    Origin_Create(std::string const & publicID) -> Origin
    """
  return _DataModel.Origin_Create(*args)

def Origin_Find(*args):
  """Origin_Find(std::string const & publicID) -> Origin"""
  return _DataModel.Origin_Find(*args)

class EventParameters(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::EventParameters class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventParameters, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.EventParameters_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.EventParameters_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(EventParameters self) -> char const *"""
        return _DataModel.EventParameters_className(self)

    def typeInfo(self):
        """typeInfo(EventParameters self) -> RTTI"""
        return _DataModel.EventParameters_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> EventParameters
        Cast(Seiscomp::Core::BaseObjectPtr o) -> EventParameters
        """
        return _DataModel.EventParameters_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> EventParameters
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> EventParameters
        """
        return _DataModel.EventParameters_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(EventParameters self, GenericArchive ar)"""
        return _DataModel.EventParameters_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::EventParameters self) -> EventParameters
        __init__(Seiscomp::DataModel::EventParameters self, EventParameters other) -> EventParameters
        """
        this = _DataModel.new_EventParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_EventParameters
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(EventParameters self, EventParameters other) -> bool"""
        return _DataModel.EventParameters___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(EventParameters self, EventParameters other) -> bool"""
        return _DataModel.EventParameters___ne__(self, *args)

    def equal(self, *args):
        """equal(EventParameters self, EventParameters other) -> bool"""
        return _DataModel.EventParameters_equal(self, *args)

    def add(self, *args):
        """
        add(EventParameters self, Pick obj) -> bool
        add(EventParameters self, Amplitude obj) -> bool
        add(EventParameters self, Reading obj) -> bool
        add(EventParameters self, Origin obj) -> bool
        add(EventParameters self, FocalMechanism obj) -> bool
        add(EventParameters self, Event obj) -> bool
        """
        return _DataModel.EventParameters_add(self, *args)

    def remove(self, *args):
        """
        remove(EventParameters self, Pick obj) -> bool
        remove(EventParameters self, Amplitude obj) -> bool
        remove(EventParameters self, Reading obj) -> bool
        remove(EventParameters self, Origin obj) -> bool
        remove(EventParameters self, FocalMechanism obj) -> bool
        remove(EventParameters self, Event obj) -> bool
        """
        return _DataModel.EventParameters_remove(self, *args)

    def removePick(self, *args):
        """removePick(EventParameters self, size_t i) -> bool"""
        return _DataModel.EventParameters_removePick(self, *args)

    def removeAmplitude(self, *args):
        """removeAmplitude(EventParameters self, size_t i) -> bool"""
        return _DataModel.EventParameters_removeAmplitude(self, *args)

    def removeReading(self, *args):
        """removeReading(EventParameters self, size_t i) -> bool"""
        return _DataModel.EventParameters_removeReading(self, *args)

    def removeOrigin(self, *args):
        """removeOrigin(EventParameters self, size_t i) -> bool"""
        return _DataModel.EventParameters_removeOrigin(self, *args)

    def removeFocalMechanism(self, *args):
        """removeFocalMechanism(EventParameters self, size_t i) -> bool"""
        return _DataModel.EventParameters_removeFocalMechanism(self, *args)

    def removeEvent(self, *args):
        """removeEvent(EventParameters self, size_t i) -> bool"""
        return _DataModel.EventParameters_removeEvent(self, *args)

    def pickCount(self):
        """pickCount(EventParameters self) -> size_t"""
        return _DataModel.EventParameters_pickCount(self)

    def amplitudeCount(self):
        """amplitudeCount(EventParameters self) -> size_t"""
        return _DataModel.EventParameters_amplitudeCount(self)

    def readingCount(self):
        """readingCount(EventParameters self) -> size_t"""
        return _DataModel.EventParameters_readingCount(self)

    def originCount(self):
        """originCount(EventParameters self) -> size_t"""
        return _DataModel.EventParameters_originCount(self)

    def focalMechanismCount(self):
        """focalMechanismCount(EventParameters self) -> size_t"""
        return _DataModel.EventParameters_focalMechanismCount(self)

    def eventCount(self):
        """eventCount(EventParameters self) -> size_t"""
        return _DataModel.EventParameters_eventCount(self)

    def pick(self, *args):
        """pick(EventParameters self, size_t i) -> Pick"""
        return _DataModel.EventParameters_pick(self, *args)

    def amplitude(self, *args):
        """amplitude(EventParameters self, size_t i) -> Amplitude"""
        return _DataModel.EventParameters_amplitude(self, *args)

    def reading(self, *args):
        """reading(EventParameters self, size_t i) -> Reading"""
        return _DataModel.EventParameters_reading(self, *args)

    def origin(self, *args):
        """origin(EventParameters self, size_t i) -> Origin"""
        return _DataModel.EventParameters_origin(self, *args)

    def focalMechanism(self, *args):
        """focalMechanism(EventParameters self, size_t i) -> FocalMechanism"""
        return _DataModel.EventParameters_focalMechanism(self, *args)

    def event(self, *args):
        """event(EventParameters self, size_t i) -> Event"""
        return _DataModel.EventParameters_event(self, *args)

    def findPick(self, *args):
        """findPick(EventParameters self, std::string const & publicID) -> Pick"""
        return _DataModel.EventParameters_findPick(self, *args)

    def findAmplitude(self, *args):
        """findAmplitude(EventParameters self, std::string const & publicID) -> Amplitude"""
        return _DataModel.EventParameters_findAmplitude(self, *args)

    def findReading(self, *args):
        """findReading(EventParameters self, std::string const & publicID) -> Reading"""
        return _DataModel.EventParameters_findReading(self, *args)

    def findOrigin(self, *args):
        """findOrigin(EventParameters self, std::string const & publicID) -> Origin"""
        return _DataModel.EventParameters_findOrigin(self, *args)

    def findFocalMechanism(self, *args):
        """findFocalMechanism(EventParameters self, std::string const & publicID) -> FocalMechanism"""
        return _DataModel.EventParameters_findFocalMechanism(self, *args)

    def findEvent(self, *args):
        """findEvent(EventParameters self, std::string const & publicID) -> Event"""
        return _DataModel.EventParameters_findEvent(self, *args)

    def assign(self, *args):
        """assign(EventParameters self, Object other) -> bool"""
        return _DataModel.EventParameters_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(EventParameters self, PublicObject parent) -> bool"""
        return _DataModel.EventParameters_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(EventParameters self, PublicObject parent) -> bool"""
        return _DataModel.EventParameters_detachFrom(self, *args)

    def detach(self):
        """detach(EventParameters self) -> bool"""
        return _DataModel.EventParameters_detach(self)

    def clone(self):
        """clone(EventParameters self) -> Object"""
        return _DataModel.EventParameters_clone(self)

    def updateChild(self, *args):
        """updateChild(EventParameters self, Object child) -> bool"""
        return _DataModel.EventParameters_updateChild(self, *args)

    def accept(self, *args):
        """accept(EventParameters self, Visitor arg2)"""
        return _DataModel.EventParameters_accept(self, *args)

EventParameters_swigregister = _DataModel.EventParameters_swigregister
EventParameters_swigregister(EventParameters)

def EventParameters_ClassName():
  """EventParameters_ClassName() -> char const *"""
  return _DataModel.EventParameters_ClassName()

def EventParameters_TypeInfo():
  """EventParameters_TypeInfo() -> RTTI"""
  return _DataModel.EventParameters_TypeInfo()

def EventParameters_Cast(*args):
  """
    Cast(BaseObject o) -> EventParameters
    EventParameters_Cast(Seiscomp::Core::BaseObjectPtr o) -> EventParameters
    """
  return _DataModel.EventParameters_Cast(*args)

def EventParameters_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> EventParameters
    EventParameters_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> EventParameters
    """
  return _DataModel.EventParameters_ConstCast(*args)

class Parameter(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Parameter class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Parameter_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Parameter_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Parameter self) -> char const *"""
        return _DataModel.Parameter_className(self)

    def typeInfo(self):
        """typeInfo(Parameter self) -> RTTI"""
        return _DataModel.Parameter_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Parameter
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Parameter
        """
        return _DataModel.Parameter_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Parameter
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Parameter
        """
        return _DataModel.Parameter_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Parameter self, GenericArchive ar)"""
        return _DataModel.Parameter_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Parameter self, Parameter other) -> Parameter
        __init__(Seiscomp::DataModel::Parameter self, std::string const & publicID) -> Parameter
        """
        this = _DataModel.new_Parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Parameter
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Parameter
        Create(std::string const & publicID) -> Parameter
        """
        return _DataModel.Parameter_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Parameter"""
        return _DataModel.Parameter_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Parameter self, Parameter other) -> bool"""
        return _DataModel.Parameter___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Parameter self, Parameter other) -> bool"""
        return _DataModel.Parameter___ne__(self, *args)

    def equal(self, *args):
        """equal(Parameter self, Parameter other) -> bool"""
        return _DataModel.Parameter_equal(self, *args)

    def setName(self, *args):
        """setName(Parameter self, std::string const & name)"""
        return _DataModel.Parameter_setName(self, *args)

    def name(self):
        """name(Parameter self) -> std::string const &"""
        return _DataModel.Parameter_name(self)

    def setValue(self, *args):
        """setValue(Parameter self, std::string const & value)"""
        return _DataModel.Parameter_setValue(self, *args)

    def value(self):
        """value(Parameter self) -> std::string const &"""
        return _DataModel.Parameter_value(self)

    def add(self, *args):
        """add(Parameter self, Comment obj) -> bool"""
        return _DataModel.Parameter_add(self, *args)

    def remove(self, *args):
        """remove(Parameter self, Comment obj) -> bool"""
        return _DataModel.Parameter_remove(self, *args)

    def removeComment(self, *args):
        """
        removeComment(Parameter self, size_t i) -> bool
        removeComment(Parameter self, CommentIndex i) -> bool
        """
        return _DataModel.Parameter_removeComment(self, *args)

    def commentCount(self):
        """commentCount(Parameter self) -> size_t"""
        return _DataModel.Parameter_commentCount(self)

    def comment(self, *args):
        """
        comment(Parameter self, size_t i) -> Comment
        comment(Parameter self, CommentIndex i) -> Comment
        """
        return _DataModel.Parameter_comment(self, *args)

    def parameterSet(self):
        """parameterSet(Parameter self) -> ParameterSet"""
        return _DataModel.Parameter_parameterSet(self)

    def assign(self, *args):
        """assign(Parameter self, Object other) -> bool"""
        return _DataModel.Parameter_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Parameter self, PublicObject parent) -> bool"""
        return _DataModel.Parameter_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Parameter self, PublicObject parent) -> bool"""
        return _DataModel.Parameter_detachFrom(self, *args)

    def detach(self):
        """detach(Parameter self) -> bool"""
        return _DataModel.Parameter_detach(self)

    def clone(self):
        """clone(Parameter self) -> Object"""
        return _DataModel.Parameter_clone(self)

    def updateChild(self, *args):
        """updateChild(Parameter self, Object child) -> bool"""
        return _DataModel.Parameter_updateChild(self, *args)

    def accept(self, *args):
        """accept(Parameter self, Visitor arg2)"""
        return _DataModel.Parameter_accept(self, *args)

Parameter_swigregister = _DataModel.Parameter_swigregister
Parameter_swigregister(Parameter)

def Parameter_ClassName():
  """Parameter_ClassName() -> char const *"""
  return _DataModel.Parameter_ClassName()

def Parameter_TypeInfo():
  """Parameter_TypeInfo() -> RTTI"""
  return _DataModel.Parameter_TypeInfo()

def Parameter_Cast(*args):
  """
    Cast(BaseObject o) -> Parameter
    Parameter_Cast(Seiscomp::Core::BaseObjectPtr o) -> Parameter
    """
  return _DataModel.Parameter_Cast(*args)

def Parameter_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Parameter
    Parameter_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Parameter
    """
  return _DataModel.Parameter_ConstCast(*args)

def Parameter_Create(*args):
  """
    Create() -> Parameter
    Parameter_Create(std::string const & publicID) -> Parameter
    """
  return _DataModel.Parameter_Create(*args)

def Parameter_Find(*args):
  """Parameter_Find(std::string const & publicID) -> Parameter"""
  return _DataModel.Parameter_Find(*args)

class ParameterSet(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ParameterSet class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ParameterSet_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ParameterSet_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ParameterSet self) -> char const *"""
        return _DataModel.ParameterSet_className(self)

    def typeInfo(self):
        """typeInfo(ParameterSet self) -> RTTI"""
        return _DataModel.ParameterSet_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ParameterSet
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ParameterSet
        """
        return _DataModel.ParameterSet_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ParameterSet
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ParameterSet
        """
        return _DataModel.ParameterSet_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ParameterSet self, GenericArchive ar)"""
        return _DataModel.ParameterSet_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ParameterSet self, ParameterSet other) -> ParameterSet
        __init__(Seiscomp::DataModel::ParameterSet self, std::string const & publicID) -> ParameterSet
        """
        this = _DataModel.new_ParameterSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ParameterSet
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ParameterSet
        Create(std::string const & publicID) -> ParameterSet
        """
        return _DataModel.ParameterSet_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ParameterSet"""
        return _DataModel.ParameterSet_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ParameterSet self, ParameterSet other) -> bool"""
        return _DataModel.ParameterSet___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ParameterSet self, ParameterSet other) -> bool"""
        return _DataModel.ParameterSet___ne__(self, *args)

    def equal(self, *args):
        """equal(ParameterSet self, ParameterSet other) -> bool"""
        return _DataModel.ParameterSet_equal(self, *args)

    def setBaseID(self, *args):
        """setBaseID(ParameterSet self, std::string const & baseID)"""
        return _DataModel.ParameterSet_setBaseID(self, *args)

    def baseID(self):
        """baseID(ParameterSet self) -> std::string const &"""
        return _DataModel.ParameterSet_baseID(self)

    def setModuleID(self, *args):
        """setModuleID(ParameterSet self, std::string const & moduleID)"""
        return _DataModel.ParameterSet_setModuleID(self, *args)

    def moduleID(self):
        """moduleID(ParameterSet self) -> std::string const &"""
        return _DataModel.ParameterSet_moduleID(self)

    def setCreated(self, *args):
        """setCreated(ParameterSet self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & created)"""
        return _DataModel.ParameterSet_setCreated(self, *args)

    def created(self):
        """created(ParameterSet self) -> Time"""
        return _DataModel.ParameterSet_created(self)

    def add(self, *args):
        """
        add(ParameterSet self, Parameter obj) -> bool
        add(ParameterSet self, Comment obj) -> bool
        """
        return _DataModel.ParameterSet_add(self, *args)

    def remove(self, *args):
        """
        remove(ParameterSet self, Parameter obj) -> bool
        remove(ParameterSet self, Comment obj) -> bool
        """
        return _DataModel.ParameterSet_remove(self, *args)

    def removeParameter(self, *args):
        """removeParameter(ParameterSet self, size_t i) -> bool"""
        return _DataModel.ParameterSet_removeParameter(self, *args)

    def removeComment(self, *args):
        """
        removeComment(ParameterSet self, size_t i) -> bool
        removeComment(ParameterSet self, CommentIndex i) -> bool
        """
        return _DataModel.ParameterSet_removeComment(self, *args)

    def parameterCount(self):
        """parameterCount(ParameterSet self) -> size_t"""
        return _DataModel.ParameterSet_parameterCount(self)

    def commentCount(self):
        """commentCount(ParameterSet self) -> size_t"""
        return _DataModel.ParameterSet_commentCount(self)

    def parameter(self, *args):
        """parameter(ParameterSet self, size_t i) -> Parameter"""
        return _DataModel.ParameterSet_parameter(self, *args)

    def comment(self, *args):
        """
        comment(ParameterSet self, size_t i) -> Comment
        comment(ParameterSet self, CommentIndex i) -> Comment
        """
        return _DataModel.ParameterSet_comment(self, *args)

    def findParameter(self, *args):
        """findParameter(ParameterSet self, std::string const & publicID) -> Parameter"""
        return _DataModel.ParameterSet_findParameter(self, *args)

    def config(self):
        """config(ParameterSet self) -> Config"""
        return _DataModel.ParameterSet_config(self)

    def assign(self, *args):
        """assign(ParameterSet self, Object other) -> bool"""
        return _DataModel.ParameterSet_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ParameterSet self, PublicObject parent) -> bool"""
        return _DataModel.ParameterSet_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ParameterSet self, PublicObject parent) -> bool"""
        return _DataModel.ParameterSet_detachFrom(self, *args)

    def detach(self):
        """detach(ParameterSet self) -> bool"""
        return _DataModel.ParameterSet_detach(self)

    def clone(self):
        """clone(ParameterSet self) -> Object"""
        return _DataModel.ParameterSet_clone(self)

    def updateChild(self, *args):
        """updateChild(ParameterSet self, Object child) -> bool"""
        return _DataModel.ParameterSet_updateChild(self, *args)

    def accept(self, *args):
        """accept(ParameterSet self, Visitor arg2)"""
        return _DataModel.ParameterSet_accept(self, *args)

ParameterSet_swigregister = _DataModel.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)

def ParameterSet_ClassName():
  """ParameterSet_ClassName() -> char const *"""
  return _DataModel.ParameterSet_ClassName()

def ParameterSet_TypeInfo():
  """ParameterSet_TypeInfo() -> RTTI"""
  return _DataModel.ParameterSet_TypeInfo()

def ParameterSet_Cast(*args):
  """
    Cast(BaseObject o) -> ParameterSet
    ParameterSet_Cast(Seiscomp::Core::BaseObjectPtr o) -> ParameterSet
    """
  return _DataModel.ParameterSet_Cast(*args)

def ParameterSet_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ParameterSet
    ParameterSet_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ParameterSet
    """
  return _DataModel.ParameterSet_ConstCast(*args)

def ParameterSet_Create(*args):
  """
    Create() -> ParameterSet
    ParameterSet_Create(std::string const & publicID) -> ParameterSet
    """
  return _DataModel.ParameterSet_Create(*args)

def ParameterSet_Find(*args):
  """ParameterSet_Find(std::string const & publicID) -> ParameterSet"""
  return _DataModel.ParameterSet_Find(*args)

class SetupIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::SetupIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetupIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetupIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::SetupIndex self) -> SetupIndex
        __init__(Seiscomp::DataModel::SetupIndex self, std::string const & name) -> SetupIndex
        __init__(Seiscomp::DataModel::SetupIndex self, SetupIndex arg2) -> SetupIndex
        """
        this = _DataModel.new_SetupIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(SetupIndex self, SetupIndex arg2) -> bool"""
        return _DataModel.SetupIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SetupIndex self, SetupIndex arg2) -> bool"""
        return _DataModel.SetupIndex___ne__(self, *args)

    __swig_setmethods__["name"] = _DataModel.SetupIndex_name_set
    __swig_getmethods__["name"] = _DataModel.SetupIndex_name_get
    if _newclass:name = _swig_property(_DataModel.SetupIndex_name_get, _DataModel.SetupIndex_name_set)
    __swig_destroy__ = _DataModel.delete_SetupIndex
    __del__ = lambda self : None;
SetupIndex_swigregister = _DataModel.SetupIndex_swigregister
SetupIndex_swigregister(SetupIndex)

class Setup(Object):
    """Proxy of C++ Seiscomp::DataModel::Setup class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Setup, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Setup, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Setup_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Setup_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Setup self) -> char const *"""
        return _DataModel.Setup_className(self)

    def typeInfo(self):
        """typeInfo(Setup self) -> RTTI"""
        return _DataModel.Setup_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Setup
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Setup
        """
        return _DataModel.Setup_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Setup
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Setup
        """
        return _DataModel.Setup_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Setup self, GenericArchive ar)"""
        return _DataModel.Setup_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Setup self) -> Setup
        __init__(Seiscomp::DataModel::Setup self, Setup other) -> Setup
        """
        this = _DataModel.new_Setup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Setup
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Setup self, Setup other) -> bool"""
        return _DataModel.Setup___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Setup self, Setup other) -> bool"""
        return _DataModel.Setup___ne__(self, *args)

    def equal(self, *args):
        """equal(Setup self, Setup other) -> bool"""
        return _DataModel.Setup_equal(self, *args)

    def setName(self, *args):
        """setName(Setup self, std::string const & name)"""
        return _DataModel.Setup_setName(self, *args)

    def name(self):
        """name(Setup self) -> std::string const &"""
        return _DataModel.Setup_name(self)

    def setParameterSetID(self, *args):
        """setParameterSetID(Setup self, std::string const & parameterSetID)"""
        return _DataModel.Setup_setParameterSetID(self, *args)

    def parameterSetID(self):
        """parameterSetID(Setup self) -> std::string const &"""
        return _DataModel.Setup_parameterSetID(self)

    def setEnabled(self, *args):
        """setEnabled(Setup self, bool enabled)"""
        return _DataModel.Setup_setEnabled(self, *args)

    def enabled(self):
        """enabled(Setup self) -> bool"""
        return _DataModel.Setup_enabled(self)

    def index(self):
        """index(Setup self) -> SetupIndex"""
        return _DataModel.Setup_index(self)

    def equalIndex(self, *args):
        """equalIndex(Setup self, Setup lhs) -> bool"""
        return _DataModel.Setup_equalIndex(self, *args)

    def configStation(self):
        """configStation(Setup self) -> ConfigStation"""
        return _DataModel.Setup_configStation(self)

    def assign(self, *args):
        """assign(Setup self, Object other) -> bool"""
        return _DataModel.Setup_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Setup self, PublicObject parent) -> bool"""
        return _DataModel.Setup_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Setup self, PublicObject parent) -> bool"""
        return _DataModel.Setup_detachFrom(self, *args)

    def detach(self):
        """detach(Setup self) -> bool"""
        return _DataModel.Setup_detach(self)

    def clone(self):
        """clone(Setup self) -> Object"""
        return _DataModel.Setup_clone(self)

    def accept(self, *args):
        """accept(Setup self, Visitor arg2)"""
        return _DataModel.Setup_accept(self, *args)

Setup_swigregister = _DataModel.Setup_swigregister
Setup_swigregister(Setup)

def Setup_ClassName():
  """Setup_ClassName() -> char const *"""
  return _DataModel.Setup_ClassName()

def Setup_TypeInfo():
  """Setup_TypeInfo() -> RTTI"""
  return _DataModel.Setup_TypeInfo()

def Setup_Cast(*args):
  """
    Cast(BaseObject o) -> Setup
    Setup_Cast(Seiscomp::Core::BaseObjectPtr o) -> Setup
    """
  return _DataModel.Setup_Cast(*args)

def Setup_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Setup
    Setup_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Setup
    """
  return _DataModel.Setup_ConstCast(*args)

class ConfigStationIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::ConfigStationIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigStationIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigStationIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ConfigStationIndex self) -> ConfigStationIndex
        __init__(Seiscomp::DataModel::ConfigStationIndex self, std::string const & networkCode, std::string const & stationCode) -> ConfigStationIndex
        __init__(Seiscomp::DataModel::ConfigStationIndex self, ConfigStationIndex arg2) -> ConfigStationIndex
        """
        this = _DataModel.new_ConfigStationIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(ConfigStationIndex self, ConfigStationIndex arg2) -> bool"""
        return _DataModel.ConfigStationIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ConfigStationIndex self, ConfigStationIndex arg2) -> bool"""
        return _DataModel.ConfigStationIndex___ne__(self, *args)

    __swig_setmethods__["networkCode"] = _DataModel.ConfigStationIndex_networkCode_set
    __swig_getmethods__["networkCode"] = _DataModel.ConfigStationIndex_networkCode_get
    if _newclass:networkCode = _swig_property(_DataModel.ConfigStationIndex_networkCode_get, _DataModel.ConfigStationIndex_networkCode_set)
    __swig_setmethods__["stationCode"] = _DataModel.ConfigStationIndex_stationCode_set
    __swig_getmethods__["stationCode"] = _DataModel.ConfigStationIndex_stationCode_get
    if _newclass:stationCode = _swig_property(_DataModel.ConfigStationIndex_stationCode_get, _DataModel.ConfigStationIndex_stationCode_set)
    __swig_destroy__ = _DataModel.delete_ConfigStationIndex
    __del__ = lambda self : None;
ConfigStationIndex_swigregister = _DataModel.ConfigStationIndex_swigregister
ConfigStationIndex_swigregister(ConfigStationIndex)

class ConfigStation(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ConfigStation class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigStation, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigStation, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ConfigStation_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ConfigStation_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ConfigStation self) -> char const *"""
        return _DataModel.ConfigStation_className(self)

    def typeInfo(self):
        """typeInfo(ConfigStation self) -> RTTI"""
        return _DataModel.ConfigStation_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ConfigStation
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ConfigStation
        """
        return _DataModel.ConfigStation_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ConfigStation
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ConfigStation
        """
        return _DataModel.ConfigStation_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ConfigStation self, GenericArchive ar)"""
        return _DataModel.ConfigStation_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ConfigStation self, ConfigStation other) -> ConfigStation
        __init__(Seiscomp::DataModel::ConfigStation self, std::string const & publicID) -> ConfigStation
        """
        this = _DataModel.new_ConfigStation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ConfigStation
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ConfigStation
        Create(std::string const & publicID) -> ConfigStation
        """
        return _DataModel.ConfigStation_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ConfigStation"""
        return _DataModel.ConfigStation_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ConfigStation self, ConfigStation other) -> bool"""
        return _DataModel.ConfigStation___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ConfigStation self, ConfigStation other) -> bool"""
        return _DataModel.ConfigStation___ne__(self, *args)

    def equal(self, *args):
        """equal(ConfigStation self, ConfigStation other) -> bool"""
        return _DataModel.ConfigStation_equal(self, *args)

    def setNetworkCode(self, *args):
        """setNetworkCode(ConfigStation self, std::string const & networkCode)"""
        return _DataModel.ConfigStation_setNetworkCode(self, *args)

    def networkCode(self):
        """networkCode(ConfigStation self) -> std::string const &"""
        return _DataModel.ConfigStation_networkCode(self)

    def setStationCode(self, *args):
        """setStationCode(ConfigStation self, std::string const & stationCode)"""
        return _DataModel.ConfigStation_setStationCode(self, *args)

    def stationCode(self):
        """stationCode(ConfigStation self) -> std::string const &"""
        return _DataModel.ConfigStation_stationCode(self)

    def setEnabled(self, *args):
        """setEnabled(ConfigStation self, bool enabled)"""
        return _DataModel.ConfigStation_setEnabled(self, *args)

    def enabled(self):
        """enabled(ConfigStation self) -> bool"""
        return _DataModel.ConfigStation_enabled(self)

    def setCreationInfo(self, *args):
        """setCreationInfo(ConfigStation self, Seiscomp::Core::Optional< Seiscomp::DataModel::CreationInfo >::Impl const & creationInfo)"""
        return _DataModel.ConfigStation_setCreationInfo(self, *args)

    def creationInfo(self, *args):
        """
        creationInfo(ConfigStation self) -> CreationInfo
        creationInfo(ConfigStation self) -> CreationInfo
        """
        return _DataModel.ConfigStation_creationInfo(self, *args)

    def index(self):
        """index(ConfigStation self) -> ConfigStationIndex"""
        return _DataModel.ConfigStation_index(self)

    def equalIndex(self, *args):
        """equalIndex(ConfigStation self, ConfigStation lhs) -> bool"""
        return _DataModel.ConfigStation_equalIndex(self, *args)

    def add(self, *args):
        """add(ConfigStation self, Setup obj) -> bool"""
        return _DataModel.ConfigStation_add(self, *args)

    def remove(self, *args):
        """remove(ConfigStation self, Setup obj) -> bool"""
        return _DataModel.ConfigStation_remove(self, *args)

    def removeSetup(self, *args):
        """
        removeSetup(ConfigStation self, size_t i) -> bool
        removeSetup(ConfigStation self, SetupIndex i) -> bool
        """
        return _DataModel.ConfigStation_removeSetup(self, *args)

    def setupCount(self):
        """setupCount(ConfigStation self) -> size_t"""
        return _DataModel.ConfigStation_setupCount(self)

    def setup(self, *args):
        """
        setup(ConfigStation self, size_t i) -> Setup
        setup(ConfigStation self, SetupIndex i) -> Setup
        """
        return _DataModel.ConfigStation_setup(self, *args)

    def configModule(self):
        """configModule(ConfigStation self) -> ConfigModule"""
        return _DataModel.ConfigStation_configModule(self)

    def assign(self, *args):
        """assign(ConfigStation self, Object other) -> bool"""
        return _DataModel.ConfigStation_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ConfigStation self, PublicObject parent) -> bool"""
        return _DataModel.ConfigStation_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ConfigStation self, PublicObject parent) -> bool"""
        return _DataModel.ConfigStation_detachFrom(self, *args)

    def detach(self):
        """detach(ConfigStation self) -> bool"""
        return _DataModel.ConfigStation_detach(self)

    def clone(self):
        """clone(ConfigStation self) -> Object"""
        return _DataModel.ConfigStation_clone(self)

    def updateChild(self, *args):
        """updateChild(ConfigStation self, Object child) -> bool"""
        return _DataModel.ConfigStation_updateChild(self, *args)

    def accept(self, *args):
        """accept(ConfigStation self, Visitor arg2)"""
        return _DataModel.ConfigStation_accept(self, *args)

ConfigStation_swigregister = _DataModel.ConfigStation_swigregister
ConfigStation_swigregister(ConfigStation)

def ConfigStation_ClassName():
  """ConfigStation_ClassName() -> char const *"""
  return _DataModel.ConfigStation_ClassName()

def ConfigStation_TypeInfo():
  """ConfigStation_TypeInfo() -> RTTI"""
  return _DataModel.ConfigStation_TypeInfo()

def ConfigStation_Cast(*args):
  """
    Cast(BaseObject o) -> ConfigStation
    ConfigStation_Cast(Seiscomp::Core::BaseObjectPtr o) -> ConfigStation
    """
  return _DataModel.ConfigStation_Cast(*args)

def ConfigStation_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ConfigStation
    ConfigStation_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ConfigStation
    """
  return _DataModel.ConfigStation_ConstCast(*args)

def ConfigStation_Create(*args):
  """
    Create() -> ConfigStation
    ConfigStation_Create(std::string const & publicID) -> ConfigStation
    """
  return _DataModel.ConfigStation_Create(*args)

def ConfigStation_Find(*args):
  """ConfigStation_Find(std::string const & publicID) -> ConfigStation"""
  return _DataModel.ConfigStation_Find(*args)

class ConfigModule(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::ConfigModule class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigModule, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigModule, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.ConfigModule_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.ConfigModule_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(ConfigModule self) -> char const *"""
        return _DataModel.ConfigModule_className(self)

    def typeInfo(self):
        """typeInfo(ConfigModule self) -> RTTI"""
        return _DataModel.ConfigModule_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> ConfigModule
        Cast(Seiscomp::Core::BaseObjectPtr o) -> ConfigModule
        """
        return _DataModel.ConfigModule_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> ConfigModule
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ConfigModule
        """
        return _DataModel.ConfigModule_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(ConfigModule self, GenericArchive ar)"""
        return _DataModel.ConfigModule_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::ConfigModule self, ConfigModule other) -> ConfigModule
        __init__(Seiscomp::DataModel::ConfigModule self, std::string const & publicID) -> ConfigModule
        """
        this = _DataModel.new_ConfigModule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_ConfigModule
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> ConfigModule
        Create(std::string const & publicID) -> ConfigModule
        """
        return _DataModel.ConfigModule_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> ConfigModule"""
        return _DataModel.ConfigModule_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(ConfigModule self, ConfigModule other) -> bool"""
        return _DataModel.ConfigModule___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ConfigModule self, ConfigModule other) -> bool"""
        return _DataModel.ConfigModule___ne__(self, *args)

    def equal(self, *args):
        """equal(ConfigModule self, ConfigModule other) -> bool"""
        return _DataModel.ConfigModule_equal(self, *args)

    def setName(self, *args):
        """setName(ConfigModule self, std::string const & name)"""
        return _DataModel.ConfigModule_setName(self, *args)

    def name(self):
        """name(ConfigModule self) -> std::string const &"""
        return _DataModel.ConfigModule_name(self)

    def setParameterSetID(self, *args):
        """setParameterSetID(ConfigModule self, std::string const & parameterSetID)"""
        return _DataModel.ConfigModule_setParameterSetID(self, *args)

    def parameterSetID(self):
        """parameterSetID(ConfigModule self) -> std::string const &"""
        return _DataModel.ConfigModule_parameterSetID(self)

    def setEnabled(self, *args):
        """setEnabled(ConfigModule self, bool enabled)"""
        return _DataModel.ConfigModule_setEnabled(self, *args)

    def enabled(self):
        """enabled(ConfigModule self) -> bool"""
        return _DataModel.ConfigModule_enabled(self)

    def add(self, *args):
        """add(ConfigModule self, ConfigStation obj) -> bool"""
        return _DataModel.ConfigModule_add(self, *args)

    def remove(self, *args):
        """remove(ConfigModule self, ConfigStation obj) -> bool"""
        return _DataModel.ConfigModule_remove(self, *args)

    def removeConfigStation(self, *args):
        """
        removeConfigStation(ConfigModule self, size_t i) -> bool
        removeConfigStation(ConfigModule self, ConfigStationIndex i) -> bool
        """
        return _DataModel.ConfigModule_removeConfigStation(self, *args)

    def configStationCount(self):
        """configStationCount(ConfigModule self) -> size_t"""
        return _DataModel.ConfigModule_configStationCount(self)

    def configStation(self, *args):
        """
        configStation(ConfigModule self, size_t i) -> ConfigStation
        configStation(ConfigModule self, ConfigStationIndex i) -> ConfigStation
        """
        return _DataModel.ConfigModule_configStation(self, *args)

    def findConfigStation(self, *args):
        """findConfigStation(ConfigModule self, std::string const & publicID) -> ConfigStation"""
        return _DataModel.ConfigModule_findConfigStation(self, *args)

    def config(self):
        """config(ConfigModule self) -> Config"""
        return _DataModel.ConfigModule_config(self)

    def assign(self, *args):
        """assign(ConfigModule self, Object other) -> bool"""
        return _DataModel.ConfigModule_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(ConfigModule self, PublicObject parent) -> bool"""
        return _DataModel.ConfigModule_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(ConfigModule self, PublicObject parent) -> bool"""
        return _DataModel.ConfigModule_detachFrom(self, *args)

    def detach(self):
        """detach(ConfigModule self) -> bool"""
        return _DataModel.ConfigModule_detach(self)

    def clone(self):
        """clone(ConfigModule self) -> Object"""
        return _DataModel.ConfigModule_clone(self)

    def updateChild(self, *args):
        """updateChild(ConfigModule self, Object child) -> bool"""
        return _DataModel.ConfigModule_updateChild(self, *args)

    def accept(self, *args):
        """accept(ConfigModule self, Visitor arg2)"""
        return _DataModel.ConfigModule_accept(self, *args)

ConfigModule_swigregister = _DataModel.ConfigModule_swigregister
ConfigModule_swigregister(ConfigModule)

def ConfigModule_ClassName():
  """ConfigModule_ClassName() -> char const *"""
  return _DataModel.ConfigModule_ClassName()

def ConfigModule_TypeInfo():
  """ConfigModule_TypeInfo() -> RTTI"""
  return _DataModel.ConfigModule_TypeInfo()

def ConfigModule_Cast(*args):
  """
    Cast(BaseObject o) -> ConfigModule
    ConfigModule_Cast(Seiscomp::Core::BaseObjectPtr o) -> ConfigModule
    """
  return _DataModel.ConfigModule_Cast(*args)

def ConfigModule_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> ConfigModule
    ConfigModule_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> ConfigModule
    """
  return _DataModel.ConfigModule_ConstCast(*args)

def ConfigModule_Create(*args):
  """
    Create() -> ConfigModule
    ConfigModule_Create(std::string const & publicID) -> ConfigModule
    """
  return _DataModel.ConfigModule_Create(*args)

def ConfigModule_Find(*args):
  """ConfigModule_Find(std::string const & publicID) -> ConfigModule"""
  return _DataModel.ConfigModule_Find(*args)

class Config(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Config class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Config_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Config_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Config self) -> char const *"""
        return _DataModel.Config_className(self)

    def typeInfo(self):
        """typeInfo(Config self) -> RTTI"""
        return _DataModel.Config_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Config
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Config
        """
        return _DataModel.Config_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Config
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Config
        """
        return _DataModel.Config_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Config self, GenericArchive ar)"""
        return _DataModel.Config_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Config self) -> Config
        __init__(Seiscomp::DataModel::Config self, Config other) -> Config
        """
        this = _DataModel.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Config
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Config self, Config other) -> bool"""
        return _DataModel.Config___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Config self, Config other) -> bool"""
        return _DataModel.Config___ne__(self, *args)

    def equal(self, *args):
        """equal(Config self, Config other) -> bool"""
        return _DataModel.Config_equal(self, *args)

    def add(self, *args):
        """
        add(Config self, ParameterSet obj) -> bool
        add(Config self, ConfigModule obj) -> bool
        """
        return _DataModel.Config_add(self, *args)

    def remove(self, *args):
        """
        remove(Config self, ParameterSet obj) -> bool
        remove(Config self, ConfigModule obj) -> bool
        """
        return _DataModel.Config_remove(self, *args)

    def removeParameterSet(self, *args):
        """removeParameterSet(Config self, size_t i) -> bool"""
        return _DataModel.Config_removeParameterSet(self, *args)

    def removeConfigModule(self, *args):
        """removeConfigModule(Config self, size_t i) -> bool"""
        return _DataModel.Config_removeConfigModule(self, *args)

    def parameterSetCount(self):
        """parameterSetCount(Config self) -> size_t"""
        return _DataModel.Config_parameterSetCount(self)

    def configModuleCount(self):
        """configModuleCount(Config self) -> size_t"""
        return _DataModel.Config_configModuleCount(self)

    def parameterSet(self, *args):
        """parameterSet(Config self, size_t i) -> ParameterSet"""
        return _DataModel.Config_parameterSet(self, *args)

    def configModule(self, *args):
        """configModule(Config self, size_t i) -> ConfigModule"""
        return _DataModel.Config_configModule(self, *args)

    def findParameterSet(self, *args):
        """findParameterSet(Config self, std::string const & publicID) -> ParameterSet"""
        return _DataModel.Config_findParameterSet(self, *args)

    def findConfigModule(self, *args):
        """findConfigModule(Config self, std::string const & publicID) -> ConfigModule"""
        return _DataModel.Config_findConfigModule(self, *args)

    def assign(self, *args):
        """assign(Config self, Object other) -> bool"""
        return _DataModel.Config_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Config self, PublicObject parent) -> bool"""
        return _DataModel.Config_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Config self, PublicObject parent) -> bool"""
        return _DataModel.Config_detachFrom(self, *args)

    def detach(self):
        """detach(Config self) -> bool"""
        return _DataModel.Config_detach(self)

    def clone(self):
        """clone(Config self) -> Object"""
        return _DataModel.Config_clone(self)

    def updateChild(self, *args):
        """updateChild(Config self, Object child) -> bool"""
        return _DataModel.Config_updateChild(self, *args)

    def accept(self, *args):
        """accept(Config self, Visitor arg2)"""
        return _DataModel.Config_accept(self, *args)

Config_swigregister = _DataModel.Config_swigregister
Config_swigregister(Config)

def Config_ClassName():
  """Config_ClassName() -> char const *"""
  return _DataModel.Config_ClassName()

def Config_TypeInfo():
  """Config_TypeInfo() -> RTTI"""
  return _DataModel.Config_TypeInfo()

def Config_Cast(*args):
  """
    Cast(BaseObject o) -> Config
    Config_Cast(Seiscomp::Core::BaseObjectPtr o) -> Config
    """
  return _DataModel.Config_Cast(*args)

def Config_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Config
    Config_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Config
    """
  return _DataModel.Config_ConstCast(*args)

class RouteArclinkIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::RouteArclinkIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteArclinkIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteArclinkIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RouteArclinkIndex self) -> RouteArclinkIndex
        __init__(Seiscomp::DataModel::RouteArclinkIndex self, std::string const & address, Time start) -> RouteArclinkIndex
        __init__(Seiscomp::DataModel::RouteArclinkIndex self, RouteArclinkIndex arg2) -> RouteArclinkIndex
        """
        this = _DataModel.new_RouteArclinkIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(RouteArclinkIndex self, RouteArclinkIndex arg2) -> bool"""
        return _DataModel.RouteArclinkIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RouteArclinkIndex self, RouteArclinkIndex arg2) -> bool"""
        return _DataModel.RouteArclinkIndex___ne__(self, *args)

    __swig_setmethods__["address"] = _DataModel.RouteArclinkIndex_address_set
    __swig_getmethods__["address"] = _DataModel.RouteArclinkIndex_address_get
    if _newclass:address = _swig_property(_DataModel.RouteArclinkIndex_address_get, _DataModel.RouteArclinkIndex_address_set)
    __swig_setmethods__["start"] = _DataModel.RouteArclinkIndex_start_set
    __swig_getmethods__["start"] = _DataModel.RouteArclinkIndex_start_get
    if _newclass:start = _swig_property(_DataModel.RouteArclinkIndex_start_get, _DataModel.RouteArclinkIndex_start_set)
    __swig_destroy__ = _DataModel.delete_RouteArclinkIndex
    __del__ = lambda self : None;
RouteArclinkIndex_swigregister = _DataModel.RouteArclinkIndex_swigregister
RouteArclinkIndex_swigregister(RouteArclinkIndex)

class RouteArclink(Object):
    """Proxy of C++ Seiscomp::DataModel::RouteArclink class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteArclink, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RouteArclink, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.RouteArclink_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.RouteArclink_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(RouteArclink self) -> char const *"""
        return _DataModel.RouteArclink_className(self)

    def typeInfo(self):
        """typeInfo(RouteArclink self) -> RTTI"""
        return _DataModel.RouteArclink_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> RouteArclink
        Cast(Seiscomp::Core::BaseObjectPtr o) -> RouteArclink
        """
        return _DataModel.RouteArclink_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> RouteArclink
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RouteArclink
        """
        return _DataModel.RouteArclink_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(RouteArclink self, GenericArchive ar)"""
        return _DataModel.RouteArclink_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RouteArclink self) -> RouteArclink
        __init__(Seiscomp::DataModel::RouteArclink self, RouteArclink other) -> RouteArclink
        """
        this = _DataModel.new_RouteArclink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RouteArclink
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(RouteArclink self, RouteArclink other) -> bool"""
        return _DataModel.RouteArclink___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RouteArclink self, RouteArclink other) -> bool"""
        return _DataModel.RouteArclink___ne__(self, *args)

    def equal(self, *args):
        """equal(RouteArclink self, RouteArclink other) -> bool"""
        return _DataModel.RouteArclink_equal(self, *args)

    def setAddress(self, *args):
        """setAddress(RouteArclink self, std::string const & address)"""
        return _DataModel.RouteArclink_setAddress(self, *args)

    def address(self):
        """address(RouteArclink self) -> std::string const &"""
        return _DataModel.RouteArclink_address(self)

    def setStart(self, *args):
        """setStart(RouteArclink self, Time start)"""
        return _DataModel.RouteArclink_setStart(self, *args)

    def start(self):
        """start(RouteArclink self) -> Time"""
        return _DataModel.RouteArclink_start(self)

    def setEnd(self, *args):
        """setEnd(RouteArclink self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.RouteArclink_setEnd(self, *args)

    def end(self):
        """end(RouteArclink self) -> Time"""
        return _DataModel.RouteArclink_end(self)

    def setPriority(self, *args):
        """setPriority(RouteArclink self, Seiscomp::Core::Optional< int >::Impl const & priority)"""
        return _DataModel.RouteArclink_setPriority(self, *args)

    def priority(self):
        """priority(RouteArclink self) -> int"""
        return _DataModel.RouteArclink_priority(self)

    def index(self):
        """index(RouteArclink self) -> RouteArclinkIndex"""
        return _DataModel.RouteArclink_index(self)

    def equalIndex(self, *args):
        """equalIndex(RouteArclink self, RouteArclink lhs) -> bool"""
        return _DataModel.RouteArclink_equalIndex(self, *args)

    def route(self):
        """route(RouteArclink self) -> Route"""
        return _DataModel.RouteArclink_route(self)

    def assign(self, *args):
        """assign(RouteArclink self, Object other) -> bool"""
        return _DataModel.RouteArclink_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(RouteArclink self, PublicObject parent) -> bool"""
        return _DataModel.RouteArclink_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(RouteArclink self, PublicObject parent) -> bool"""
        return _DataModel.RouteArclink_detachFrom(self, *args)

    def detach(self):
        """detach(RouteArclink self) -> bool"""
        return _DataModel.RouteArclink_detach(self)

    def clone(self):
        """clone(RouteArclink self) -> Object"""
        return _DataModel.RouteArclink_clone(self)

    def accept(self, *args):
        """accept(RouteArclink self, Visitor arg2)"""
        return _DataModel.RouteArclink_accept(self, *args)

RouteArclink_swigregister = _DataModel.RouteArclink_swigregister
RouteArclink_swigregister(RouteArclink)

def RouteArclink_ClassName():
  """RouteArclink_ClassName() -> char const *"""
  return _DataModel.RouteArclink_ClassName()

def RouteArclink_TypeInfo():
  """RouteArclink_TypeInfo() -> RTTI"""
  return _DataModel.RouteArclink_TypeInfo()

def RouteArclink_Cast(*args):
  """
    Cast(BaseObject o) -> RouteArclink
    RouteArclink_Cast(Seiscomp::Core::BaseObjectPtr o) -> RouteArclink
    """
  return _DataModel.RouteArclink_Cast(*args)

def RouteArclink_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> RouteArclink
    RouteArclink_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RouteArclink
    """
  return _DataModel.RouteArclink_ConstCast(*args)

class RouteSeedlinkIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::RouteSeedlinkIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteSeedlinkIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteSeedlinkIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RouteSeedlinkIndex self) -> RouteSeedlinkIndex
        __init__(Seiscomp::DataModel::RouteSeedlinkIndex self, std::string const & address) -> RouteSeedlinkIndex
        __init__(Seiscomp::DataModel::RouteSeedlinkIndex self, RouteSeedlinkIndex arg2) -> RouteSeedlinkIndex
        """
        this = _DataModel.new_RouteSeedlinkIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(RouteSeedlinkIndex self, RouteSeedlinkIndex arg2) -> bool"""
        return _DataModel.RouteSeedlinkIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RouteSeedlinkIndex self, RouteSeedlinkIndex arg2) -> bool"""
        return _DataModel.RouteSeedlinkIndex___ne__(self, *args)

    __swig_setmethods__["address"] = _DataModel.RouteSeedlinkIndex_address_set
    __swig_getmethods__["address"] = _DataModel.RouteSeedlinkIndex_address_get
    if _newclass:address = _swig_property(_DataModel.RouteSeedlinkIndex_address_get, _DataModel.RouteSeedlinkIndex_address_set)
    __swig_destroy__ = _DataModel.delete_RouteSeedlinkIndex
    __del__ = lambda self : None;
RouteSeedlinkIndex_swigregister = _DataModel.RouteSeedlinkIndex_swigregister
RouteSeedlinkIndex_swigregister(RouteSeedlinkIndex)

class RouteSeedlink(Object):
    """Proxy of C++ Seiscomp::DataModel::RouteSeedlink class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteSeedlink, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RouteSeedlink, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.RouteSeedlink_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.RouteSeedlink_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(RouteSeedlink self) -> char const *"""
        return _DataModel.RouteSeedlink_className(self)

    def typeInfo(self):
        """typeInfo(RouteSeedlink self) -> RTTI"""
        return _DataModel.RouteSeedlink_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> RouteSeedlink
        Cast(Seiscomp::Core::BaseObjectPtr o) -> RouteSeedlink
        """
        return _DataModel.RouteSeedlink_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> RouteSeedlink
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RouteSeedlink
        """
        return _DataModel.RouteSeedlink_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(RouteSeedlink self, GenericArchive ar)"""
        return _DataModel.RouteSeedlink_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RouteSeedlink self) -> RouteSeedlink
        __init__(Seiscomp::DataModel::RouteSeedlink self, RouteSeedlink other) -> RouteSeedlink
        """
        this = _DataModel.new_RouteSeedlink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_RouteSeedlink
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(RouteSeedlink self, RouteSeedlink other) -> bool"""
        return _DataModel.RouteSeedlink___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RouteSeedlink self, RouteSeedlink other) -> bool"""
        return _DataModel.RouteSeedlink___ne__(self, *args)

    def equal(self, *args):
        """equal(RouteSeedlink self, RouteSeedlink other) -> bool"""
        return _DataModel.RouteSeedlink_equal(self, *args)

    def setAddress(self, *args):
        """setAddress(RouteSeedlink self, std::string const & address)"""
        return _DataModel.RouteSeedlink_setAddress(self, *args)

    def address(self):
        """address(RouteSeedlink self) -> std::string const &"""
        return _DataModel.RouteSeedlink_address(self)

    def setPriority(self, *args):
        """setPriority(RouteSeedlink self, Seiscomp::Core::Optional< int >::Impl const & priority)"""
        return _DataModel.RouteSeedlink_setPriority(self, *args)

    def priority(self):
        """priority(RouteSeedlink self) -> int"""
        return _DataModel.RouteSeedlink_priority(self)

    def index(self):
        """index(RouteSeedlink self) -> RouteSeedlinkIndex"""
        return _DataModel.RouteSeedlink_index(self)

    def equalIndex(self, *args):
        """equalIndex(RouteSeedlink self, RouteSeedlink lhs) -> bool"""
        return _DataModel.RouteSeedlink_equalIndex(self, *args)

    def route(self):
        """route(RouteSeedlink self) -> Route"""
        return _DataModel.RouteSeedlink_route(self)

    def assign(self, *args):
        """assign(RouteSeedlink self, Object other) -> bool"""
        return _DataModel.RouteSeedlink_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(RouteSeedlink self, PublicObject parent) -> bool"""
        return _DataModel.RouteSeedlink_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(RouteSeedlink self, PublicObject parent) -> bool"""
        return _DataModel.RouteSeedlink_detachFrom(self, *args)

    def detach(self):
        """detach(RouteSeedlink self) -> bool"""
        return _DataModel.RouteSeedlink_detach(self)

    def clone(self):
        """clone(RouteSeedlink self) -> Object"""
        return _DataModel.RouteSeedlink_clone(self)

    def accept(self, *args):
        """accept(RouteSeedlink self, Visitor arg2)"""
        return _DataModel.RouteSeedlink_accept(self, *args)

RouteSeedlink_swigregister = _DataModel.RouteSeedlink_swigregister
RouteSeedlink_swigregister(RouteSeedlink)

def RouteSeedlink_ClassName():
  """RouteSeedlink_ClassName() -> char const *"""
  return _DataModel.RouteSeedlink_ClassName()

def RouteSeedlink_TypeInfo():
  """RouteSeedlink_TypeInfo() -> RTTI"""
  return _DataModel.RouteSeedlink_TypeInfo()

def RouteSeedlink_Cast(*args):
  """
    Cast(BaseObject o) -> RouteSeedlink
    RouteSeedlink_Cast(Seiscomp::Core::BaseObjectPtr o) -> RouteSeedlink
    """
  return _DataModel.RouteSeedlink_Cast(*args)

def RouteSeedlink_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> RouteSeedlink
    RouteSeedlink_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> RouteSeedlink
    """
  return _DataModel.RouteSeedlink_ConstCast(*args)

class RouteIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::RouteIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::RouteIndex self) -> RouteIndex
        __init__(Seiscomp::DataModel::RouteIndex self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, 
            std::string const & streamCode) -> RouteIndex
        __init__(Seiscomp::DataModel::RouteIndex self, RouteIndex arg2) -> RouteIndex
        """
        this = _DataModel.new_RouteIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(RouteIndex self, RouteIndex arg2) -> bool"""
        return _DataModel.RouteIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(RouteIndex self, RouteIndex arg2) -> bool"""
        return _DataModel.RouteIndex___ne__(self, *args)

    __swig_setmethods__["networkCode"] = _DataModel.RouteIndex_networkCode_set
    __swig_getmethods__["networkCode"] = _DataModel.RouteIndex_networkCode_get
    if _newclass:networkCode = _swig_property(_DataModel.RouteIndex_networkCode_get, _DataModel.RouteIndex_networkCode_set)
    __swig_setmethods__["stationCode"] = _DataModel.RouteIndex_stationCode_set
    __swig_getmethods__["stationCode"] = _DataModel.RouteIndex_stationCode_get
    if _newclass:stationCode = _swig_property(_DataModel.RouteIndex_stationCode_get, _DataModel.RouteIndex_stationCode_set)
    __swig_setmethods__["locationCode"] = _DataModel.RouteIndex_locationCode_set
    __swig_getmethods__["locationCode"] = _DataModel.RouteIndex_locationCode_get
    if _newclass:locationCode = _swig_property(_DataModel.RouteIndex_locationCode_get, _DataModel.RouteIndex_locationCode_set)
    __swig_setmethods__["streamCode"] = _DataModel.RouteIndex_streamCode_set
    __swig_getmethods__["streamCode"] = _DataModel.RouteIndex_streamCode_get
    if _newclass:streamCode = _swig_property(_DataModel.RouteIndex_streamCode_get, _DataModel.RouteIndex_streamCode_set)
    __swig_destroy__ = _DataModel.delete_RouteIndex
    __del__ = lambda self : None;
RouteIndex_swigregister = _DataModel.RouteIndex_swigregister
RouteIndex_swigregister(RouteIndex)

class Route(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Route class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Route, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Route, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Route_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Route_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Route self) -> char const *"""
        return _DataModel.Route_className(self)

    def typeInfo(self):
        """typeInfo(Route self) -> RTTI"""
        return _DataModel.Route_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Route
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Route
        """
        return _DataModel.Route_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Route
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Route
        """
        return _DataModel.Route_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Route self, GenericArchive ar)"""
        return _DataModel.Route_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Route self, Route other) -> Route
        __init__(Seiscomp::DataModel::Route self, std::string const & publicID) -> Route
        """
        this = _DataModel.new_Route(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Route
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create() -> Route
        Create(std::string const & publicID) -> Route
        """
        return _DataModel.Route_Create(*args)

    if _newclass:Create = staticmethod(Create)
    __swig_getmethods__["Create"] = lambda x: Create
    def Find(*args):
        """Find(std::string const & publicID) -> Route"""
        return _DataModel.Route_Find(*args)

    if _newclass:Find = staticmethod(Find)
    __swig_getmethods__["Find"] = lambda x: Find
    def __eq__(self, *args):
        """__eq__(Route self, Route other) -> bool"""
        return _DataModel.Route___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Route self, Route other) -> bool"""
        return _DataModel.Route___ne__(self, *args)

    def equal(self, *args):
        """equal(Route self, Route other) -> bool"""
        return _DataModel.Route_equal(self, *args)

    def setNetworkCode(self, *args):
        """setNetworkCode(Route self, std::string const & networkCode)"""
        return _DataModel.Route_setNetworkCode(self, *args)

    def networkCode(self):
        """networkCode(Route self) -> std::string const &"""
        return _DataModel.Route_networkCode(self)

    def setStationCode(self, *args):
        """setStationCode(Route self, std::string const & stationCode)"""
        return _DataModel.Route_setStationCode(self, *args)

    def stationCode(self):
        """stationCode(Route self) -> std::string const &"""
        return _DataModel.Route_stationCode(self)

    def setLocationCode(self, *args):
        """setLocationCode(Route self, std::string const & locationCode)"""
        return _DataModel.Route_setLocationCode(self, *args)

    def locationCode(self):
        """locationCode(Route self) -> std::string const &"""
        return _DataModel.Route_locationCode(self)

    def setStreamCode(self, *args):
        """setStreamCode(Route self, std::string const & streamCode)"""
        return _DataModel.Route_setStreamCode(self, *args)

    def streamCode(self):
        """streamCode(Route self) -> std::string const &"""
        return _DataModel.Route_streamCode(self)

    def index(self):
        """index(Route self) -> RouteIndex"""
        return _DataModel.Route_index(self)

    def equalIndex(self, *args):
        """equalIndex(Route self, Route lhs) -> bool"""
        return _DataModel.Route_equalIndex(self, *args)

    def add(self, *args):
        """
        add(Route self, RouteArclink obj) -> bool
        add(Route self, RouteSeedlink obj) -> bool
        """
        return _DataModel.Route_add(self, *args)

    def remove(self, *args):
        """
        remove(Route self, RouteArclink obj) -> bool
        remove(Route self, RouteSeedlink obj) -> bool
        """
        return _DataModel.Route_remove(self, *args)

    def removeRouteArclink(self, *args):
        """
        removeRouteArclink(Route self, size_t i) -> bool
        removeRouteArclink(Route self, RouteArclinkIndex i) -> bool
        """
        return _DataModel.Route_removeRouteArclink(self, *args)

    def removeRouteSeedlink(self, *args):
        """
        removeRouteSeedlink(Route self, size_t i) -> bool
        removeRouteSeedlink(Route self, RouteSeedlinkIndex i) -> bool
        """
        return _DataModel.Route_removeRouteSeedlink(self, *args)

    def routeArclinkCount(self):
        """routeArclinkCount(Route self) -> size_t"""
        return _DataModel.Route_routeArclinkCount(self)

    def routeSeedlinkCount(self):
        """routeSeedlinkCount(Route self) -> size_t"""
        return _DataModel.Route_routeSeedlinkCount(self)

    def routeArclink(self, *args):
        """
        routeArclink(Route self, size_t i) -> RouteArclink
        routeArclink(Route self, RouteArclinkIndex i) -> RouteArclink
        """
        return _DataModel.Route_routeArclink(self, *args)

    def routeSeedlink(self, *args):
        """
        routeSeedlink(Route self, size_t i) -> RouteSeedlink
        routeSeedlink(Route self, RouteSeedlinkIndex i) -> RouteSeedlink
        """
        return _DataModel.Route_routeSeedlink(self, *args)

    def routing(self):
        """routing(Route self) -> Routing"""
        return _DataModel.Route_routing(self)

    def assign(self, *args):
        """assign(Route self, Object other) -> bool"""
        return _DataModel.Route_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Route self, PublicObject parent) -> bool"""
        return _DataModel.Route_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Route self, PublicObject parent) -> bool"""
        return _DataModel.Route_detachFrom(self, *args)

    def detach(self):
        """detach(Route self) -> bool"""
        return _DataModel.Route_detach(self)

    def clone(self):
        """clone(Route self) -> Object"""
        return _DataModel.Route_clone(self)

    def updateChild(self, *args):
        """updateChild(Route self, Object child) -> bool"""
        return _DataModel.Route_updateChild(self, *args)

    def accept(self, *args):
        """accept(Route self, Visitor arg2)"""
        return _DataModel.Route_accept(self, *args)

Route_swigregister = _DataModel.Route_swigregister
Route_swigregister(Route)

def Route_ClassName():
  """Route_ClassName() -> char const *"""
  return _DataModel.Route_ClassName()

def Route_TypeInfo():
  """Route_TypeInfo() -> RTTI"""
  return _DataModel.Route_TypeInfo()

def Route_Cast(*args):
  """
    Cast(BaseObject o) -> Route
    Route_Cast(Seiscomp::Core::BaseObjectPtr o) -> Route
    """
  return _DataModel.Route_Cast(*args)

def Route_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Route
    Route_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Route
    """
  return _DataModel.Route_ConstCast(*args)

def Route_Create(*args):
  """
    Create() -> Route
    Route_Create(std::string const & publicID) -> Route
    """
  return _DataModel.Route_Create(*args)

def Route_Find(*args):
  """Route_Find(std::string const & publicID) -> Route"""
  return _DataModel.Route_Find(*args)

class AccessIndex(_object):
    """Proxy of C++ Seiscomp::DataModel::AccessIndex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::AccessIndex self) -> AccessIndex
        __init__(Seiscomp::DataModel::AccessIndex self, std::string const & networkCode, std::string const & stationCode, std::string const & locationCode, 
            std::string const & streamCode, std::string const & user, 
            Time start) -> AccessIndex
        __init__(Seiscomp::DataModel::AccessIndex self, AccessIndex arg2) -> AccessIndex
        """
        this = _DataModel.new_AccessIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(AccessIndex self, AccessIndex arg2) -> bool"""
        return _DataModel.AccessIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(AccessIndex self, AccessIndex arg2) -> bool"""
        return _DataModel.AccessIndex___ne__(self, *args)

    __swig_setmethods__["networkCode"] = _DataModel.AccessIndex_networkCode_set
    __swig_getmethods__["networkCode"] = _DataModel.AccessIndex_networkCode_get
    if _newclass:networkCode = _swig_property(_DataModel.AccessIndex_networkCode_get, _DataModel.AccessIndex_networkCode_set)
    __swig_setmethods__["stationCode"] = _DataModel.AccessIndex_stationCode_set
    __swig_getmethods__["stationCode"] = _DataModel.AccessIndex_stationCode_get
    if _newclass:stationCode = _swig_property(_DataModel.AccessIndex_stationCode_get, _DataModel.AccessIndex_stationCode_set)
    __swig_setmethods__["locationCode"] = _DataModel.AccessIndex_locationCode_set
    __swig_getmethods__["locationCode"] = _DataModel.AccessIndex_locationCode_get
    if _newclass:locationCode = _swig_property(_DataModel.AccessIndex_locationCode_get, _DataModel.AccessIndex_locationCode_set)
    __swig_setmethods__["streamCode"] = _DataModel.AccessIndex_streamCode_set
    __swig_getmethods__["streamCode"] = _DataModel.AccessIndex_streamCode_get
    if _newclass:streamCode = _swig_property(_DataModel.AccessIndex_streamCode_get, _DataModel.AccessIndex_streamCode_set)
    __swig_setmethods__["user"] = _DataModel.AccessIndex_user_set
    __swig_getmethods__["user"] = _DataModel.AccessIndex_user_get
    if _newclass:user = _swig_property(_DataModel.AccessIndex_user_get, _DataModel.AccessIndex_user_set)
    __swig_setmethods__["start"] = _DataModel.AccessIndex_start_set
    __swig_getmethods__["start"] = _DataModel.AccessIndex_start_get
    if _newclass:start = _swig_property(_DataModel.AccessIndex_start_get, _DataModel.AccessIndex_start_set)
    __swig_destroy__ = _DataModel.delete_AccessIndex
    __del__ = lambda self : None;
AccessIndex_swigregister = _DataModel.AccessIndex_swigregister
AccessIndex_swigregister(AccessIndex)

class Access(Object):
    """Proxy of C++ Seiscomp::DataModel::Access class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Access, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Access, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Access_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Access_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Access self) -> char const *"""
        return _DataModel.Access_className(self)

    def typeInfo(self):
        """typeInfo(Access self) -> RTTI"""
        return _DataModel.Access_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Access
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Access
        """
        return _DataModel.Access_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Access
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Access
        """
        return _DataModel.Access_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Access self, GenericArchive ar)"""
        return _DataModel.Access_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Access self) -> Access
        __init__(Seiscomp::DataModel::Access self, Access other) -> Access
        """
        this = _DataModel.new_Access(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Access
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Access self, Access other) -> bool"""
        return _DataModel.Access___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Access self, Access other) -> bool"""
        return _DataModel.Access___ne__(self, *args)

    def equal(self, *args):
        """equal(Access self, Access other) -> bool"""
        return _DataModel.Access_equal(self, *args)

    def setNetworkCode(self, *args):
        """setNetworkCode(Access self, std::string const & networkCode)"""
        return _DataModel.Access_setNetworkCode(self, *args)

    def networkCode(self):
        """networkCode(Access self) -> std::string const &"""
        return _DataModel.Access_networkCode(self)

    def setStationCode(self, *args):
        """setStationCode(Access self, std::string const & stationCode)"""
        return _DataModel.Access_setStationCode(self, *args)

    def stationCode(self):
        """stationCode(Access self) -> std::string const &"""
        return _DataModel.Access_stationCode(self)

    def setLocationCode(self, *args):
        """setLocationCode(Access self, std::string const & locationCode)"""
        return _DataModel.Access_setLocationCode(self, *args)

    def locationCode(self):
        """locationCode(Access self) -> std::string const &"""
        return _DataModel.Access_locationCode(self)

    def setStreamCode(self, *args):
        """setStreamCode(Access self, std::string const & streamCode)"""
        return _DataModel.Access_setStreamCode(self, *args)

    def streamCode(self):
        """streamCode(Access self) -> std::string const &"""
        return _DataModel.Access_streamCode(self)

    def setUser(self, *args):
        """setUser(Access self, std::string const & user)"""
        return _DataModel.Access_setUser(self, *args)

    def user(self):
        """user(Access self) -> std::string const &"""
        return _DataModel.Access_user(self)

    def setStart(self, *args):
        """setStart(Access self, Time start)"""
        return _DataModel.Access_setStart(self, *args)

    def start(self):
        """start(Access self) -> Time"""
        return _DataModel.Access_start(self)

    def setEnd(self, *args):
        """setEnd(Access self, Seiscomp::Core::Optional< Seiscomp::Core::Time >::Impl const & end)"""
        return _DataModel.Access_setEnd(self, *args)

    def end(self):
        """end(Access self) -> Time"""
        return _DataModel.Access_end(self)

    def index(self):
        """index(Access self) -> AccessIndex"""
        return _DataModel.Access_index(self)

    def equalIndex(self, *args):
        """equalIndex(Access self, Access lhs) -> bool"""
        return _DataModel.Access_equalIndex(self, *args)

    def routing(self):
        """routing(Access self) -> Routing"""
        return _DataModel.Access_routing(self)

    def assign(self, *args):
        """assign(Access self, Object other) -> bool"""
        return _DataModel.Access_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Access self, PublicObject parent) -> bool"""
        return _DataModel.Access_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Access self, PublicObject parent) -> bool"""
        return _DataModel.Access_detachFrom(self, *args)

    def detach(self):
        """detach(Access self) -> bool"""
        return _DataModel.Access_detach(self)

    def clone(self):
        """clone(Access self) -> Object"""
        return _DataModel.Access_clone(self)

    def accept(self, *args):
        """accept(Access self, Visitor arg2)"""
        return _DataModel.Access_accept(self, *args)

Access_swigregister = _DataModel.Access_swigregister
Access_swigregister(Access)

def Access_ClassName():
  """Access_ClassName() -> char const *"""
  return _DataModel.Access_ClassName()

def Access_TypeInfo():
  """Access_TypeInfo() -> RTTI"""
  return _DataModel.Access_TypeInfo()

def Access_Cast(*args):
  """
    Cast(BaseObject o) -> Access
    Access_Cast(Seiscomp::Core::BaseObjectPtr o) -> Access
    """
  return _DataModel.Access_Cast(*args)

def Access_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Access
    Access_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Access
    """
  return _DataModel.Access_ConstCast(*args)

class Routing(PublicObject):
    """Proxy of C++ Seiscomp::DataModel::Routing class"""
    __swig_setmethods__ = {}
    for _s in [PublicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Routing, name, value)
    __swig_getmethods__ = {}
    for _s in [PublicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Routing, name)
    __repr__ = _swig_repr
    def ClassName():
        """ClassName() -> char const *"""
        return _DataModel.Routing_ClassName()

    if _newclass:ClassName = staticmethod(ClassName)
    __swig_getmethods__["ClassName"] = lambda x: ClassName
    def TypeInfo():
        """TypeInfo() -> RTTI"""
        return _DataModel.Routing_TypeInfo()

    if _newclass:TypeInfo = staticmethod(TypeInfo)
    __swig_getmethods__["TypeInfo"] = lambda x: TypeInfo
    def className(self):
        """className(Routing self) -> char const *"""
        return _DataModel.Routing_className(self)

    def typeInfo(self):
        """typeInfo(Routing self) -> RTTI"""
        return _DataModel.Routing_typeInfo(self)

    def Cast(*args):
        """
        Cast(BaseObject o) -> Routing
        Cast(Seiscomp::Core::BaseObjectPtr o) -> Routing
        """
        return _DataModel.Routing_Cast(*args)

    if _newclass:Cast = staticmethod(Cast)
    __swig_getmethods__["Cast"] = lambda x: Cast
    def ConstCast(*args):
        """
        ConstCast(BaseObject o) -> Routing
        ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Routing
        """
        return _DataModel.Routing_ConstCast(*args)

    if _newclass:ConstCast = staticmethod(ConstCast)
    __swig_getmethods__["ConstCast"] = lambda x: ConstCast
    def serialize(self, *args):
        """serialize(Routing self, GenericArchive ar)"""
        return _DataModel.Routing_serialize(self, *args)

    def __init__(self, *args): 
        """
        __init__(Seiscomp::DataModel::Routing self) -> Routing
        __init__(Seiscomp::DataModel::Routing self, Routing other) -> Routing
        """
        this = _DataModel.new_Routing(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_Routing
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(Routing self, Routing other) -> bool"""
        return _DataModel.Routing___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Routing self, Routing other) -> bool"""
        return _DataModel.Routing___ne__(self, *args)

    def equal(self, *args):
        """equal(Routing self, Routing other) -> bool"""
        return _DataModel.Routing_equal(self, *args)

    def add(self, *args):
        """
        add(Routing self, Route obj) -> bool
        add(Routing self, Access obj) -> bool
        """
        return _DataModel.Routing_add(self, *args)

    def remove(self, *args):
        """
        remove(Routing self, Route obj) -> bool
        remove(Routing self, Access obj) -> bool
        """
        return _DataModel.Routing_remove(self, *args)

    def removeRoute(self, *args):
        """
        removeRoute(Routing self, size_t i) -> bool
        removeRoute(Routing self, RouteIndex i) -> bool
        """
        return _DataModel.Routing_removeRoute(self, *args)

    def removeAccess(self, *args):
        """
        removeAccess(Routing self, size_t i) -> bool
        removeAccess(Routing self, AccessIndex i) -> bool
        """
        return _DataModel.Routing_removeAccess(self, *args)

    def routeCount(self):
        """routeCount(Routing self) -> size_t"""
        return _DataModel.Routing_routeCount(self)

    def accessCount(self):
        """accessCount(Routing self) -> size_t"""
        return _DataModel.Routing_accessCount(self)

    def route(self, *args):
        """
        route(Routing self, size_t i) -> Route
        route(Routing self, RouteIndex i) -> Route
        """
        return _DataModel.Routing_route(self, *args)

    def access(self, *args):
        """
        access(Routing self, size_t i) -> Access
        access(Routing self, AccessIndex i) -> Access
        """
        return _DataModel.Routing_access(self, *args)

    def findRoute(self, *args):
        """findRoute(Routing self, std::string const & publicID) -> Route"""
        return _DataModel.Routing_findRoute(self, *args)

    def assign(self, *args):
        """assign(Routing self, Object other) -> bool"""
        return _DataModel.Routing_assign(self, *args)

    def attachTo(self, *args):
        """attachTo(Routing self, PublicObject parent) -> bool"""
        return _DataModel.Routing_attachTo(self, *args)

    def detachFrom(self, *args):
        """detachFrom(Routing self, PublicObject parent) -> bool"""
        return _DataModel.Routing_detachFrom(self, *args)

    def detach(self):
        """detach(Routing self) -> bool"""
        return _DataModel.Routing_detach(self)

    def clone(self):
        """clone(Routing self) -> Object"""
        return _DataModel.Routing_clone(self)

    def updateChild(self, *args):
        """updateChild(Routing self, Object child) -> bool"""
        return _DataModel.Routing_updateChild(self, *args)

    def accept(self, *args):
        """accept(Routing self, Visitor arg2)"""
        return _DataModel.Routing_accept(self, *args)

Routing_swigregister = _DataModel.Routing_swigregister
Routing_swigregister(Routing)

def Routing_ClassName():
  """Routing_ClassName() -> char const *"""
  return _DataModel.Routing_ClassName()

def Routing_TypeInfo():
  """Routing_TypeInfo() -> RTTI"""
  return _DataModel.Routing_TypeInfo()

def Routing_Cast(*args):
  """
    Cast(BaseObject o) -> Routing
    Routing_Cast(Seiscomp::Core::BaseObjectPtr o) -> Routing
    """
  return _DataModel.Routing_Cast(*args)

def Routing_ConstCast(*args):
  """
    ConstCast(BaseObject o) -> Routing
    Routing_ConstCast(Seiscomp::Core::BaseObjectCPtr o) -> Routing
    """
  return _DataModel.Routing_ConstCast(*args)

class DatabaseReader(DatabaseArchive):
    """Proxy of C++ Seiscomp::DataModel::DatabaseReader class"""
    __swig_setmethods__ = {}
    for _s in [DatabaseArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseReader, name, value)
    __swig_getmethods__ = {}
    for _s in [DatabaseArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Seiscomp::DataModel::DatabaseReader self, DatabaseInterface dbDriver) -> DatabaseReader"""
        this = _DataModel.new_DatabaseReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseReader
    __del__ = lambda self : None;
    def loadObject(self, *args):
        """loadObject(DatabaseReader self, RTTI classType, std::string const & publicID) -> PublicObject"""
        return _DataModel.DatabaseReader_loadObject(self, *args)

    def loadEventParameters(self):
        """loadEventParameters(DatabaseReader self) -> EventParameters"""
        return _DataModel.DatabaseReader_loadEventParameters(self)

    def loadPicks(self, *args):
        """loadPicks(DatabaseReader self, EventParameters arg2) -> int"""
        return _DataModel.DatabaseReader_loadPicks(self, *args)

    def loadAmplitudes(self, *args):
        """loadAmplitudes(DatabaseReader self, EventParameters arg2) -> int"""
        return _DataModel.DatabaseReader_loadAmplitudes(self, *args)

    def loadReadings(self, *args):
        """loadReadings(DatabaseReader self, EventParameters arg2) -> int"""
        return _DataModel.DatabaseReader_loadReadings(self, *args)

    def loadOrigins(self, *args):
        """loadOrigins(DatabaseReader self, EventParameters arg2) -> int"""
        return _DataModel.DatabaseReader_loadOrigins(self, *args)

    def loadFocalMechanisms(self, *args):
        """loadFocalMechanisms(DatabaseReader self, EventParameters arg2) -> int"""
        return _DataModel.DatabaseReader_loadFocalMechanisms(self, *args)

    def loadEvents(self, *args):
        """loadEvents(DatabaseReader self, EventParameters arg2) -> int"""
        return _DataModel.DatabaseReader_loadEvents(self, *args)

    def loadPickReferences(self, *args):
        """loadPickReferences(DatabaseReader self, Reading arg2) -> int"""
        return _DataModel.DatabaseReader_loadPickReferences(self, *args)

    def loadAmplitudeReferences(self, *args):
        """loadAmplitudeReferences(DatabaseReader self, Reading arg2) -> int"""
        return _DataModel.DatabaseReader_loadAmplitudeReferences(self, *args)

    def loadCompositeTimes(self, *args):
        """loadCompositeTimes(DatabaseReader self, Origin arg2) -> int"""
        return _DataModel.DatabaseReader_loadCompositeTimes(self, *args)

    def loadArrivals(self, *args):
        """loadArrivals(DatabaseReader self, Origin arg2) -> int"""
        return _DataModel.DatabaseReader_loadArrivals(self, *args)

    def loadStationMagnitudes(self, *args):
        """loadStationMagnitudes(DatabaseReader self, Origin arg2) -> int"""
        return _DataModel.DatabaseReader_loadStationMagnitudes(self, *args)

    def loadMagnitudes(self, *args):
        """loadMagnitudes(DatabaseReader self, Origin arg2) -> int"""
        return _DataModel.DatabaseReader_loadMagnitudes(self, *args)

    def loadStationMagnitudeContributions(self, *args):
        """loadStationMagnitudeContributions(DatabaseReader self, Magnitude arg2) -> int"""
        return _DataModel.DatabaseReader_loadStationMagnitudeContributions(self, *args)

    def loadMomentTensors(self, *args):
        """loadMomentTensors(DatabaseReader self, FocalMechanism arg2) -> int"""
        return _DataModel.DatabaseReader_loadMomentTensors(self, *args)

    def loadDataUseds(self, *args):
        """loadDataUseds(DatabaseReader self, MomentTensor arg2) -> int"""
        return _DataModel.DatabaseReader_loadDataUseds(self, *args)

    def loadMomentTensorPhaseSettings(self, *args):
        """loadMomentTensorPhaseSettings(DatabaseReader self, MomentTensor arg2) -> int"""
        return _DataModel.DatabaseReader_loadMomentTensorPhaseSettings(self, *args)

    def loadMomentTensorStationContributions(self, *args):
        """loadMomentTensorStationContributions(DatabaseReader self, MomentTensor arg2) -> int"""
        return _DataModel.DatabaseReader_loadMomentTensorStationContributions(self, *args)

    def loadMomentTensorComponentContributions(self, *args):
        """loadMomentTensorComponentContributions(DatabaseReader self, MomentTensorStationContribution arg2) -> int"""
        return _DataModel.DatabaseReader_loadMomentTensorComponentContributions(self, *args)

    def loadEventDescriptions(self, *args):
        """loadEventDescriptions(DatabaseReader self, Event arg2) -> int"""
        return _DataModel.DatabaseReader_loadEventDescriptions(self, *args)

    def loadOriginReferences(self, *args):
        """loadOriginReferences(DatabaseReader self, Event arg2) -> int"""
        return _DataModel.DatabaseReader_loadOriginReferences(self, *args)

    def loadFocalMechanismReferences(self, *args):
        """loadFocalMechanismReferences(DatabaseReader self, Event arg2) -> int"""
        return _DataModel.DatabaseReader_loadFocalMechanismReferences(self, *args)

    def loadConfig(self):
        """loadConfig(DatabaseReader self) -> Config"""
        return _DataModel.DatabaseReader_loadConfig(self)

    def loadParameterSets(self, *args):
        """loadParameterSets(DatabaseReader self, Config arg2) -> int"""
        return _DataModel.DatabaseReader_loadParameterSets(self, *args)

    def loadConfigModules(self, *args):
        """loadConfigModules(DatabaseReader self, Config arg2) -> int"""
        return _DataModel.DatabaseReader_loadConfigModules(self, *args)

    def loadParameters(self, *args):
        """loadParameters(DatabaseReader self, ParameterSet arg2) -> int"""
        return _DataModel.DatabaseReader_loadParameters(self, *args)

    def loadComments(self, *args):
        """
        loadComments(DatabaseReader self, Pick arg2) -> int
        loadComments(DatabaseReader self, Amplitude arg2) -> int
        loadComments(DatabaseReader self, Origin arg2) -> int
        loadComments(DatabaseReader self, StationMagnitude arg2) -> int
        loadComments(DatabaseReader self, Magnitude arg2) -> int
        loadComments(DatabaseReader self, FocalMechanism arg2) -> int
        loadComments(DatabaseReader self, MomentTensor arg2) -> int
        loadComments(DatabaseReader self, Event arg2) -> int
        loadComments(DatabaseReader self, ParameterSet arg2) -> int
        loadComments(DatabaseReader self, Parameter arg2) -> int
        """
        return _DataModel.DatabaseReader_loadComments(self, *args)

    def loadConfigStations(self, *args):
        """loadConfigStations(DatabaseReader self, ConfigModule arg2) -> int"""
        return _DataModel.DatabaseReader_loadConfigStations(self, *args)

    def loadSetups(self, *args):
        """loadSetups(DatabaseReader self, ConfigStation arg2) -> int"""
        return _DataModel.DatabaseReader_loadSetups(self, *args)

    def loadQualityControl(self):
        """loadQualityControl(DatabaseReader self) -> QualityControl"""
        return _DataModel.DatabaseReader_loadQualityControl(self)

    def loadQCLogs(self, *args):
        """loadQCLogs(DatabaseReader self, QualityControl arg2) -> int"""
        return _DataModel.DatabaseReader_loadQCLogs(self, *args)

    def loadWaveformQualitys(self, *args):
        """loadWaveformQualitys(DatabaseReader self, QualityControl arg2) -> int"""
        return _DataModel.DatabaseReader_loadWaveformQualitys(self, *args)

    def loadOutages(self, *args):
        """loadOutages(DatabaseReader self, QualityControl arg2) -> int"""
        return _DataModel.DatabaseReader_loadOutages(self, *args)

    def loadInventory(self):
        """loadInventory(DatabaseReader self) -> Inventory"""
        return _DataModel.DatabaseReader_loadInventory(self)

    def loadStationGroups(self, *args):
        """loadStationGroups(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadStationGroups(self, *args)

    def loadAuxDevices(self, *args):
        """loadAuxDevices(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadAuxDevices(self, *args)

    def loadSensors(self, *args):
        """loadSensors(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadSensors(self, *args)

    def loadDataloggers(self, *args):
        """loadDataloggers(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadDataloggers(self, *args)

    def loadResponsePAZs(self, *args):
        """loadResponsePAZs(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadResponsePAZs(self, *args)

    def loadResponseFIRs(self, *args):
        """loadResponseFIRs(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadResponseFIRs(self, *args)

    def loadResponsePolynomials(self, *args):
        """loadResponsePolynomials(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadResponsePolynomials(self, *args)

    def loadResponseFAPs(self, *args):
        """loadResponseFAPs(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadResponseFAPs(self, *args)

    def loadNetworks(self, *args):
        """loadNetworks(DatabaseReader self, Inventory arg2) -> int"""
        return _DataModel.DatabaseReader_loadNetworks(self, *args)

    def loadStationReferences(self, *args):
        """loadStationReferences(DatabaseReader self, StationGroup arg2) -> int"""
        return _DataModel.DatabaseReader_loadStationReferences(self, *args)

    def loadAuxSources(self, *args):
        """loadAuxSources(DatabaseReader self, AuxDevice arg2) -> int"""
        return _DataModel.DatabaseReader_loadAuxSources(self, *args)

    def loadSensorCalibrations(self, *args):
        """loadSensorCalibrations(DatabaseReader self, Sensor arg2) -> int"""
        return _DataModel.DatabaseReader_loadSensorCalibrations(self, *args)

    def loadDataloggerCalibrations(self, *args):
        """loadDataloggerCalibrations(DatabaseReader self, Datalogger arg2) -> int"""
        return _DataModel.DatabaseReader_loadDataloggerCalibrations(self, *args)

    def loadDecimations(self, *args):
        """loadDecimations(DatabaseReader self, Datalogger arg2) -> int"""
        return _DataModel.DatabaseReader_loadDecimations(self, *args)

    def loadStations(self, *args):
        """loadStations(DatabaseReader self, Network arg2) -> int"""
        return _DataModel.DatabaseReader_loadStations(self, *args)

    def loadSensorLocations(self, *args):
        """loadSensorLocations(DatabaseReader self, Station arg2) -> int"""
        return _DataModel.DatabaseReader_loadSensorLocations(self, *args)

    def loadAuxStreams(self, *args):
        """loadAuxStreams(DatabaseReader self, SensorLocation arg2) -> int"""
        return _DataModel.DatabaseReader_loadAuxStreams(self, *args)

    def loadStreams(self, *args):
        """loadStreams(DatabaseReader self, SensorLocation arg2) -> int"""
        return _DataModel.DatabaseReader_loadStreams(self, *args)

    def loadRouting(self):
        """loadRouting(DatabaseReader self) -> Routing"""
        return _DataModel.DatabaseReader_loadRouting(self)

    def loadRoutes(self, *args):
        """loadRoutes(DatabaseReader self, Routing arg2) -> int"""
        return _DataModel.DatabaseReader_loadRoutes(self, *args)

    def loadAccesss(self, *args):
        """loadAccesss(DatabaseReader self, Routing arg2) -> int"""
        return _DataModel.DatabaseReader_loadAccesss(self, *args)

    def loadRouteArclinks(self, *args):
        """loadRouteArclinks(DatabaseReader self, Route arg2) -> int"""
        return _DataModel.DatabaseReader_loadRouteArclinks(self, *args)

    def loadRouteSeedlinks(self, *args):
        """loadRouteSeedlinks(DatabaseReader self, Route arg2) -> int"""
        return _DataModel.DatabaseReader_loadRouteSeedlinks(self, *args)

    def loadJournaling(self):
        """loadJournaling(DatabaseReader self) -> Journaling"""
        return _DataModel.DatabaseReader_loadJournaling(self)

    def loadJournalEntrys(self, *args):
        """loadJournalEntrys(DatabaseReader self, Journaling arg2) -> int"""
        return _DataModel.DatabaseReader_loadJournalEntrys(self, *args)

    def loadArclinkLog(self):
        """loadArclinkLog(DatabaseReader self) -> ArclinkLog"""
        return _DataModel.DatabaseReader_loadArclinkLog(self)

    def loadArclinkRequests(self, *args):
        """loadArclinkRequests(DatabaseReader self, ArclinkLog arg2) -> int"""
        return _DataModel.DatabaseReader_loadArclinkRequests(self, *args)

    def loadArclinkUsers(self, *args):
        """loadArclinkUsers(DatabaseReader self, ArclinkLog arg2) -> int"""
        return _DataModel.DatabaseReader_loadArclinkUsers(self, *args)

    def load(self, *args):
        """
        load(DatabaseReader self, EventParameters arg2) -> int
        load(DatabaseReader self, Pick arg2) -> int
        load(DatabaseReader self, Amplitude arg2) -> int
        load(DatabaseReader self, Reading arg2) -> int
        load(DatabaseReader self, Origin arg2) -> int
        load(DatabaseReader self, StationMagnitude arg2) -> int
        load(DatabaseReader self, Magnitude arg2) -> int
        load(DatabaseReader self, FocalMechanism arg2) -> int
        load(DatabaseReader self, MomentTensor arg2) -> int
        load(DatabaseReader self, MomentTensorStationContribution arg2) -> int
        load(DatabaseReader self, Event arg2) -> int
        load(DatabaseReader self, Config arg2) -> int
        load(DatabaseReader self, ParameterSet arg2) -> int
        load(DatabaseReader self, Parameter arg2) -> int
        load(DatabaseReader self, ConfigModule arg2) -> int
        load(DatabaseReader self, ConfigStation arg2) -> int
        load(DatabaseReader self, QualityControl arg2) -> int
        load(DatabaseReader self, Inventory arg2) -> int
        load(DatabaseReader self, StationGroup arg2) -> int
        load(DatabaseReader self, AuxDevice arg2) -> int
        load(DatabaseReader self, Sensor arg2) -> int
        load(DatabaseReader self, Datalogger arg2) -> int
        load(DatabaseReader self, Network arg2) -> int
        load(DatabaseReader self, Station arg2) -> int
        load(DatabaseReader self, SensorLocation arg2) -> int
        load(DatabaseReader self, Routing arg2) -> int
        load(DatabaseReader self, Route arg2) -> int
        load(DatabaseReader self, Journaling arg2) -> int
        load(DatabaseReader self, ArclinkLog arg2) -> int
        load(DatabaseReader self, ArclinkRequest arg2) -> int
        """
        return _DataModel.DatabaseReader_load(self, *args)

    def loadArclinkStatusLines(self, *args):
        """loadArclinkStatusLines(DatabaseReader self, ArclinkRequest arg2) -> int"""
        return _DataModel.DatabaseReader_loadArclinkStatusLines(self, *args)

    def loadArclinkRequestLines(self, *args):
        """loadArclinkRequestLines(DatabaseReader self, ArclinkRequest arg2) -> int"""
        return _DataModel.DatabaseReader_loadArclinkRequestLines(self, *args)

DatabaseReader_swigregister = _DataModel.DatabaseReader_swigregister
DatabaseReader_swigregister(DatabaseReader)

class DatabaseQuery(DatabaseReader):
    """Proxy of C++ Seiscomp::DataModel::DatabaseQuery class"""
    __swig_setmethods__ = {}
    for _s in [DatabaseReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [DatabaseReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseQuery, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Seiscomp::DataModel::DatabaseQuery self, DatabaseInterface dbDriver) -> DatabaseQuery"""
        this = _DataModel.new_DatabaseQuery(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DataModel.delete_DatabaseQuery
    __del__ = lambda self : None;
    def getComponentGain(self, *args):
        """
        getComponentGain(DatabaseQuery self, std::string const & network_code, std::string const & station_code, std::string const & location_code, 
            std::string const & stream_code, Time time) -> Seiscomp::Core::Optional< double >::Impl
        """
        return _DataModel.DatabaseQuery_getComponentGain(self, *args)

    def getStation(self, *args):
        """getStation(DatabaseQuery self, std::string const & network_code, std::string const & station_code, Time time) -> Station"""
        return _DataModel.DatabaseQuery_getStation(self, *args)

    def getEvent(self, *args):
        """getEvent(DatabaseQuery self, std::string const & originID) -> Event"""
        return _DataModel.DatabaseQuery_getEvent(self, *args)

    def getEventByPreferredMagnitudeID(self, *args):
        """getEventByPreferredMagnitudeID(DatabaseQuery self, std::string const & magnitudeID) -> Event"""
        return _DataModel.DatabaseQuery_getEventByPreferredMagnitudeID(self, *args)

    def getEventForFocalMechanism(self, *args):
        """getEventForFocalMechanism(DatabaseQuery self, std::string const & focalMechanismID) -> Event"""
        return _DataModel.DatabaseQuery_getEventForFocalMechanism(self, *args)

    def getEventByPublicID(self, *args):
        """getEventByPublicID(DatabaseQuery self, std::string const & eventID) -> Event"""
        return _DataModel.DatabaseQuery_getEventByPublicID(self, *args)

    def getAmplitude(self, *args):
        """getAmplitude(DatabaseQuery self, std::string const & pickID, std::string const & type) -> Amplitude"""
        return _DataModel.DatabaseQuery_getAmplitude(self, *args)

    def getAmplitudesForPick(self, *args):
        """getAmplitudesForPick(DatabaseQuery self, std::string const & pickID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getAmplitudesForPick(self, *args)

    def getAmplitudesForOrigin(self, *args):
        """getAmplitudesForOrigin(DatabaseQuery self, std::string const & originID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getAmplitudesForOrigin(self, *args)

    def getOriginsForAmplitude(self, *args):
        """getOriginsForAmplitude(DatabaseQuery self, std::string const & amplitudeID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getOriginsForAmplitude(self, *args)

    def getOriginByMagnitude(self, *args):
        """getOriginByMagnitude(DatabaseQuery self, std::string const & magnitudeID) -> Origin"""
        return _DataModel.DatabaseQuery_getOriginByMagnitude(self, *args)

    def getArrivalsForAmplitude(self, *args):
        """getArrivalsForAmplitude(DatabaseQuery self, std::string const & amplitudeID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getArrivalsForAmplitude(self, *args)

    def getPicks(self, *args):
        """
        getPicks(DatabaseQuery self, std::string const & originID) -> DatabaseIterator
        getPicks(DatabaseQuery self, Time startTime, Time endTime) -> DatabaseIterator
        getPicks(DatabaseQuery self, Time startTime, Time endTime, WaveformStreamID waveformID) -> DatabaseIterator
        """
        return _DataModel.DatabaseQuery_getPicks(self, *args)

    def getWaveformQuality(self, *args):
        """
        getWaveformQuality(DatabaseQuery self, std::string const & type) -> DatabaseIterator
        getWaveformQuality(DatabaseQuery self, WaveformStreamID waveformID, std::string const & parameter, Time startTime, Time endTime) -> DatabaseIterator
        getWaveformQuality(DatabaseQuery self, Time startTime, Time endTime) -> DatabaseIterator
        getWaveformQuality(DatabaseQuery self, WaveformStreamID waveformID, std::string const & parameter, std::string const & type, 
            Time startTime, Time endTime) -> DatabaseIterator
        """
        return _DataModel.DatabaseQuery_getWaveformQuality(self, *args)

    def getWaveformQualityDescending(self, *args):
        """getWaveformQualityDescending(DatabaseQuery self, WaveformStreamID waveformID, std::string const & parameter, std::string const & type) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getWaveformQualityDescending(self, *args)

    def getOutage(self, *args):
        """getOutage(DatabaseQuery self, WaveformStreamID waveformID, Time startTime, Time endTime) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getOutage(self, *args)

    def getQCLog(self, *args):
        """getQCLog(DatabaseQuery self, WaveformStreamID waveformID, Time startTime, Time endTime) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getQCLog(self, *args)

    def getPreferredOrigins(self, *args):
        """getPreferredOrigins(DatabaseQuery self, Time startTime, Time endTime, std::string const & referenceOriginID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getPreferredOrigins(self, *args)

    def getPreferredMagnitudes(self, *args):
        """getPreferredMagnitudes(DatabaseQuery self, Time startTime, Time endTime, std::string const & referenceMagnitudeID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getPreferredMagnitudes(self, *args)

    def getEvents(self, *args):
        """getEvents(DatabaseQuery self, Time startTime, Time endTime) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getEvents(self, *args)

    def getOrigins(self, *args):
        """getOrigins(DatabaseQuery self, std::string const & eventID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getOrigins(self, *args)

    def getOriginsDescending(self, *args):
        """getOriginsDescending(DatabaseQuery self, std::string const & eventID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getOriginsDescending(self, *args)

    def getFocalMechanismsDescending(self, *args):
        """getFocalMechanismsDescending(DatabaseQuery self, std::string const & eventID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getFocalMechanismsDescending(self, *args)

    def getEventPickIDs(self, *args):
        """getEventPickIDs(DatabaseQuery self, std::string const & publicID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getEventPickIDs(self, *args)

    def getEventPickIDsByWeight(self, *args):
        """getEventPickIDsByWeight(DatabaseQuery self, std::string const & publicID, double weight) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getEventPickIDsByWeight(self, *args)

    def getEventPicks(self, *args):
        """getEventPicks(DatabaseQuery self, std::string const & eventID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getEventPicks(self, *args)

    def getEventPicksByWeight(self, *args):
        """getEventPicksByWeight(DatabaseQuery self, std::string const & publicID, double weight) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getEventPicksByWeight(self, *args)

    def getConfigModule(self, *args):
        """getConfigModule(DatabaseQuery self, std::string const & name, bool enabled) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getConfigModule(self, *args)

    def getEquivalentPick(self, *args):
        """
        getEquivalentPick(DatabaseQuery self, std::string const & stationCode, std::string const & networkCode, std::string const & locationCode, 
            std::string const & channelCode, Time startTime, Time endTime) -> DatabaseIterator
        """
        return _DataModel.DatabaseQuery_getEquivalentPick(self, *args)

    def getJournal(self, *args):
        """getJournal(DatabaseQuery self, std::string const & objectID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getJournal(self, *args)

    def getJournalAction(self, *args):
        """getJournalAction(DatabaseQuery self, std::string const & objectID, std::string const & action) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getJournalAction(self, *args)

    def getArclinkRequestByStreamCode(self, *args):
        """
        getArclinkRequestByStreamCode(DatabaseQuery self, Time startTime, Time endTime, std::string const & networkCode, std::string const & stationCode, 
            std::string const & locationCode, std::string const & channelCode, 
            std::string const & type) -> DatabaseIterator
        """
        return _DataModel.DatabaseQuery_getArclinkRequestByStreamCode(self, *args)

    def getArclinkRequestByRequestID(self, *args):
        """getArclinkRequestByRequestID(DatabaseQuery self, std::string const & requestID) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getArclinkRequestByRequestID(self, *args)

    def getArclinkRequestByUserID(self, *args):
        """getArclinkRequestByUserID(DatabaseQuery self, std::string const & userID, Time startTime, Time endTime, std::string const & type) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getArclinkRequestByUserID(self, *args)

    def getArclinkRequestByTime(self, *args):
        """getArclinkRequestByTime(DatabaseQuery self, Time startTime, Time endTime, std::string const & type) -> DatabaseIterator"""
        return _DataModel.DatabaseQuery_getArclinkRequestByTime(self, *args)

    def getArclinkRequest(self, *args):
        """
        getArclinkRequest(DatabaseQuery self, std::string const & userID, Time startTime, Time endTime, std::string const & networkCode, 
            std::string const & stationCode, std::string const & locationCode, 
            std::string const & channelCode, std::string const & type, std::string const & netClass) -> DatabaseIterator
        """
        return _DataModel.DatabaseQuery_getArclinkRequest(self, *args)

    def getArclinkRequestRestricted(self, *args):
        """
        getArclinkRequestRestricted(DatabaseQuery self, std::string const & userID, Time startTime, Time endTime, std::string const & networkCode, 
            std::string const & stationCode, std::string const & locationCode, 
            std::string const & channelCode, std::string const & type, std::string const & netClass, 
            bool restricted) -> DatabaseIterator
        """
        return _DataModel.DatabaseQuery_getArclinkRequestRestricted(self, *args)

DatabaseQuery_swigregister = _DataModel.DatabaseQuery_swigregister
DatabaseQuery_swigregister(DatabaseQuery)

# This file is compatible with both classic and new-style classes.


