#
# *** QcTool default configuration file ***
#
# Place a copy with your own modifications
# in ~/.seiscomp3
#

# Send to the QC group
connection.primaryGroup = QC


# Receive objects from CONFIG group
connection.subscriptions = CONFIG


# ID of the creator
CreatorId="smi://de.gfz-potsdam/QcTool_0.3.1"


# use only configured streams (trunk/key/station_*) (z-component) (True/False) 
# --> the same streams as e.g. scautopick works on
useConfiguredStreams = true

# If useConfiguredStreams is true then this parameter decides whether to use
# only the vertical component (default) or all three components.
# The 3 components are collected from the inventory according to channel
# orientation. If that is not possible then the fixed components N and E will
# be used.
use3Components = false

# if useConfiguredStreams == False then
# load (from inventory) only those streams, matching the streamMask
# RegEx e.g. "^(NET1|NET2)\.(STA1|STA2|STA3)\.(LOC)\.((BH)|(LH)|(HH))Z$"
# RegEx e.g. "^(.+)\.(.+)\.(.*)\.(.+)Z$"
streamMask = "^(.+)\.(.+)\.(.*)\.(BHZ)$"


# Database look up for past entries not older than x days
# (to determine the last QC parameter calculated)
# [days]
dbLookBack = 7


# currently implemented QcPlugins:
# QcDelay, QcLatency, QcTiming, QcRms, QcOffset, QcGap, QcSpike, QcOutage
#
# Load this plugins for calculating Qc Parameters
plugins = qcplugin_delay, \
          qcplugin_latency, \
          qcplugin_timing, \
          qcplugin_rms, \
          qcplugin_offset, \
          qcplugin_gap, \
          qcplugin_overlap, \
          qcplugin_availability, \
          qcplugin_spike, \
          qcplugin_outage


# QcPlugin DEFAULT configuration
#
# Use this plugin only for realtime  processing [True].
# Default [False] means, plugin is able to
# process archived data AND realtime data streams.
plugins.default.realTimeOnly = False
#
# Qc-Buffer Length [s] (aka LTA-Buffer)
# Must be >= plugins.*.bufferLength
plugins.default.buffer = 4000
#
#     A R C H I V E
# Interval for sending archive messages [s]
# ... which will finally end up in the database
# so be carefull, not setting it too small!!!
# If set to -1, nothing gets written into the database
plugins.default.archive.interval = -1
# Archive Buffer length [s]
plugins.default.archive.buffer = 3600
#
#     R E P O R T
# Interval for sending report messages [s]
# ... which e.g. may be displayed by scqcv (QcView)
plugins.default.report.interval = 60
# Report Buffer length [s]
plugins.default.report.buffer = 600
# Report messages are generated in case of no data is received since timeout seconds [s]
# (only in realtime processing mode)
plugins.default.report.timeout = 0
#
#     A L E R T
# (only available in realtime processing mode)
# !!! STILL EXPERIMENTAL !!!
# Interval for checking alert thresholds [s]
# A value of -1 disables threshold checking.
plugins.default.alert.interval = -1
# Alert Buffer length [s] (aka STA-Buffer)
plugins.default.alert.buffer = 1800
# Alert threshold in percent [%], single value. [list: 25,50,75 ... not yet implemented]
plugins.default.alert.thresholds = 150


# QcPlugin SPECIFIC configuration
plugins.QcLatency.report.buffer = 60
plugins.QcLatency.report.timeout = 60
plugins.QcLatency.realTimeOnly = True
#
plugins.QcDelay.report.buffer = 60
plugins.QcDelay.report.timeout = 60
plugins.QcDelay.realTimeOnly = True
#
plugins.QcAvailability.report.timeout = 60
#
#
# If there is a gap of more than x [s],
# write an OUTAGE entry into the database.
plugins.QcOutage.notifyDB = 1800
