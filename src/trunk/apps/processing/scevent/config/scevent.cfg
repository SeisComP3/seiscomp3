# Author for created objects
author = @appname@@@@hostname@

# Send to the EVENT group
connection.primaryGroup = EVENT

# Receive objects from LOCATION, MAGNITUDE and FOCMECH group
connection.subscriptions = LOCATION, MAGNITUDE, FOCMECH, EVENT


# A magnitudes needs at least 4 stationmagnitudes
# to become preferred
eventAssociation.minimumMagnitudes = 4

# An automatic origin will be associated to an
# event when it has at least 10 phases
eventAssociation.minimumDefiningPhases = 10

# Minimum score of an automatic origin to be allowed to
# form an new Event. This requires an activated score
# plugin. See parameter score.
# If set the minimumDefiningPhases has no effect at as
# this check will be superseded by the score check. It is
# the task of the score processor to evaluate a proper
# score for all input origins.
# By default this option is deactivated.
#eventAssociation.minimumScore = 1

# An automatic origin will be associated to an
# event when it falls inside this region.
# Format: min-lat, min-lon, max-lat, max-lon
#eventAssociation.region.rect = -90,-180,90,180

# Search 1800 seconds BEFORE origin time of a
# new location for matching events
eventAssociation.eventTimeBefore = 1800

# Search 1800 seconds AFTER origin time of a
# new location for matching events
eventAssociation.eventTimeAfter = 1800

# An origin will be associated to an existing
# event when at least 3 picks matches with
# former associated origins
eventAssociation.minimumMatchingArrivals = 3

# If this time window in seconds is negative, pickIDs
# are compared to find matching arrivals. A non negative
# value (including 0) compares pick times regardless
# of the pickID.
# Pass: |pick1.time - pick2.time| <= threshold
eventAssociation.maximumMatchingArrivalTimeDiff = -1

# This parameter is only used in conjunction with
# eventAssociation.maximumMatchingArrivalTimeDiff. If a station
# has multiple associated arrivals for a particular event, this
# flag defines if the time distance of a new pick to all arrivals
# must be within eventAssociation.maximumMatchingArrivalTimeDiff
# or if one matching arrival is enough.
eventAssociation.compareAllArrivalTimes = true

# Associates an origin with an existing event
# if the origin time differs not more
# than 60 seconds unless the minimumMatchingArrivals
# criteria matches.
eventAssociation.maximumTimeSpan = 60

# Associates an origin to an existing event
# when the location differs not more
# than 5 degrees unless the minimumMatchingArrivals
# criteria matches
eventAssociation.maximumDistance = 5

# Minimum number of station magnitudes required for Mw(mB) to be considered as
# preferred magnitude.
eventAssociation.minMwCount = 8

# Minimum number of station magnitudes which ensures that Mw(mB) will be
# preferred and not mb.
eventAssociation.mbOverMwCount = 30

# Average between mb and Mw(mB) which must be exceeded to become Mw(mB)
# preferred.
eventAssociation.mbOverMwValue = 6

# The magnitude type priority list
# Magnitudes with other types cannot become
# preferred magnitudes
eventAssociation.magTypes = M

# The agencyID priority list
# When the eventtool comes to the point to select a preferred
# origin it orders all origins by its
# agency priority and selects then the best one among the
# highest priority agency.
# It also defines the agency priority for custom priority
# checks (eventAssociation.priorities)
#eventAssociation.agencies = GFZ

# The author priority list
# When the eventtool comes to the point to select a preferred
# origin it orders all origins by its
# author priority and selects then the best one among the
# highest priority author.
# It also defines the author priority for custom priority
# checks (eventAssociation.priorities)
#eventAssociation.authors = scautoloc@localhost

# The general priority list to decide if an origin
# becomes preferred. This feature is still experimental
# and not used unless this parameter is activated.
# The default below replicates the old hard wired
# behaviour.
# Available tokens:
#  AGENCY - check based on agency priorities
#  AUTHOR - check based on author priorities
#  MODE   - manual origins over-rule automatic ones
#  STATUS - priority based on status, highest to lowest: final, reviewed, confirmed, preliminary, reported, rejected, manual over-rules automatic
#  METHOD - check based on the method priorities
#  PHASES - higher phase count = higher priority
#  PHASES_AUTOMATIC - only checks phase priorities for
#                     incoming automatic origins
#  RMS    - lower rms = higher priority
#  RMS_AUTMATIC - only check RMS on incoming
#                 automatic origins
#  TIME   - more recent origins (creationTime) have
#           higher priorities
#  TIME_AUTOMATIC - only checks creationTime priority
#                   on incoming automatic origins
# eventAssociation.priorities = AGENCY, STATUS,\
#                               PHASES_AUTOMATIC,\
#                               TIME_AUTOMATIC

# If true, one magnitude will be preferred even if magnitude criteria are
# not fullfilled.
eventAssociation.enableFallbackMagnitude = false

# The eventID prefix
# The eventID format is [prefix][year][code], e.g. gfz2008fdvg
eventIDPrefix = "gfz"

# Defines the pattern to generate an event ID.
# %p : prefix
# %Y : year
# %[w]c: alpha character
# %[w]C: upper case alpha character
# %[w]d: decimal
# %[w]x: hexadecimal
# %[w]X: upper case hexadecimal
eventIDPattern = "%p%Y%04c"

# Configures a timespan in seconds to delay origin association
#eventAssociation.delayTimeSpan = 0

# AgencyID filter used to delay origin association if
# eventAssociation.delayTimeSpan > 0
#eventAssociation.delayFilter.agencyID = agency

# Author filter used to delay origin association if
# eventAssociation.delayTimeSpan > 0
#eventAssociation.delayFilter.author = author

# evaluationMode filter used to delay origin association if
# eventAssociation.delayTimeSpan > 0. Allowed values are "manual" or "automatic"
#eventAssociation.delayFilter.evaluationMode = automatic

# Defines whether to associate or to ignore origins derived from CMT/MT
# inversions.
eventAssociation.ignoreFMDerivedOrigins = true

# If the preferred origin has evaluation status 'rejected' the event type will
# be set as 'not existing' unless the event type has been fixed by an operator
# or the preferred origin has been fixed.
eventAssociation.declareFakeEventForRejectedOrigin = false

# Allows to match picks that are associated with weight 0
eventAssociation.allowLooseAssociatedArrivals = false
