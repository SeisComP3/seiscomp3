# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Config')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Config')
    _Config = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Config', [dirname(__file__)])
        except ImportError:
            import _Config
            return _Config
        try:
            _mod = imp.load_module('_Config', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Config = swig_import_helper()
    del swig_import_helper
else:
    import _Config
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Config.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Config.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Config.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Config.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Config.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Config.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Config.SwigPyIterator_copy(self)

    def next(self):
        return _Config.SwigPyIterator_next(self)

    def __next__(self):
        return _Config.SwigPyIterator___next__(self)

    def previous(self):
        return _Config.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Config.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Config.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Config.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Config.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Config.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Config.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Config.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Config.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

ERROR = _Config.ERROR
WARNING = _Config.WARNING
INFO = _Config.INFO
DEBUG = _Config.DEBUG
class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Config.delete_Logger
    __del__ = lambda self: None

    def log(self, arg0, filename, line, msg):
        return _Config.Logger_log(self, arg0, filename, line, msg)

    def __init__(self):
        if self.__class__ == Logger:
            _self = None
        else:
            _self = self
        this = _Config.new_Logger(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _Config.disown_Logger(self)
        return weakref_proxy(self)
Logger_swigregister = _Config.Logger_swigregister
Logger_swigregister(Logger)

class Exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Config.new_Exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Config.delete_Exception
    __del__ = lambda self: None

    def what(self):
        return _Config.Exception_what(self)
Exception_swigregister = _Config.Exception_swigregister
Exception_swigregister(Exception)
cvar = _Config.cvar

class OptionNotFoundException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionNotFoundException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Config.new_OptionNotFoundException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Config.delete_OptionNotFoundException
    __del__ = lambda self: None
OptionNotFoundException_swigregister = _Config.OptionNotFoundException_swigregister
OptionNotFoundException_swigregister(OptionNotFoundException)

class TypeConversionException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeConversionException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeConversionException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Config.new_TypeConversionException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Config.delete_TypeConversionException
    __del__ = lambda self: None
TypeConversionException_swigregister = _Config.TypeConversionException_swigregister
TypeConversionException_swigregister(TypeConversionException)

class SyntaxException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyntaxException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SyntaxException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Config.new_SyntaxException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Config.delete_SyntaxException
    __del__ = lambda self: None
SyntaxException_swigregister = _Config.SyntaxException_swigregister
SyntaxException_swigregister(SyntaxException)

class CaseSensitivityException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaseSensitivityException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaseSensitivityException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Config.new_CaseSensitivityException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Config.delete_CaseSensitivityException
    __del__ = lambda self: None
CaseSensitivityException_swigregister = _Config.CaseSensitivityException_swigregister
CaseSensitivityException_swigregister(CaseSensitivityException)

class Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Config.new_Symbol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, name, values, uri, comment, stage=-1):
        return _Config.Symbol_set(self, name, values, uri, comment, stage)

    def __eq__(self, symbol):
        return _Config.Symbol___eq__(self, symbol)

    def toString(self):
        return _Config.Symbol_toString(self)
    __swig_setmethods__["name"] = _Config.Symbol_name_set
    __swig_getmethods__["name"] = _Config.Symbol_name_get
    if _newclass:
        name = _swig_property(_Config.Symbol_name_get, _Config.Symbol_name_set)
    __swig_setmethods__["content"] = _Config.Symbol_content_set
    __swig_getmethods__["content"] = _Config.Symbol_content_get
    if _newclass:
        content = _swig_property(_Config.Symbol_content_get, _Config.Symbol_content_set)
    __swig_setmethods__["values"] = _Config.Symbol_values_set
    __swig_getmethods__["values"] = _Config.Symbol_values_get
    if _newclass:
        values = _swig_property(_Config.Symbol_values_get, _Config.Symbol_values_set)
    __swig_setmethods__["uri"] = _Config.Symbol_uri_set
    __swig_getmethods__["uri"] = _Config.Symbol_uri_get
    if _newclass:
        uri = _swig_property(_Config.Symbol_uri_get, _Config.Symbol_uri_set)
    __swig_setmethods__["comment"] = _Config.Symbol_comment_set
    __swig_getmethods__["comment"] = _Config.Symbol_comment_get
    if _newclass:
        comment = _swig_property(_Config.Symbol_comment_get, _Config.Symbol_comment_set)
    __swig_setmethods__["stage"] = _Config.Symbol_stage_set
    __swig_getmethods__["stage"] = _Config.Symbol_stage_get
    if _newclass:
        stage = _swig_property(_Config.Symbol_stage_get, _Config.Symbol_stage_set)
    __swig_setmethods__["line"] = _Config.Symbol_line_set
    __swig_getmethods__["line"] = _Config.Symbol_line_get
    if _newclass:
        line = _swig_property(_Config.Symbol_line_get, _Config.Symbol_line_set)
    __swig_destroy__ = _Config.delete_Symbol
    __del__ = lambda self: None
Symbol_swigregister = _Config.Symbol_swigregister
Symbol_swigregister(Symbol)

class SymbolTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Config.new_SymbolTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCaseSensitivityCheck(self, arg2):
        return _Config.SymbolTable_setCaseSensitivityCheck(self, arg2)

    def setLogger(self, arg2):
        return _Config.SymbolTable_setLogger(self, arg2)

    def add(self, *args):
        return _Config.SymbolTable_add(self, *args)

    def get(self, *args):
        return _Config.SymbolTable_get(self, *args)

    def remove(self, name):
        return _Config.SymbolTable_remove(self, name)

    def incrementObjectCount(self):
        return _Config.SymbolTable_incrementObjectCount(self)

    def decrementObjectCount(self):
        return _Config.SymbolTable_decrementObjectCount(self)

    def objectCount(self):
        return _Config.SymbolTable_objectCount(self)

    def toString(self):
        return _Config.SymbolTable_toString(self)

    def hasFileBeenIncluded(self, fileName):
        return _Config.SymbolTable_hasFileBeenIncluded(self, fileName)

    def addToIncludedFiles(self, fileName):
        return _Config.SymbolTable_addToIncludedFiles(self, fileName)

    def includesBegin(self):
        return _Config.SymbolTable_includesBegin(self)

    def includesEnd(self):
        return _Config.SymbolTable_includesEnd(self)

    def begin(self):
        return _Config.SymbolTable_begin(self)

    def end(self):
        return _Config.SymbolTable_end(self)
    __swig_destroy__ = _Config.delete_SymbolTable
    __del__ = lambda self: None
SymbolTable_swigregister = _Config.SymbolTable_swigregister
SymbolTable_swigregister(SymbolTable)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Config.new_Config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Config.delete_Config
    __del__ = lambda self: None

    def setCaseSensitivityCheck(self, arg2):
        return _Config.Config_setCaseSensitivityCheck(self, arg2)

    def readConfig(self, file, stage=-1, raw=False):
        return _Config.Config_readConfig(self, file, stage, raw)

    def writeConfig(self, *args):
        return _Config.Config_writeConfig(self, *args)

    def setLogger(self, logger):
        return _Config.Config_setLogger(self, logger)

    def symbolsToString(self):
        return _Config.Config_symbolsToString(self)

    def names(self):
        return _Config.Config_names(self)

    def visitedFilesToString(self):
        return _Config.Config_visitedFilesToString(self)

    def getInt(self, *args):
        return _Config.Config_getInt(self, *args)

    def setInt(self, name, value):
        return _Config.Config_setInt(self, name, value)

    def getDouble(self, *args):
        return _Config.Config_getDouble(self, *args)

    def setDouble(self, name, value):
        return _Config.Config_setDouble(self, name, value)

    def getBool(self, *args):
        return _Config.Config_getBool(self, *args)

    def setBool(self, name, value):
        return _Config.Config_setBool(self, name, value)

    def getString(self, *args):
        return _Config.Config_getString(self, *args)

    def setString(self, name, value):
        return _Config.Config_setString(self, name, value)

    def remove(self, name):
        return _Config.Config_remove(self, name)

    def getInts(self, *args):
        return _Config.Config_getInts(self, *args)

    def setInts(self, name, values):
        return _Config.Config_setInts(self, name, values)

    def getDoubles(self, *args):
        return _Config.Config_getDoubles(self, *args)

    def setDoubles(self, name, values):
        return _Config.Config_setDoubles(self, name, values)

    def getBools(self, *args):
        return _Config.Config_getBools(self, *args)

    def setBools(self, name, values):
        return _Config.Config_setBools(self, name, values)

    def getStrings(self, *args):
        return _Config.Config_getStrings(self, *args)

    def setStrings(self, name, values):
        return _Config.Config_setStrings(self, name, values)

    def symbolTable(self):
        return _Config.Config_symbolTable(self)
    if _newclass:
        Instance = staticmethod(_Config.Config_Instance)
    else:
        Instance = _Config.Config_Instance

    def eval(self, rvalue, result, resolveReferences=True, errmsg=None):
        return _Config.Config_eval(self, rvalue, result, resolveReferences, errmsg)
    if _newclass:
        Eval = staticmethod(_Config.Config_Eval)
    else:
        Eval = _Config.Config_Eval
    if _newclass:
        writeValues = staticmethod(_Config.Config_writeValues)
    else:
        writeValues = _Config.Config_writeValues
    if _newclass:
        writeSymbol = staticmethod(_Config.Config_writeSymbol)
    else:
        writeSymbol = _Config.Config_writeSymbol

    def trackVariables(self, enabled):
        return _Config.Config_trackVariables(self, enabled)

    def getVariables(self):
        return _Config.Config_getVariables(self)
Config_swigregister = _Config.Config_swigregister
Config_swigregister(Config)

def Config_Instance(fileName):
    return _Config.Config_Instance(fileName)
Config_Instance = _Config.Config_Instance

def Config_Eval(rvalue, result, resolveReferences=True, symtab=None, errmsg=None):
    return _Config.Config_Eval(rvalue, result, resolveReferences, symtab, errmsg)
Config_Eval = _Config.Config_Eval

def Config_writeValues(os, symbol):
    return _Config.Config_writeValues(os, symbol)
Config_writeValues = _Config.Config_writeValues

def Config_writeSymbol(os, symbol):
    return _Config.Config_writeSymbol(os, symbol)
Config_writeSymbol = _Config.Config_writeSymbol

class vectorStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorStr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Config.vectorStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Config.vectorStr___nonzero__(self)

    def __bool__(self):
        return _Config.vectorStr___bool__(self)

    def __len__(self):
        return _Config.vectorStr___len__(self)

    def __getslice__(self, i, j):
        return _Config.vectorStr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Config.vectorStr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Config.vectorStr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Config.vectorStr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Config.vectorStr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Config.vectorStr___setitem__(self, *args)

    def pop(self):
        return _Config.vectorStr_pop(self)

    def append(self, x):
        return _Config.vectorStr_append(self, x)

    def empty(self):
        return _Config.vectorStr_empty(self)

    def size(self):
        return _Config.vectorStr_size(self)

    def swap(self, v):
        return _Config.vectorStr_swap(self, v)

    def begin(self):
        return _Config.vectorStr_begin(self)

    def end(self):
        return _Config.vectorStr_end(self)

    def rbegin(self):
        return _Config.vectorStr_rbegin(self)

    def rend(self):
        return _Config.vectorStr_rend(self)

    def clear(self):
        return _Config.vectorStr_clear(self)

    def get_allocator(self):
        return _Config.vectorStr_get_allocator(self)

    def pop_back(self):
        return _Config.vectorStr_pop_back(self)

    def erase(self, *args):
        return _Config.vectorStr_erase(self, *args)

    def __init__(self, *args):
        this = _Config.new_vectorStr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Config.vectorStr_push_back(self, x)

    def front(self):
        return _Config.vectorStr_front(self)

    def back(self):
        return _Config.vectorStr_back(self)

    def assign(self, n, x):
        return _Config.vectorStr_assign(self, n, x)

    def resize(self, *args):
        return _Config.vectorStr_resize(self, *args)

    def insert(self, *args):
        return _Config.vectorStr_insert(self, *args)

    def reserve(self, n):
        return _Config.vectorStr_reserve(self, n)

    def capacity(self):
        return _Config.vectorStr_capacity(self)
    __swig_destroy__ = _Config.delete_vectorStr
    __del__ = lambda self: None
vectorStr_swigregister = _Config.vectorStr_swigregister
vectorStr_swigregister(vectorStr)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Config.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Config.vectorInt___nonzero__(self)

    def __bool__(self):
        return _Config.vectorInt___bool__(self)

    def __len__(self):
        return _Config.vectorInt___len__(self)

    def __getslice__(self, i, j):
        return _Config.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Config.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Config.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Config.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Config.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Config.vectorInt___setitem__(self, *args)

    def pop(self):
        return _Config.vectorInt_pop(self)

    def append(self, x):
        return _Config.vectorInt_append(self, x)

    def empty(self):
        return _Config.vectorInt_empty(self)

    def size(self):
        return _Config.vectorInt_size(self)

    def swap(self, v):
        return _Config.vectorInt_swap(self, v)

    def begin(self):
        return _Config.vectorInt_begin(self)

    def end(self):
        return _Config.vectorInt_end(self)

    def rbegin(self):
        return _Config.vectorInt_rbegin(self)

    def rend(self):
        return _Config.vectorInt_rend(self)

    def clear(self):
        return _Config.vectorInt_clear(self)

    def get_allocator(self):
        return _Config.vectorInt_get_allocator(self)

    def pop_back(self):
        return _Config.vectorInt_pop_back(self)

    def erase(self, *args):
        return _Config.vectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _Config.new_vectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Config.vectorInt_push_back(self, x)

    def front(self):
        return _Config.vectorInt_front(self)

    def back(self):
        return _Config.vectorInt_back(self)

    def assign(self, n, x):
        return _Config.vectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Config.vectorInt_resize(self, *args)

    def insert(self, *args):
        return _Config.vectorInt_insert(self, *args)

    def reserve(self, n):
        return _Config.vectorInt_reserve(self, n)

    def capacity(self):
        return _Config.vectorInt_capacity(self)
    __swig_destroy__ = _Config.delete_vectorInt
    __del__ = lambda self: None
vectorInt_swigregister = _Config.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class vectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Config.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Config.vectorDouble___nonzero__(self)

    def __bool__(self):
        return _Config.vectorDouble___bool__(self)

    def __len__(self):
        return _Config.vectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _Config.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Config.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Config.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Config.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Config.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Config.vectorDouble___setitem__(self, *args)

    def pop(self):
        return _Config.vectorDouble_pop(self)

    def append(self, x):
        return _Config.vectorDouble_append(self, x)

    def empty(self):
        return _Config.vectorDouble_empty(self)

    def size(self):
        return _Config.vectorDouble_size(self)

    def swap(self, v):
        return _Config.vectorDouble_swap(self, v)

    def begin(self):
        return _Config.vectorDouble_begin(self)

    def end(self):
        return _Config.vectorDouble_end(self)

    def rbegin(self):
        return _Config.vectorDouble_rbegin(self)

    def rend(self):
        return _Config.vectorDouble_rend(self)

    def clear(self):
        return _Config.vectorDouble_clear(self)

    def get_allocator(self):
        return _Config.vectorDouble_get_allocator(self)

    def pop_back(self):
        return _Config.vectorDouble_pop_back(self)

    def erase(self, *args):
        return _Config.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _Config.new_vectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Config.vectorDouble_push_back(self, x)

    def front(self):
        return _Config.vectorDouble_front(self)

    def back(self):
        return _Config.vectorDouble_back(self)

    def assign(self, n, x):
        return _Config.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Config.vectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Config.vectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Config.vectorDouble_reserve(self, n)

    def capacity(self):
        return _Config.vectorDouble_capacity(self)
    __swig_destroy__ = _Config.delete_vectorDouble
    __del__ = lambda self: None
vectorDouble_swigregister = _Config.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class vectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorBool, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Config.vectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Config.vectorBool___nonzero__(self)

    def __bool__(self):
        return _Config.vectorBool___bool__(self)

    def __len__(self):
        return _Config.vectorBool___len__(self)

    def __getslice__(self, i, j):
        return _Config.vectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Config.vectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Config.vectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Config.vectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Config.vectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Config.vectorBool___setitem__(self, *args)

    def pop(self):
        return _Config.vectorBool_pop(self)

    def append(self, x):
        return _Config.vectorBool_append(self, x)

    def empty(self):
        return _Config.vectorBool_empty(self)

    def size(self):
        return _Config.vectorBool_size(self)

    def swap(self, v):
        return _Config.vectorBool_swap(self, v)

    def begin(self):
        return _Config.vectorBool_begin(self)

    def end(self):
        return _Config.vectorBool_end(self)

    def rbegin(self):
        return _Config.vectorBool_rbegin(self)

    def rend(self):
        return _Config.vectorBool_rend(self)

    def clear(self):
        return _Config.vectorBool_clear(self)

    def get_allocator(self):
        return _Config.vectorBool_get_allocator(self)

    def pop_back(self):
        return _Config.vectorBool_pop_back(self)

    def erase(self, *args):
        return _Config.vectorBool_erase(self, *args)

    def __init__(self, *args):
        this = _Config.new_vectorBool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Config.vectorBool_push_back(self, x)

    def front(self):
        return _Config.vectorBool_front(self)

    def back(self):
        return _Config.vectorBool_back(self)

    def assign(self, n, x):
        return _Config.vectorBool_assign(self, n, x)

    def resize(self, *args):
        return _Config.vectorBool_resize(self, *args)

    def insert(self, *args):
        return _Config.vectorBool_insert(self, *args)

    def reserve(self, n):
        return _Config.vectorBool_reserve(self, n)

    def capacity(self):
        return _Config.vectorBool_capacity(self)
    __swig_destroy__ = _Config.delete_vectorBool
    __del__ = lambda self: None
vectorBool_swigregister = _Config.vectorBool_swigregister
vectorBool_swigregister(vectorBool)

# This file is compatible with both classic and new-style classes.


